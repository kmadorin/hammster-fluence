{"$message_type":"diagnostic","message":"The multicore feature flag is not supported on wasm32 architectures without atomics","code":null,"level":"error","spans":[{"file_name":"/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs","byte_start":342,"byte_end":449,"line_start":10,"line_end":12,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"compile_error!(","highlight_start":1,"highlight_end":16},{"text":"    \"The multicore feature flag is not supported on wasm32 architectures without atomics\"","highlight_start":1,"highlight_end":90},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: The multicore feature flag is not supported on wasm32 architectures without atomics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcompile_error!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"The multicore feature flag is not supported on wasm32 architectures without atomics\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `maybe_rayon::current_num_threads`, `maybe_rayon::iter::IndexedParallelIterator`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs","byte_start":607,"byte_end":626,"line_start":20,"line_end":20,"column_start":23,"column_end":42,"is_primary":true,"text":[{"text":"pub use maybe_rayon::{current_num_threads, iter::IndexedParallelIterator};","highlight_start":23,"highlight_end":42}],"label":"no `current_num_threads` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs","byte_start":628,"byte_end":657,"line_start":20,"line_end":20,"column_start":44,"column_end":73,"is_primary":true,"text":[{"text":"pub use maybe_rayon::{current_num_threads, iter::IndexedParallelIterator};","highlight_start":44,"highlight_end":73}],"label":"no `IndexedParallelIterator` in `iter`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs","byte_start":634,"byte_end":657,"line_start":20,"line_end":20,"column_start":50,"column_end":73,"is_primary":true,"text":[{"text":"pub use maybe_rayon::{current_num_threads, iter::IndexedParallelIterator};","highlight_start":50,"highlight_end":73}],"label":null,"suggested_replacement":"IntoParallelIterator","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `maybe_rayon::current_num_threads`, `maybe_rayon::iter::IndexedParallelIterator`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs:20:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use maybe_rayon::{current_num_threads, iter::IndexedParallelIterator};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: a similar name exists in the module: `IntoParallelIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `IndexedParallelIterator` in `iter`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `current_num_threads` in the root\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected a `Fn(&impl Fn() -> T + Send + Sync, Result<T, E>)` closure, found `impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs","byte_start":1875,"byte_end":1882,"line_start":56,"line_end":56,"column_start":35,"column_end":42,"is_primary":true,"text":[{"text":"        self.try_fold(&identity, &fold_op)","highlight_start":35,"highlight_end":42}],"label":"expected an `Fn(&impl Fn() -> T + Send + Sync, Result<T, E>)` closure, found `impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs","byte_start":1854,"byte_end":1862,"line_start":56,"line_end":56,"column_start":14,"column_end":22,"is_primary":false,"text":[{"text":"        self.try_fold(&identity, &fold_op)","highlight_start":14,"highlight_end":22}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected a closure with arguments `(T, Result<_, _>)`\n   found a closure with arguments `(&impl Fn() -> T + Send + Sync, Result<_, _>)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync` to implement `FnMut<(&impl Fn() -> T + Send + Sync, Result<T, E>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `try_fold`","code":null,"level":"note","spans":[{"file_name":"/rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/iter/traits/iterator.rs","byte_start":83091,"byte_end":83243,"line_start":2454,"line_end":2458,"column_start":5,"column_end":28,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: expected a `Fn(&impl Fn() -> T + Send + Sync, Result<T, E>)` closure, found `impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs:56:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.try_fold(&identity, &fold_op)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected an `Fn(&impl Fn() -> T + Send + Sync, Result<T, E>)` closure, found `impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected a closure with arguments `(\u001b[0m\u001b[0m\u001b[1m\u001b[35mT\u001b[0m\u001b[0m, Result<_, _>)`\u001b[0m\n\u001b[0m              found a closure with arguments `(\u001b[0m\u001b[0m\u001b[1m\u001b[35m&impl Fn() -> T + Send + Sync\u001b[0m\u001b[0m, Result<_, _>)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync` to implement `FnMut<(&impl Fn() -> T + Send + Sync, Result<T, E>)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `try_fold`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/iter/traits/iterator.rs:2454:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected a `FnOnce(&impl Fn() -> T + Send + Sync, Result<T, E>)` closure, found `impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs","byte_start":1874,"byte_end":1882,"line_start":56,"line_end":56,"column_start":34,"column_end":42,"is_primary":true,"text":[{"text":"        self.try_fold(&identity, &fold_op)","highlight_start":34,"highlight_end":42}],"label":"expected an `FnOnce(&impl Fn() -> T + Send + Sync, Result<T, E>)` closure, found `impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs","byte_start":1854,"byte_end":1862,"line_start":56,"line_end":56,"column_start":14,"column_end":22,"is_primary":false,"text":[{"text":"        self.try_fold(&identity, &fold_op)","highlight_start":14,"highlight_end":22}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected a closure with arguments `(T, Result<_, _>)`\n   found a closure with arguments `(&impl Fn() -> T + Send + Sync, Result<_, _>)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `try_fold`","code":null,"level":"note","spans":[{"file_name":"/rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/iter/traits/iterator.rs","byte_start":83091,"byte_end":83243,"line_start":2454,"line_end":2458,"column_start":5,"column_end":28,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: expected a `FnOnce(&impl Fn() -> T + Send + Sync, Result<T, E>)` closure, found `impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirillmadorin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/halo2_proofs-0.3.0/src/multicore.rs:56:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.try_fold(&identity, &fold_op)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected an `FnOnce(&impl Fn() -> T + Send + Sync, Result<T, E>)` closure, found `impl Fn(T, Result<T, E>) -> Result<T, E> + Send + Sync`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected a closure with arguments `(\u001b[0m\u001b[0m\u001b[1m\u001b[35mT\u001b[0m\u001b[0m, Result<_, _>)`\u001b[0m\n\u001b[0m              found a closure with arguments `(\u001b[0m\u001b[0m\u001b[1m\u001b[35m&impl Fn() -> T + Send + Sync\u001b[0m\u001b[0m, Result<_, _>)`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `try_fold`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/iter/traits/iterator.rs:2454:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0432.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0432.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
