// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/riscv64/inst.isle
// - src/isa/riscv64/inst_vector.isle
// - src/isa/riscv64/lower.isle
// - /Users/kirillmadorin/Projects/filecoin-data-economy-hack/hammster-fluence/target/debug/build/cranelift-codegen-6bff690ab7feac9e/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<i32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn frm_bits(&mut self, arg0: &FRM) -> UImm5;
    fn xreg_new(&mut self, arg0: Reg) -> XReg;
    fn writable_xreg_new(&mut self, arg0: WritableReg) -> WritableXReg;
    fn writable_xreg_to_xreg(&mut self, arg0: WritableXReg) -> XReg;
    fn writable_xreg_to_writable_reg(&mut self, arg0: WritableXReg) -> WritableReg;
    fn xreg_to_reg(&mut self, arg0: XReg) -> Reg;
    fn freg_new(&mut self, arg0: Reg) -> FReg;
    fn writable_freg_new(&mut self, arg0: WritableReg) -> WritableFReg;
    fn writable_freg_to_freg(&mut self, arg0: WritableFReg) -> FReg;
    fn writable_freg_to_writable_reg(&mut self, arg0: WritableFReg) -> WritableReg;
    fn freg_to_reg(&mut self, arg0: FReg) -> Reg;
    fn vreg_new(&mut self, arg0: Reg) -> VReg;
    fn writable_vreg_new(&mut self, arg0: WritableReg) -> WritableVReg;
    fn writable_vreg_to_vreg(&mut self, arg0: WritableVReg) -> VReg;
    fn writable_vreg_to_writable_reg(&mut self, arg0: WritableVReg) -> WritableReg;
    fn vreg_to_reg(&mut self, arg0: VReg) -> Reg;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn has_v(&mut self) -> bool;
    fn has_zbkb(&mut self) -> bool;
    fn has_zba(&mut self) -> bool;
    fn has_zbb(&mut self) -> bool;
    fn has_zbc(&mut self) -> bool;
    fn has_zbs(&mut self) -> bool;
    fn i64_generate_imm(&mut self, arg0: i64) -> Option<(Imm20, Imm12)>;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_and(&mut self, arg0: Imm12, arg1: u64) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn imm12_from_i64(&mut self, arg0: i64) -> Option<Imm12>;
    fn imm12_is_zero(&mut self, arg0: Imm12) -> Option<()>;
    fn imm20_is_zero(&mut self, arg0: Imm20) -> Option<()>;
    fn imm5_from_u64(&mut self, arg0: u64) -> Option<Imm5>;
    fn imm5_from_i64(&mut self, arg0: i64) -> Option<Imm5>;
    fn i8_to_imm5(&mut self, arg0: i8) -> Option<Imm5>;
    fn uimm5_from_u8(&mut self, arg0: u8) -> Option<UImm5>;
    fn uimm5_from_u64(&mut self, arg0: u64) -> Option<UImm5>;
    fn uimm5_bitcast_to_imm5(&mut self, arg0: UImm5) -> Imm5;
    fn gen_default_frm(&mut self) -> OptionFloatRoundingMode;
    fn gen_shamt(&mut self, arg0: Type, arg1: XReg) -> ValueRegs;
    fn gen_amode(&mut self, arg0: Reg, arg1: Offset32, arg2: Type) -> AMode;
    fn gen_const_amode(&mut self, arg0: VCodeConstant) -> AMode;
    fn default_memflags(&mut self) -> MemFlags;
    fn offset32_add(&mut self, arg0: Offset32, arg1: i64) -> Offset32;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self) -> AMO;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn gen_select_reg(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg, arg3: Reg, arg4: Reg)
        -> Reg;
    fn vec_writable_clone(&mut self, arg0: &VecWritableReg) -> VecWritableReg;
    fn vec_writable_to_regs(&mut self, arg0: &VecWritableReg) -> ValueRegs;
    fn alloc_vec_writable(&mut self, arg0: Type) -> VecWritableReg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_convert_2_float_op(&mut self, arg0: Type, arg1: bool, arg2: Type) -> FpuOPRR;
    fn label_to_br_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn vec_label_get(&mut self, arg0: &VecMachLabel, arg1: u8) -> MachLabel;
    fn lower_br_icmp(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: ValueRegs,
        arg3: &VecMachLabel,
        arg4: Type,
    ) -> Unit;
    fn int_zero_reg(&mut self, arg0: Type) -> ValueRegs;
    fn lower_cond_br(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: &VecMachLabel,
        arg3: Type,
    ) -> Unit;
    fn intcc_to_extend_op(&mut self, arg0: &IntCC) -> ExtendOp;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &VecMachLabel) -> Unit;
    fn load_ra(&mut self) -> Reg;
    fn shift_int_to_most_significant(&mut self, arg0: XReg, arg1: Type) -> XReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn fp_reg(&mut self) -> PReg;
    fn sp_reg(&mut self) -> PReg;
    fn zero_reg(&mut self) -> Reg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn int_compare(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg) -> IntegerCompare;
    fn vec_alu_rr_dst_type(&mut self, arg0: &VecAluOpRR) -> Type;
    fn vstate_from_type(&mut self, arg0: Type) -> VState;
    fn vstate_mf2(&mut self, arg0: VState) -> VState;
    fn min_vec_reg_size(&mut self) -> u64;
    fn ty_vec_fits_in_register(&mut self, arg0: Type) -> Option<Type>;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 314.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 356.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 375.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 383.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/riscv64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadInlineConst {
        rd: WritableReg,
        ty: Type,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    FpuRR {
        alu_op: FpuOPRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    CsrReg {
        op: CsrRegOP,
        rd: WritableReg,
        rs: Reg,
        csr: CSR,
    },
    CsrImm {
        op: CsrImmOP,
        rd: WritableReg,
        imm: UImm5,
        csr: CSR,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
        stack_bytes_to_pop: u32,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    AdjustSp {
        amount: i64,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        callee: BoxExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    TrapIf {
        test: Reg,
        trap_code: TrapCode,
    },
    TrapIfC {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    VirtualSPOffsetAdj {
        amount: i64,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    FenceI,
    ECall,
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: VecWritableReg,
        ty: Type,
        condition: Reg,
        x: ValueRegs,
        y: ValueRegs,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        targets: VecBranchTarget,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    IntSelect {
        op: IntSelectOP,
        dst: VecWritableReg,
        x: ValueRegs,
        y: ValueRegs,
        ty: Type,
    },
    Icmp {
        cc: IntCC,
        rd: WritableReg,
        a: ValueRegs,
        b: ValueRegs,
        ty: Type,
    },
    SelectReg {
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        condition: IntegerCompare,
    },
    FcvtToInt {
        is_sat: bool,
        rd: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        is_signed: bool,
        in_type: Type,
        out_type: Type,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    FloatRound {
        op: FloatRoundOP,
        rd: WritableReg,
        int_tmp: WritableReg,
        f_tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    FloatSelect {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Rev8 {
        rs: Reg,
        step: WritableReg,
        tmp: WritableReg,
        rd: WritableReg,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
    VecAluRRRR {
        op: VecAluOpRRRR,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRRImm5 {
        op: VecAluOpRRRImm5,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRR {
        op: VecAluOpRRR,
        vd: WritableReg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRImm5 {
        op: VecAluOpRRImm5,
        vd: WritableReg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRR {
        op: VecAluOpRR,
        vd: WritableReg,
        vs: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRImm5 {
        op: VecAluOpRImm5,
        vd: WritableReg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecSetState {
        rd: WritableReg,
        vstate: VState,
    },
    VecLoad {
        eew: VecElementWidth,
        to: WritableReg,
        from: VecAMode,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecStore {
        eew: VecElementWidth,
        to: VecAMode,
        from: Reg,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
}

/// Internal type FloatSelectOP: defined at src/isa/riscv64/inst.isle line 410.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatSelectOP {
    Max,
    Min,
}

/// Internal type FloatRoundOP: defined at src/isa/riscv64/inst.isle line 415.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatRoundOP {
    Nearest,
    Ceil,
    Floor,
    Trunc,
}

/// Internal type IntSelectOP: defined at src/isa/riscv64/inst.isle line 422.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntSelectOP {
    Smax,
    Umax,
    Smin,
    Umin,
}

/// Internal type AtomicOP: defined at src/isa/riscv64/inst.isle line 429.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src/isa/riscv64/inst.isle line 454.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
}

/// Internal type FClassResult: defined at src/isa/riscv64/inst.isle line 467.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPRR: defined at src/isa/riscv64/inst.isle line 490.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FmvXW,
    FclassS,
    FcvtSw,
    FcvtSwU,
    FmvWX,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLU,
    FcvtLD,
    FcvtLuD,
    FmvXD,
    FcvtDL,
    FcvtDLu,
    FmvDX,
    FsqrtD,
    FcvtSD,
    FcvtDS,
    FclassD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWU,
}

/// Internal type LoadOP: defined at src/isa/riscv64/inst.isle line 530.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src/isa/riscv64/inst.isle line 542.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src/isa/riscv64/inst.isle line 551.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Andn,
    Orn,
    Xnor,
    Max,
    Maxu,
    Min,
    Minu,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Pack,
    Packw,
    Packh,
}

/// Internal type FpuOPRRR: defined at src/isa/riscv64/inst.isle line 631.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FeqS,
    FltS,
    FleS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FeqD,
    FltD,
    FleD,
}

/// Internal type AluOPRRI: defined at src/isa/riscv64/inst.isle line 664.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    SlliUw,
    Clz,
    Clzw,
    Ctz,
    Ctzw,
    Cpop,
    Cpopw,
    Sextb,
    Sexth,
    Zexth,
    Rori,
    Roriw,
    Rev8,
    Brev8,
    Orcb,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
}

/// Internal type CsrRegOP: defined at src/isa/riscv64/inst.isle line 706.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrRegOP {
    CsrRW,
    CsrRS,
    CsrRC,
}

/// Internal type CsrImmOP: defined at src/isa/riscv64/inst.isle line 715.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrImmOP {
    CsrRWI,
    CsrRSI,
    CsrRCI,
}

/// Internal type CSR: defined at src/isa/riscv64/inst.isle line 725.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CSR {
    Frm,
}

/// Internal type FRM: defined at src/isa/riscv64/inst.isle line 731.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src/isa/riscv64/inst.isle line 751.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type ExtendOp: defined at src/isa/riscv64/inst.isle line 2032.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendOp {
    Zero,
    Signed,
}

/// Internal type CmpResult: defined at src/isa/riscv64/inst.isle line 2974.
#[derive(Clone, Debug)]
pub enum CmpResult {
    Result { result: XReg, invert: bool },
}

/// Internal type VecElementWidth: defined at src/isa/riscv64/inst_vector.isle line 2.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecElementWidth {
    E8,
    E16,
    E32,
    E64,
}

/// Internal type VecLmul: defined at src/isa/riscv64/inst_vector.isle line 15.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLmul {
    LmulF8,
    LmulF4,
    LmulF2,
    Lmul1,
    Lmul2,
    Lmul4,
    Lmul8,
}

/// Internal type VecTailMode: defined at src/isa/riscv64/inst_vector.isle line 28.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecTailMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecMaskMode: defined at src/isa/riscv64/inst_vector.isle line 38.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMaskMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecAvl: defined at src/isa/riscv64/inst_vector.isle line 50.
#[derive(Clone, Debug)]
pub enum VecAvl {
    Static { size: UImm5 },
}

/// Internal type VecOpCategory: defined at src/isa/riscv64/inst_vector.isle line 64.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecOpCategory {
    OPIVV,
    OPFVV,
    OPMVV,
    OPIVI,
    OPIVX,
    OPFVF,
    OPMVX,
    OPCFG,
}

/// Internal type VecOpMasking: defined at src/isa/riscv64/inst_vector.isle line 79.
#[derive(Clone, Debug)]
pub enum VecOpMasking {
    Enabled { reg: Reg },
    Disabled,
}

/// Internal type VecAluOpRRR: defined at src/isa/riscv64/inst_vector.isle line 91.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRR {
    VaddVV,
    VsaddVV,
    VsadduVV,
    VwaddVV,
    VwaddWV,
    VwadduVV,
    VwadduWV,
    VsubVV,
    VwsubVV,
    VwsubWV,
    VwsubuVV,
    VwsubuWV,
    VssubVV,
    VssubuVV,
    VmulVV,
    VmulhVV,
    VmulhuVV,
    VsmulVV,
    VsllVV,
    VsrlVV,
    VsraVV,
    VandVV,
    VorVV,
    VxorVV,
    VmaxVV,
    VmaxuVV,
    VminVV,
    VminuVV,
    VfaddVV,
    VfsubVV,
    VfmulVV,
    VfdivVV,
    VfminVV,
    VfmaxVV,
    VfsgnjVV,
    VfsgnjnVV,
    VfsgnjxVV,
    VmergeVVM,
    VredmaxuVS,
    VredminuVS,
    VrgatherVV,
    VcompressVM,
    VmseqVV,
    VmsneVV,
    VmsltuVV,
    VmsltVV,
    VmsleuVV,
    VmsleVV,
    VmfeqVV,
    VmfneVV,
    VmfltVV,
    VmfleVV,
    VmandMM,
    VmorMM,
    VmnandMM,
    VmnorMM,
    VaddVX,
    VsaddVX,
    VsadduVX,
    VwaddVX,
    VwaddWX,
    VwadduVX,
    VwadduWX,
    VsubVX,
    VrsubVX,
    VwsubVX,
    VwsubWX,
    VwsubuVX,
    VwsubuWX,
    VssubVX,
    VssubuVX,
    VmulVX,
    VmulhVX,
    VmulhuVX,
    VsmulVX,
    VsllVX,
    VsrlVX,
    VsraVX,
    VandVX,
    VorVX,
    VxorVX,
    VmaxVX,
    VmaxuVX,
    VminVX,
    VminuVX,
    VslidedownVX,
    VfaddVF,
    VfsubVF,
    VfrsubVF,
    VfmulVF,
    VfdivVF,
    VfsgnjVF,
    VfrdivVF,
    VmergeVXM,
    VfmergeVFM,
    VrgatherVX,
    VmseqVX,
    VmsneVX,
    VmsltuVX,
    VmsltVX,
    VmsleuVX,
    VmsleVX,
    VmsgtuVX,
    VmsgtVX,
    VmfeqVF,
    VmfneVF,
    VmfltVF,
    VmfleVF,
    VmfgtVF,
    VmfgeVF,
}

/// Internal type VecAluOpRRRImm5: defined at src/isa/riscv64/inst_vector.isle line 211.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRImm5 {
    VslideupVI,
}

/// Internal type VecAluOpRRRR: defined at src/isa/riscv64/inst_vector.isle line 216.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRR {
    VmaccVV,
    VnmsacVV,
    VfmaccVV,
    VfnmaccVV,
    VfmsacVV,
    VfnmsacVV,
    VmaccVX,
    VnmsacVX,
    VfmaccVF,
    VfnmaccVF,
    VfmsacVF,
    VfnmsacVF,
}

/// Internal type VecAluOpRRImm5: defined at src/isa/riscv64/inst_vector.isle line 235.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRImm5 {
    VaddVI,
    VsaddVI,
    VsadduVI,
    VrsubVI,
    VsllVI,
    VsrlVI,
    VsraVI,
    VandVI,
    VorVI,
    VxorVI,
    VssrlVI,
    VslidedownVI,
    VmergeVIM,
    VrgatherVI,
    VmvrV,
    VnclipWI,
    VnclipuWI,
    VmseqVI,
    VmsneVI,
    VmsleuVI,
    VmsleVI,
    VmsgtuVI,
    VmsgtVI,
}

/// Internal type VecAluOpRImm5: defined at src/isa/riscv64/inst_vector.isle line 265.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRImm5 {
    VmvVI,
}

/// Internal type VecAluOpRR: defined at src/isa/riscv64/inst_vector.isle line 272.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRR {
    VmvSX,
    VmvXS,
    VfmvSF,
    VfmvFS,
    VmvVV,
    VmvVX,
    VfmvVF,
    VfsqrtV,
    VsextVF2,
    VsextVF4,
    VsextVF8,
    VzextVF2,
    VzextVF4,
    VzextVF8,
    VfcvtxufV,
    VfcvtxfV,
    VfcvtrtzxufV,
    VfcvtrtzxfV,
    VfcvtfxuV,
    VfcvtfxV,
    VfwcvtffV,
    VfncvtffW,
}

/// Internal type VecAMode: defined at src/isa/riscv64/inst_vector.isle line 304.
#[derive(Clone, Debug)]
pub enum VecAMode {
    UnitStride { base: AMode },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 65.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 69.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 138.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 149.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 160.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 159"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 165.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 164"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 170.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 169"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 324.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 326.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 329.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 323"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 337.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 342.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 344.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 346.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 341"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 371.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 370"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 401.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 402.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 407.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 409.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 406"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 422.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 416.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 415"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 453.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 459.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 471.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 487.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 494.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 507.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 447.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 439.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 437"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 525.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 532.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 543.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 548.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 553.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 558.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 563.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 541"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 572.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 580.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 589.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 597.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 606.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 666.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 674.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 683.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 691.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 700.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 619.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 627.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 636.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 644.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 653.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 713.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 721.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 730.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 738.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 747.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 759.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 767.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 784.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 776.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 792.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 801.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 569"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1001.
    return v2;
}

// Generated as internal constructor for term put_in_xreg.
pub fn constructor_put_in_xreg<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 818.
    return v2;
}

// Generated as internal constructor for term output_xreg.
pub fn constructor_output_xreg<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 823.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_reg.
pub fn constructor_writable_xreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableXReg) -> Reg {
    let v1 = C::writable_xreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 838.
    return v2;
}

// Generated as internal constructor for term xreg_to_value_regs.
pub fn constructor_xreg_to_value_regs<C: Context>(ctx: &mut C, arg0: XReg) -> ValueRegs {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 848.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_value_regs.
pub fn constructor_writable_xreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXReg,
) -> ValueRegs {
    let v1 = constructor_writable_xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 853.
    return v2;
}

// Generated as internal constructor for term temp_writable_xreg.
pub fn constructor_temp_writable_xreg<C: Context>(ctx: &mut C) -> WritableXReg {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::writable_xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 858.
    return v2;
}

// Generated as internal constructor for term put_in_freg.
pub fn constructor_put_in_freg<C: Context>(ctx: &mut C, arg0: Value) -> FReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 879.
    return v2;
}

// Generated as internal constructor for term output_freg.
pub fn constructor_output_freg<C: Context>(ctx: &mut C, arg0: FReg) -> InstOutput {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 884.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_reg.
pub fn constructor_writable_freg_to_reg<C: Context>(ctx: &mut C, arg0: WritableFReg) -> Reg {
    let v1 = C::writable_freg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 899.
    return v2;
}

// Generated as internal constructor for term freg_to_value_regs.
pub fn constructor_freg_to_value_regs<C: Context>(ctx: &mut C, arg0: FReg) -> ValueRegs {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 909.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_value_regs.
pub fn constructor_writable_freg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableFReg,
) -> ValueRegs {
    let v1 = constructor_writable_freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 914.
    return v2;
}

// Generated as internal constructor for term temp_writable_freg.
pub fn constructor_temp_writable_freg<C: Context>(ctx: &mut C) -> WritableFReg {
    let v1 = C::temp_writable_reg(ctx, F64);
    let v2 = C::writable_freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 919.
    return v2;
}

// Generated as internal constructor for term put_in_vreg.
pub fn constructor_put_in_vreg<C: Context>(ctx: &mut C, arg0: Value) -> VReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 941.
    return v2;
}

// Generated as internal constructor for term output_vreg.
pub fn constructor_output_vreg<C: Context>(ctx: &mut C, arg0: VReg) -> InstOutput {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 946.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_reg.
pub fn constructor_writable_vreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableVReg) -> Reg {
    let v1 = C::writable_vreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 961.
    return v2;
}

// Generated as internal constructor for term vreg_to_value_regs.
pub fn constructor_vreg_to_value_regs<C: Context>(ctx: &mut C, arg0: VReg) -> ValueRegs {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 971.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_value_regs.
pub fn constructor_writable_vreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableVReg,
) -> ValueRegs {
    let v1 = constructor_writable_vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 976.
    return v2;
}

// Generated as internal constructor for term temp_writable_vreg.
pub fn constructor_temp_writable_vreg<C: Context>(ctx: &mut C) -> WritableVReg {
    let v1 = C::temp_writable_reg(ctx, I8X16);
    let v2 = C::writable_vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 981.
    return v2;
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FloatRoundOP,
    arg1: Reg,
    arg2: Type,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg2);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_freg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v7 = C::writable_freg_to_writable_reg(ctx, v5);
    let v8 = MInst::FloatRound {
        op: arg0.clone(),
        rd: v3,
        int_tmp: v6,
        f_tmp: v7,
        rs: arg1,
        ty: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1012.
    return v10;
}

// Generated as internal constructor for term gen_float_select.
pub fn constructor_gen_float_select<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = MInst::FloatSelect {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1022.
    return v9;
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Add, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1037.
    return v6;
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1043.
    return v5;
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1049.
    return v6;
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v2, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1055.
    return v5;
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1061.
    return v6;
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1067.
    return v5;
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1073.
    return v6;
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1079.
    return v5;
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1085.
    return v6;
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srai, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1091.
    return v5;
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1097.
    return v6;
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Ori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1103.
    return v5;
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1109.
    return v6;
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1115.
    return v5;
}

// Generated as internal constructor for term rv_not.
pub fn constructor_rv_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, -0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1121.
    return v3;
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::And, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1127.
    return v6;
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1133.
    return v5;
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1139.
    return v6;
}

// Generated as internal constructor for term rv_snez.
pub fn constructor_rv_snez<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = constructor_rv_sltu(ctx, v2, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1145.
    return v3;
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SltiU, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1151.
    return v5;
}

// Generated as internal constructor for term rv_seqz.
pub fn constructor_rv_seqz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x1);
    let v3 = constructor_rv_sltiu(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1157.
    return v3;
}

// Generated as internal constructor for term rv_addw.
pub fn constructor_rv_addw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1167.
    return v6;
}

// Generated as internal constructor for term rv_addiw.
pub fn constructor_rv_addiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1173.
    return v5;
}

// Generated as internal constructor for term rv_sextw.
pub fn constructor_rv_sextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x0);
    let v3 = constructor_rv_addiw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1179.
    return v3;
}

// Generated as internal constructor for term rv_subw.
pub fn constructor_rv_subw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1185.
    return v6;
}

// Generated as internal constructor for term rv_sllw.
pub fn constructor_rv_sllw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1191.
    return v6;
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slliw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1197.
    return v5;
}

// Generated as internal constructor for term rv_srlw.
pub fn constructor_rv_srlw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1203.
    return v6;
}

// Generated as internal constructor for term rv_srliw.
pub fn constructor_rv_srliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SrliW, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1209.
    return v5;
}

// Generated as internal constructor for term rv_sraw.
pub fn constructor_rv_sraw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1215.
    return v6;
}

// Generated as internal constructor for term rv_sraiw.
pub fn constructor_rv_sraiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sraiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1221.
    return v5;
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1231.
    return v6;
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1237.
    return v6;
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1243.
    return v6;
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Div, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1249.
    return v6;
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1255.
    return v6;
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1261.
    return v6;
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1267.
    return v6;
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1278.
    return v6;
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1284.
    return v6;
}

// Generated as internal constructor for term rv_divuw.
pub fn constructor_rv_divuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1290.
    return v6;
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1296.
    return v6;
}

// Generated as internal constructor for term rv_remuw.
pub fn constructor_rv_remuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1302.
    return v6;
}

// Generated as internal constructor for term rv_fadd.
pub fn constructor_rv_fadd<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1311.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1312.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fadd", "src/isa/riscv64/inst.isle line 1310"
    )
}

// Generated as internal constructor for term rv_fsub.
pub fn constructor_rv_fsub<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1316.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1317.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsub", "src/isa/riscv64/inst.isle line 1315"
    )
}

// Generated as internal constructor for term rv_fmul.
pub fn constructor_rv_fmul<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1321.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1322.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmul", "src/isa/riscv64/inst.isle line 1320"
    )
}

// Generated as internal constructor for term rv_fdiv.
pub fn constructor_rv_fdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1326.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1327.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fdiv", "src/isa/riscv64/inst.isle line 1325"
    )
}

// Generated as internal constructor for term rv_fsqrt.
pub fn constructor_rv_fsqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v4 = C::freg_to_reg(ctx, arg1);
            let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtS, F32, v4);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 1331.
            return v6;
        }
        F64 => {
            let v4 = C::freg_to_reg(ctx, arg1);
            let v9 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtD, F64, v4);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 1332.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsqrt", "src/isa/riscv64/inst.isle line 1330"
    )
}

// Generated as internal constructor for term rv_fmadd.
pub fn constructor_rv_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddS, F32, v6, v7, v8);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 1336.
            return v10;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v13 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddD, F64, v6, v7, v8);
            let v14 = C::freg_new(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 1337.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmadd", "src/isa/riscv64/inst.isle line 1335"
    )
}

// Generated as internal constructor for term rv_fmvxw.
pub fn constructor_rv_fmvxw<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXW, I32, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1341.
    return v5;
}

// Generated as internal constructor for term rv_fmvxd.
pub fn constructor_rv_fmvxd<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXD, I64, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1345.
    return v5;
}

// Generated as internal constructor for term rv_fmvwx.
pub fn constructor_rv_fmvwx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvWX, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1349.
    return v5;
}

// Generated as internal constructor for term rv_fmvdx.
pub fn constructor_rv_fmvdx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvDX, F64, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1353.
    return v5;
}

// Generated as internal constructor for term rv_fcvtds.
pub fn constructor_rv_fcvtds<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1357.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsd.
pub fn constructor_rv_fcvtsd<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, F64, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1361.
    return v5;
}

// Generated as internal constructor for term rv_fsgnj.
pub fn constructor_rv_fsgnj<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1367.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1368.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnj", "src/isa/riscv64/inst.isle line 1366"
    )
}

// Generated as internal constructor for term rv_fsgnjn.
pub fn constructor_rv_fsgnjn<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1374.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1375.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjn", "src/isa/riscv64/inst.isle line 1373"
    )
}

// Generated as internal constructor for term rv_fneg.
pub fn constructor_rv_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjn(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1380.
    return v2;
}

// Generated as internal constructor for term rv_fsgnjx.
pub fn constructor_rv_fsgnjx<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1386.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1387.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjx", "src/isa/riscv64/inst.isle line 1385"
    )
}

// Generated as internal constructor for term rv_fabs.
pub fn constructor_rv_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjx(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1392.
    return v2;
}

// Generated as internal constructor for term rv_feq.
pub fn constructor_rv_feq<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1396.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1397.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_feq", "src/isa/riscv64/inst.isle line 1395"
    )
}

// Generated as internal constructor for term rv_flt.
pub fn constructor_rv_flt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1401.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1402.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_flt", "src/isa/riscv64/inst.isle line 1400"
    )
}

// Generated as internal constructor for term rv_fle.
pub fn constructor_rv_fle<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1406.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1407.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fle", "src/isa/riscv64/inst.isle line 1405"
    )
}

// Generated as internal constructor for term rv_fgt.
pub fn constructor_rv_fgt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_flt(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1412.
    return v3;
}

// Generated as internal constructor for term rv_fge.
pub fn constructor_rv_fge<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_fle(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1417.
    return v3;
}

// Generated as internal constructor for term rv_adduw.
pub fn constructor_rv_adduw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Adduw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1425.
    return v6;
}

// Generated as internal constructor for term rv_zextw.
pub fn constructor_rv_zextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = constructor_rv_adduw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1432.
    return v3;
}

// Generated as internal constructor for term rv_slliuw.
pub fn constructor_rv_slliuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SlliUw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1438.
    return v5;
}

// Generated as internal constructor for term rv_andn.
pub fn constructor_rv_andn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1447.
    return v6;
}

// Generated as internal constructor for term rv_orn.
pub fn constructor_rv_orn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1453.
    return v6;
}

// Generated as internal constructor for term rv_clz.
pub fn constructor_rv_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1458.
    return v4;
}

// Generated as internal constructor for term rv_clzw.
pub fn constructor_rv_clzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1463.
    return v4;
}

// Generated as internal constructor for term rv_ctz.
pub fn constructor_rv_ctz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1468.
    return v4;
}

// Generated as internal constructor for term rv_ctzw.
pub fn constructor_rv_ctzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1473.
    return v4;
}

// Generated as internal constructor for term rv_cpop.
pub fn constructor_rv_cpop<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1478.
    return v4;
}

// Generated as internal constructor for term rv_max.
pub fn constructor_rv_max<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1483.
    return v6;
}

// Generated as internal constructor for term rv_sextb.
pub fn constructor_rv_sextb<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sextb, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1488.
    return v6;
}

// Generated as internal constructor for term rv_sexth.
pub fn constructor_rv_sexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1493.
    return v6;
}

// Generated as internal constructor for term rv_zexth.
pub fn constructor_rv_zexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Zexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1498.
    return v6;
}

// Generated as internal constructor for term rv_rol.
pub fn constructor_rv_rol<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1503.
    return v6;
}

// Generated as internal constructor for term rv_rolw.
pub fn constructor_rv_rolw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1508.
    return v6;
}

// Generated as internal constructor for term rv_ror.
pub fn constructor_rv_ror<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1513.
    return v6;
}

// Generated as internal constructor for term rv_rorw.
pub fn constructor_rv_rorw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1518.
    return v6;
}

// Generated as internal constructor for term rv_rev8.
pub fn constructor_rv_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1523.
    return v4;
}

// Generated as internal constructor for term rv_brev8.
pub fn constructor_rv_brev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1531.
    return v4;
}

// Generated as internal constructor for term rv_bseti.
pub fn constructor_rv_bseti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1536.
    return v5;
}

// Generated as internal constructor for term rv_pack.
pub fn constructor_rv_pack<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Pack, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1544.
    return v6;
}

// Generated as internal constructor for term rv_packw.
pub fn constructor_rv_packw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Packw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1549.
    return v6;
}

// Generated as internal constructor for term rv_csrrwi.
pub fn constructor_rv_csrrwi<C: Context>(ctx: &mut C, arg0: &CSR, arg1: UImm5) -> XReg {
    let v3 = constructor_csr_imm(ctx, &CsrImmOP::CsrRWI, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1557.
    return v3;
}

// Generated as internal constructor for term rv_fsrmi.
pub fn constructor_rv_fsrmi<C: Context>(ctx: &mut C, arg0: &FRM) -> XReg {
    let v2 = C::frm_bits(ctx, arg0);
    let v3 = constructor_rv_csrrwi(ctx, &CSR::Frm, v2);
    // Rule at src/isa/riscv64/inst.isle line 1562.
    return v3;
}

// Generated as internal constructor for term rv_csrw.
pub fn constructor_rv_csrw<C: Context>(ctx: &mut C, arg0: &CSR, arg1: XReg) -> Unit {
    let v3 = constructor_csr_reg_dst_zero(ctx, &CsrRegOP::CsrRW, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1568.
    return v3;
}

// Generated as internal constructor for term rv_fsrm.
pub fn constructor_rv_fsrm<C: Context>(ctx: &mut C, arg0: XReg) -> Unit {
    let v2 = constructor_rv_csrw(ctx, &CSR::Frm, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1573.
    return v2;
}

// Generated as internal constructor for term shift_mask.
pub fn constructor_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/isa/riscv64/inst.isle line 1581.
    return v5;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        R32 => {
            let v3 = constructor_imm(ctx, I32, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1595.
            return v3;
        }
        R64 => {
            let v5 = constructor_imm(ctx, I64, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1596.
            return v5;
        }
        F32 => {
            let v3 = constructor_imm(ctx, I32, arg1);
            let v7 = constructor_gen_bitcast(ctx, v3, I32, F32);
            // Rule at src/isa/riscv64/inst.isle line 1599.
            return v7;
        }
        F64 => {
            let v5 = constructor_imm(ctx, I64, arg1);
            let v9 = constructor_gen_bitcast(ctx, v5, I64, F64);
            // Rule at src/isa/riscv64/inst.isle line 1600.
            return v9;
        }
        _ => {}
    }
    let v10 = C::ty_int(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::i64_sextend_u64(ctx, v11, arg1);
        let v13 = C::i64_generate_imm(ctx, v12);
        if let Some(v14) = v13 {
            let v17 = C::imm20_is_zero(ctx, v14.0);
            if let Some(v18) = v17 {
                let v19 = C::zero_reg(ctx);
                let v20 = C::xreg_new(ctx, v19);
                let v21 = constructor_rv_addi(ctx, v20, v14.1);
                let v22 = C::xreg_to_reg(ctx, v21);
                // Rule at src/isa/riscv64/inst.isle line 1603.
                return v22;
            }
            let v23 = C::imm12_is_zero(ctx, v14.1);
            if let Some(v24) = v23 {
                let v25 = constructor_rv_lui(ctx, v14.0);
                let v26 = C::xreg_to_reg(ctx, v25);
                // Rule at src/isa/riscv64/inst.isle line 1610.
                return v26;
            }
            let v25 = constructor_rv_lui(ctx, v14.0);
            let v27 = constructor_rv_addi(ctx, v25, v14.1);
            let v28 = C::xreg_to_reg(ctx, v27);
            // Rule at src/isa/riscv64/inst.isle line 1616.
            return v28;
        }
        let v31 = C::emit_u64_le_const(ctx, arg1);
        let v32 = C::gen_const_amode(ctx, v31);
        let v30 = C::mem_flags_trusted(ctx);
        let v33 = constructor_emit_load(ctx, &LoadOP::Ld, v30, v32);
        // Rule at src/isa/riscv64/inst.isle line 1621.
        return v33;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/riscv64/inst.isle line 1592"
    )
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(ctx: &mut C) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0x0);
    // Rule at src/isa/riscv64/inst.isle line 1630.
    return v1;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(ctx: &mut C, arg0: i32) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = C::imm12_const(ctx, arg0);
    let v4 = constructor_rv_addi(ctx, v2, v3);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1637.
    return v5;
}

// Generated as internal constructor for term u64_to_imm12.
pub fn constructor_u64_to_imm12<C: Context>(ctx: &mut C, arg0: u64) -> Option<Imm12> {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1666.
        return Some(v2);
    }
    None
}

// Generated as internal constructor for term u64_to_uimm5.
pub fn constructor_u64_to_uimm5<C: Context>(ctx: &mut C, arg0: u64) -> Option<UImm5> {
    let v1 = C::uimm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1719.
        return Some(v2);
    }
    None
}

// Generated as internal constructor for term canonical_nan_u64.
pub fn constructor_canonical_nan_u64<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 1728.
            return 0x7FC00000;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 1729.
            return 0x7FF8000000000000;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "canonical_nan_u64", "src/isa/riscv64/inst.isle line 1727"
    )
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: &FpuOPRR, arg1: Type, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg1);
    let v4 = C::gen_default_frm(ctx);
    let v5 = MInst::FpuRR {
        alu_op: arg0.clone(),
        frm: v4,
        rd: v3,
        rs: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1736.
    return v7;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(ctx: &mut C, arg0: &AluOPRRR, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1743.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg1);
    let v5 = C::gen_default_frm(ctx);
    let v6 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        frm: v5,
        rd: v4,
        rs1: arg2,
        rs2: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1750.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg1);
    let v6 = C::gen_default_frm(ctx);
    let v7 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        frm: v6,
        rd: v5,
        rs1: arg2,
        rs2: arg3,
        rs3: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1757.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1765.
    return v7;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(ctx: &mut C, arg0: &AluOPRRI, arg1: Reg) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 1773.
    return v7;
}

// Generated as internal constructor for term rv_lui.
pub fn constructor_rv_lui<C: Context>(ctx: &mut C, arg0: Imm20) -> XReg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::Lui { rd: v2, imm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xreg_to_xreg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1782.
    return v5;
}

// Generated as internal constructor for term csr_imm.
pub fn constructor_csr_imm<C: Context>(
    ctx: &mut C,
    arg0: &CsrImmOP,
    arg1: &CSR,
    arg2: UImm5,
) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::CsrImm {
        op: arg0.clone(),
        rd: v4,
        imm: arg2,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xreg_to_xreg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1789.
    return v7;
}

// Generated as internal constructor for term csr_reg_dst_zero.
pub fn constructor_csr_reg_dst_zero<C: Context>(
    ctx: &mut C,
    arg0: &CsrRegOP,
    arg1: &CSR,
    arg2: XReg,
) -> Unit {
    let v3 = C::writable_zero_reg(ctx);
    let v4 = C::xreg_to_reg(ctx, arg2);
    let v5 = MInst::CsrReg {
        op: arg0.clone(),
        rd: v3,
        rs: v4,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    // Rule at src/isa/riscv64/inst.isle line 1796.
    return v6;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(ctx: &mut C, arg0: Type) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1802.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/riscv64/inst.isle line 1803.
        return AluOPRRI::Addi;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_addi", "src/isa/riscv64/inst.isle line 1801"
    )
}

// Generated as internal constructor for term gen_bnot.
pub fn constructor_gen_bnot<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    let v1 = C::ty_scalar_float(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::freg_new(ctx, v5);
        let v7 = constructor_move_f_to_x(ctx, v6, v2);
        let v8 = constructor_rv_not(ctx, v7);
        let v9 = constructor_float_int_of_same_size(ctx, v2);
        let v10 = constructor_move_x_to_f(ctx, v8, v9);
        let v11 = C::freg_to_reg(ctx, v10);
        let v12 = C::value_reg(ctx, v11);
        // Rule at src/isa/riscv64/inst.isle line 1807.
        return v12;
    }
    if arg0 == I128 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v13 = C::xreg_new(ctx, v5);
        let v14 = constructor_rv_not(ctx, v13);
        let v16 = C::value_regs_get(ctx, arg1, 0x1);
        let v17 = C::xreg_new(ctx, v16);
        let v18 = constructor_rv_not(ctx, v17);
        let v19 = C::xreg_to_reg(ctx, v14);
        let v20 = C::xreg_to_reg(ctx, v18);
        let v21 = C::value_regs(ctx, v19, v20);
        // Rule at src/isa/riscv64/inst.isle line 1814.
        return v21;
    }
    let v22 = C::ty_int_ref_scalar_64_extract(ctx, arg0);
    if let Some(v23) = v22 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v13 = C::xreg_new(ctx, v5);
        let v14 = constructor_rv_not(ctx, v13);
        let v19 = C::xreg_to_reg(ctx, v14);
        let v24 = C::value_reg(ctx, v19);
        // Rule at src/isa/riscv64/inst.isle line 1819.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bnot", "src/isa/riscv64/inst.isle line 1806"
    )
}

// Generated as internal constructor for term gen_and.
pub fn constructor_gen_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_and(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_and(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 1824.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_and(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 1829.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_and", "src/isa/riscv64/inst.isle line 1823"
    )
}

// Generated as internal constructor for term gen_andi.
pub fn constructor_gen_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: u64) -> XReg {
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_rv_andi(ctx, arg0, v3);
        // Rule at src/isa/riscv64/inst.isle line 1834.
        return v4;
    }
    let v6 = constructor_imm(ctx, I64, arg1);
    let v7 = C::xreg_new(ctx, v6);
    let v8 = constructor_rv_and(ctx, arg0, v7);
    // Rule at src/isa/riscv64/inst.isle line 1837.
    return v8;
}

// Generated as internal constructor for term gen_or.
pub fn constructor_gen_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 1842.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 1847.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_or", "src/isa/riscv64/inst.isle line 1841"
    )
}

// Generated as internal constructor for term gen_bswap.
pub fn constructor_gen_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v19 = C::has_zbb(ctx);
    if v19 == true {
        if arg0 == I64 {
            let v26 = constructor_rv_rev8(ctx, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1879.
            return v26;
        }
        let v17 = C::int_fits_in_32(ctx, arg0);
        if let Some(v18) = v17 {
            let v21 = C::ty_bits(ctx, v18);
            let v22 = C::u8_as_u64(ctx, v21);
            let v23 = C::u64_sub(ctx, 0x40, v22);
            let v24 = constructor_u64_to_imm12(ctx, v23);
            if let Some(v25) = v24 {
                let v26 = constructor_rv_rev8(ctx, arg1);
                let v27 = constructor_rv_srli(ctx, v26, v25);
                // Rule at src/isa/riscv64/inst.isle line 1873.
                return v27;
            }
        }
    }
    let v2 = C::ty_int_ref_16_to_64(ctx, arg0);
    if let Some(v3) = v2 {
        let v4 = C::ty_half_width(ctx, v3);
        if let Some(v5) = v4 {
            let v6 = C::ty_bits(ctx, v5);
            let v7 = C::u8_as_u64(ctx, v6);
            let v8 = constructor_u64_to_imm12(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = constructor_gen_bswap(ctx, v5, arg1);
                let v11 = constructor_rv_slli(ctx, v10, v9);
                let v12 = constructor_rv_srli(ctx, arg1, v9);
                let v13 = constructor_gen_bswap(ctx, v5, v12);
                let v15 = constructor_zext(ctx, v13, v5, I64);
                let v16 = constructor_rv_or(ctx, v11, v15);
                // Rule at src/isa/riscv64/inst.isle line 1857.
                return v16;
            }
        }
    }
    if arg0 == I8 {
        // Rule at src/isa/riscv64/inst.isle line 1855.
        return arg1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bswap", "src/isa/riscv64/inst.isle line 1852"
    )
}

// Generated as internal constructor for term lower_bit_reverse.
pub fn constructor_lower_bit_reverse<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    match arg1 {
        I8 => {
            let v3 = constructor_gen_brev8(ctx, arg0, I8);
            // Rule at src/isa/riscv64/inst.isle line 1888.
            return v3;
        }
        I16 => {
            let v5 = constructor_gen_brev8(ctx, arg0, I16);
            let v6 = C::xreg_new(ctx, v5);
            let v7 = constructor_gen_rev8(ctx, v6);
            let v9 = C::imm12_const(ctx, 0x30);
            let v10 = constructor_rv_srli(ctx, v7, v9);
            let v11 = C::xreg_to_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1892.
            return v11;
        }
        I32 => {
            let v13 = constructor_gen_brev8(ctx, arg0, I32);
            let v14 = C::xreg_new(ctx, v13);
            let v15 = constructor_gen_rev8(ctx, v14);
            let v17 = C::imm12_const(ctx, 0x20);
            let v18 = constructor_rv_srli(ctx, v15, v17);
            let v19 = C::xreg_to_reg(ctx, v18);
            // Rule at src/isa/riscv64/inst.isle line 1900.
            return v19;
        }
        I64 => {
            let v20 = C::xreg_new(ctx, arg0);
            let v21 = constructor_gen_rev8(ctx, v20);
            let v22 = C::xreg_to_reg(ctx, v21);
            let v24 = constructor_gen_brev8(ctx, v22, I64);
            // Rule at src/isa/riscv64/inst.isle line 1908.
            return v24;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bit_reverse", "src/isa/riscv64/inst.isle line 1885"
    )
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::has_zbb(ctx);
    if v8 == true {
        match arg0 {
            I32 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v15 = constructor_rv_ctzw(ctx, v3);
                let v16 = C::xreg_to_reg(ctx, v15);
                // Rule at src/isa/riscv64/inst.isle line 1923.
                return v16;
            }
            I64 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v17 = constructor_rv_ctz(ctx, v3);
                let v18 = C::xreg_to_reg(ctx, v17);
                // Rule at src/isa/riscv64/inst.isle line 1927.
                return v18;
            }
            _ => {}
        }
        let v6 = C::fits_in_16(ctx, arg0);
        if let Some(v7) = v6 {
            let v9 = C::ty_bits(ctx, v7);
            let v10 = C::u8_as_u64(ctx, v9);
            let v11 = constructor_gen_bseti(ctx, arg1, v10);
            let v12 = C::xreg_new(ctx, v11);
            let v13 = constructor_rv_ctzw(ctx, v12);
            let v14 = C::xreg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 1918.
            return v14;
        }
    }
    let v3 = C::xreg_new(ctx, arg1);
    let v4 = constructor_gen_cltz(ctx, false, v3, arg0);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1915.
    return v5;
}

// Generated as internal constructor for term lower_ctz_128.
pub fn constructor_lower_ctz_128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::xreg_to_reg(ctx, v6);
    let v9 = constructor_lower_ctz(ctx, I64, v8);
    let v10 = C::xreg_new(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, v3);
    let v12 = constructor_lower_ctz(ctx, I64, v11);
    let v13 = C::xreg_new(ctx, v12);
    let v15 = C::zero_reg(ctx);
    let v16 = C::xreg_new(ctx, v15);
    let v18 = C::zero_reg(ctx);
    let v17 = C::xreg_to_reg(ctx, v10);
    let v19 = C::gen_select_reg(ctx, &IntCC::Equal, v3, v16, v17, v18);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = constructor_rv_add(ctx, v13, v20);
    let v22 = C::xreg_to_reg(ctx, v21);
    let v23 = C::value_reg(ctx, v22);
    let v26 = constructor_extend(ctx, v23, &ExtendOp::Zero, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1934.
    return v26;
}

// Generated as internal constructor for term lower_clz.
pub fn constructor_lower_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v6 = C::has_zbb(ctx);
    if v6 == true {
        match arg0 {
            I32 => {
                let v15 = constructor_rv_clzw(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1957.
                return v15;
            }
            I64 => {
                let v16 = constructor_rv_clz(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1961.
                return v16;
            }
            _ => {}
        }
        let v4 = C::fits_in_16(ctx, arg0);
        if let Some(v5) = v4 {
            let v8 = constructor_zext(ctx, arg1, v5, I64);
            let v9 = constructor_rv_clz(ctx, v8);
            let v10 = C::ty_bits(ctx, v5);
            let v11 = C::u8_as_i32(ctx, v10);
            let v13 = C::imm12_const_add(ctx, v11, -0x40);
            let v14 = constructor_rv_addi(ctx, v9, v13);
            // Rule at src/isa/riscv64/inst.isle line 1949.
            return v14;
        }
    }
    let v3 = constructor_gen_cltz(ctx, true, arg1, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1946.
    return v3;
}

// Generated as internal constructor for term lower_clz_i128.
pub fn constructor_lower_clz_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = constructor_lower_clz(ctx, I64, v6);
    let v9 = constructor_lower_clz(ctx, I64, v3);
    let v11 = C::zero_reg(ctx);
    let v12 = C::xreg_new(ctx, v11);
    let v14 = C::zero_reg(ctx);
    let v13 = C::xreg_to_reg(ctx, v9);
    let v15 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v12, v13, v14);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_add(ctx, v8, v16);
    let v18 = C::xreg_to_reg(ctx, v17);
    let v19 = C::value_reg(ctx, v18);
    let v22 = constructor_extend(ctx, v19, &ExtendOp::Zero, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1969.
    return v22;
}

// Generated as internal constructor for term lower_cls.
pub fn constructor_lower_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v3 = constructor_sext(ctx, arg1, arg0, I64);
    let v5 = C::zero_reg(ctx);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_not(ctx, v3);
    let v8 = C::xreg_to_reg(ctx, v7);
    let v9 = C::xreg_to_reg(ctx, v3);
    let v10 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v3, v6, v8, v9);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = constructor_lower_clz(ctx, arg0, v11);
    let v14 = C::imm12_const(ctx, -0x1);
    let v15 = constructor_rv_addi(ctx, v12, v14);
    // Rule at src/isa/riscv64/inst.isle line 1982.
    return v15;
}

// Generated as internal constructor for term lower_cls_i128.
pub fn constructor_lower_cls_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::zero_reg(ctx);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_not(ctx, v3);
    let v11 = C::xreg_to_reg(ctx, v10);
    let v12 = C::xreg_to_reg(ctx, v3);
    let v13 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v6, v9, v11, v12);
    let v14 = C::xreg_new(ctx, v13);
    let v15 = C::zero_reg(ctx);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_not(ctx, v6);
    let v18 = C::xreg_to_reg(ctx, v17);
    let v19 = C::xreg_to_reg(ctx, v6);
    let v20 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v6, v16, v18, v19);
    let v21 = C::xreg_new(ctx, v20);
    let v22 = C::xreg_to_reg(ctx, v14);
    let v23 = C::xreg_to_reg(ctx, v21);
    let v24 = C::value_regs(ctx, v22, v23);
    let v25 = constructor_lower_clz_i128(ctx, v24);
    let v26 = C::value_regs_get(ctx, v25, 0x0);
    let v27 = C::xreg_new(ctx, v26);
    let v29 = C::imm12_const(ctx, -0x1);
    let v30 = constructor_rv_addi(ctx, v27, v29);
    let v31 = C::xreg_to_reg(ctx, v30);
    let v32 = C::value_reg(ctx, v31);
    let v36 = constructor_extend(ctx, v32, &ExtendOp::Zero, I64, I128);
    // Rule at src/isa/riscv64/inst.isle line 1992.
    return v36;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(ctx: &mut C, arg0: bool, arg1: XReg, arg2: Type) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v9 = C::xreg_to_reg(ctx, arg1);
    let v10 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v7,
        tmp: v8,
        rs: v9,
        ty: arg2,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2004.
    return v12;
}

// Generated as internal constructor for term ext_int_if_need.
pub fn constructor_ext_int_if_need<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: ValueRegs,
    arg2: Type,
) -> ValueRegs {
    match arg2 {
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 2020.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 2021.
            return arg1;
        }
        _ => {}
    }
    match arg0 {
        true => {
            let v3 = C::fits_in_32(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = C::ty_int(ctx, v4);
                if let Some(v6) = v5 {
                    let v9 = constructor_extend(ctx, arg1, &ExtendOp::Signed, v6, I64);
                    // Rule at src/isa/riscv64/inst.isle line 2015.
                    return v9;
                }
            }
        }
        false => {
            let v3 = C::fits_in_32(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = C::ty_int(ctx, v4);
                if let Some(v6) = v5 {
                    let v11 = constructor_extend(ctx, arg1, &ExtendOp::Zero, v6, I64);
                    // Rule at src/isa/riscv64/inst.isle line 2017.
                    return v11;
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ext_int_if_need", "src/isa/riscv64/inst.isle line 2013"
    )
}

// Generated as internal constructor for term zext.
pub fn constructor_zext<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type, arg2: Type) -> XReg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::xreg_to_reg(ctx, arg0);
        let v6 = C::value_reg(ctx, v5);
        let v8 = constructor_extend(ctx, v6, &ExtendOp::Zero, arg1, v4);
        let v10 = C::value_regs_get(ctx, v8, 0x0);
        let v11 = C::xreg_new(ctx, v10);
        // Rule at src/isa/riscv64/inst.isle line 2026.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext", "src/isa/riscv64/inst.isle line 2025"
    )
}

// Generated as internal constructor for term sext.
pub fn constructor_sext<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type, arg2: Type) -> XReg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::xreg_to_reg(ctx, arg0);
        let v6 = C::value_reg(ctx, v5);
        let v8 = constructor_extend(ctx, v6, &ExtendOp::Signed, arg1, v4);
        let v10 = C::value_regs_get(ctx, v8, 0x0);
        let v11 = C::xreg_new(ctx, v10);
        // Rule at src/isa/riscv64/inst.isle line 2030.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext", "src/isa/riscv64/inst.isle line 2029"
    )
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: &ExtendOp,
    arg2: Type,
    arg3: Type,
) -> ValueRegs {
    if arg2 == arg3 {
        // Rule at src/isa/riscv64/inst.isle line 2124.
        return arg0;
    }
    match arg1 {
        &ExtendOp::Zero => {
            match arg3 {
                I64 => {
                    if arg2 == I32 {
                        let v50 = C::has_zba(ctx);
                        if v50 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v51 = constructor_rv_zextw(ctx, v10);
                            let v52 = C::xreg_to_reg(ctx, v51);
                            let v53 = C::value_reg(ctx, v52);
                            // Rule at src/isa/riscv64/inst.isle line 2102.
                            return v53;
                        }
                    }
                }
                I128 => {
                    let v54 = C::fits_in_64(ctx, arg2);
                    if let Some(v55) = v54 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v64 = constructor_zext(ctx, v10, v55, I64);
                        let v66 = constructor_imm(ctx, I64, 0x0);
                        let v67 = C::xreg_new(ctx, v66);
                        let v68 = C::xreg_to_reg(ctx, v64);
                        let v69 = C::xreg_to_reg(ctx, v67);
                        let v70 = C::value_regs(ctx, v68, v69);
                        // Rule at src/isa/riscv64/inst.isle line 2117.
                        return v70;
                    }
                }
                _ => {}
            }
            match arg2 {
                I8 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v24 = C::imm12_const(ctx, 0xFF);
                        let v25 = constructor_rv_andi(ctx, v10, v24);
                        let v26 = C::xreg_to_reg(ctx, v25);
                        let v27 = C::value_reg(ctx, v26);
                        // Rule at src/isa/riscv64/inst.isle line 2056.
                        return v27;
                    }
                }
                I16 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v40 = C::has_zbb(ctx);
                        if v40 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v47 = constructor_rv_zexth(ctx, v10);
                            let v48 = C::xreg_to_reg(ctx, v47);
                            let v49 = C::value_reg(ctx, v48);
                            // Rule at src/isa/riscv64/inst.isle line 2096.
                            return v49;
                        }
                        let v31 = C::has_zbkb(ctx);
                        if v31 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v32 = C::zero_reg(ctx);
                            let v33 = C::xreg_new(ctx, v32);
                            let v34 = constructor_rv_packw(ctx, v10, v33);
                            let v35 = C::xreg_to_reg(ctx, v34);
                            let v36 = C::value_reg(ctx, v35);
                            // Rule at src/isa/riscv64/inst.isle line 2071.
                            return v36;
                        }
                    }
                }
                I32 => {
                    if arg3 == I64 {
                        let v31 = C::has_zbkb(ctx);
                        if v31 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v32 = C::zero_reg(ctx);
                            let v33 = C::xreg_new(ctx, v32);
                            let v37 = constructor_rv_pack(ctx, v10, v33);
                            let v38 = C::xreg_to_reg(ctx, v37);
                            let v39 = C::value_reg(ctx, v38);
                            // Rule at src/isa/riscv64/inst.isle line 2077.
                            return v39;
                        }
                    }
                }
                _ => {}
            }
        }
        &ExtendOp::Signed => {
            match arg3 {
                I64 => {
                    if arg2 == I32 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v28 = constructor_rv_sextw(ctx, v10);
                        let v29 = C::xreg_to_reg(ctx, v28);
                        let v30 = C::value_reg(ctx, v29);
                        // Rule at src/isa/riscv64/inst.isle line 2062.
                        return v30;
                    }
                }
                I128 => {
                    let v54 = C::fits_in_64(ctx, arg2);
                    if let Some(v55) = v54 {
                        let v9 = C::value_regs_get(ctx, arg0, 0x0);
                        let v10 = C::xreg_new(ctx, v9);
                        let v57 = constructor_sext(ctx, v10, v55, I64);
                        let v59 = C::imm12_const(ctx, 0x3F);
                        let v60 = constructor_rv_srai(ctx, v57, v59);
                        let v61 = C::xreg_to_reg(ctx, v57);
                        let v62 = C::xreg_to_reg(ctx, v60);
                        let v63 = C::value_regs(ctx, v61, v62);
                        // Rule at src/isa/riscv64/inst.isle line 2109.
                        return v63;
                    }
                }
                _ => {}
            }
            match arg2 {
                I8 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v40 = C::has_zbb(ctx);
                        if v40 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v41 = constructor_rv_sextb(ctx, v10);
                            let v42 = C::xreg_to_reg(ctx, v41);
                            let v43 = C::value_reg(ctx, v42);
                            // Rule at src/isa/riscv64/inst.isle line 2084.
                            return v43;
                        }
                    }
                }
                I16 => {
                    let v6 = C::fits_in_64(ctx, arg3);
                    if let Some(v7) = v6 {
                        let v40 = C::has_zbb(ctx);
                        if v40 == true {
                            let v9 = C::value_regs_get(ctx, arg0, 0x0);
                            let v10 = C::xreg_new(ctx, v9);
                            let v44 = constructor_rv_sexth(ctx, v10);
                            let v45 = C::xreg_to_reg(ctx, v44);
                            let v46 = C::value_reg(ctx, v45);
                            // Rule at src/isa/riscv64/inst.isle line 2090.
                            return v46;
                        }
                    }
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v3 = C::fits_in_32(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::fits_in_64(ctx, arg3);
        if let Some(v7) = v6 {
            let v9 = C::value_regs_get(ctx, arg0, 0x0);
            let v10 = C::xreg_new(ctx, v9);
            let v12 = C::ty_bits(ctx, v4);
            let v13 = C::u8_as_u64(ctx, v12);
            let v14 = C::u64_sub(ctx, 0x40, v13);
            let v15 = C::imm_from_bits(ctx, v14);
            let v16 = constructor_rv_slli(ctx, v10, v15);
            let v17 = &constructor_extend_shift_op(ctx, arg1);
            let v18 = C::xreg_to_reg(ctx, v16);
            let v19 = constructor_alu_rr_imm12(ctx, v17, v18, v15);
            let v20 = C::xreg_new(ctx, v19);
            let v21 = C::xreg_to_reg(ctx, v20);
            let v22 = C::value_reg(ctx, v21);
            // Rule at src/isa/riscv64/inst.isle line 2047.
            return v22;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend", "src/isa/riscv64/inst.isle line 2038"
    )
}

// Generated as internal constructor for term extend_shift_op.
pub fn constructor_extend_shift_op<C: Context>(ctx: &mut C, arg0: &ExtendOp) -> AluOPRRI {
    match arg0 {
        &ExtendOp::Zero => {
            // Rule at src/isa/riscv64/inst.isle line 2042.
            return AluOPRRI::Srli;
        }
        &ExtendOp::Signed => {
            // Rule at src/isa/riscv64/inst.isle line 2043.
            return AluOPRRI::Srai;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend_shift_op", "src/isa/riscv64/inst.isle line 2041"
    )
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::value_regs_get(ctx, arg2, 0x0);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::xreg_new(ctx, v6);
    let v9 = C::value_regs_get(ctx, arg1, 0x1);
    let v10 = C::value_regs_get(ctx, arg2, 0x1);
    let v11 = constructor_alu_rrr(ctx, arg0, v9, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = C::xreg_to_reg(ctx, v7);
    let v14 = C::xreg_to_reg(ctx, v12);
    let v15 = C::value_regs(ctx, v13, v14);
    // Rule at src/isa/riscv64/inst.isle line 2130.
    return v15;
}

// Generated as internal constructor for term lower_umlhi.
pub fn constructor_lower_umlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulhu(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2139.
        return v3;
    }
    let v5 = constructor_zext(ctx, arg1, arg0, I64);
    let v6 = constructor_zext(ctx, arg2, arg0, I64);
    let v7 = constructor_rv_mul(ctx, v5, v6);
    let v8 = C::ty_bits(ctx, arg0);
    let v9 = C::u8_as_i32(ctx, v8);
    let v10 = C::imm12_const(ctx, v9);
    let v11 = constructor_rv_srli(ctx, v7, v10);
    // Rule at src/isa/riscv64/inst.isle line 2142.
    return v11;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulh(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2148.
        return v3;
    }
    let v4 = constructor_rv_mul(ctx, arg1, arg2);
    let v5 = C::ty_bits(ctx, arg0);
    let v6 = C::u8_as_i32(ctx, v5);
    let v7 = C::imm12_const(ctx, v6);
    let v8 = constructor_rv_srli(ctx, v4, v7);
    // Rule at src/isa/riscv64/inst.isle line 2153.
    return v8;
}

// Generated as internal constructor for term lower_rotl.
pub fn constructor_lower_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rolw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2171.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotl_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2177.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_rol(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2161.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotl_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2167.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotl_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2181.
    return v10;
}

// Generated as internal constructor for term lower_rotl_shift.
pub fn constructor_lower_rotl_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v7 = C::value_regs_get(ctx, v3, 0x1);
    let v8 = C::xreg_new(ctx, v5);
    let v9 = constructor_rv_sll(ctx, arg1, v8);
    let v11 = C::xreg_new(ctx, v7);
    let v12 = constructor_rv_srl(ctx, arg1, v11);
    let v15 = C::xreg_new(ctx, v5);
    let v16 = C::zero_reg(ctx);
    let v17 = C::xreg_new(ctx, v16);
    let v18 = C::zero_reg(ctx);
    let v13 = C::xreg_to_reg(ctx, v12);
    let v19 = C::gen_select_reg(ctx, &IntCC::Equal, v15, v17, v18, v13);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v20 = C::xreg_new(ctx, v10);
    let v21 = C::xreg_new(ctx, v19);
    let v22 = constructor_rv_or(ctx, v20, v21);
    // Rule at src/isa/riscv64/inst.isle line 2190.
    return v22;
}

// Generated as internal constructor for term lower_rotr.
pub fn constructor_lower_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rorw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2220.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotr_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2226.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_ror(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2211.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotr_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2216.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotr_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2230.
    return v10;
}

// Generated as internal constructor for term lower_rotr_shift.
pub fn constructor_lower_rotr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::value_regs_get(ctx, v3, 0x1);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_srl(ctx, arg1, v6);
    let v11 = constructor_rv_sll(ctx, arg1, v9);
    let v13 = C::zero_reg(ctx);
    let v14 = C::xreg_new(ctx, v13);
    let v15 = C::zero_reg(ctx);
    let v16 = C::xreg_to_reg(ctx, v11);
    let v17 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v14, v15, v16);
    let v18 = C::xreg_new(ctx, v17);
    let v19 = constructor_rv_or(ctx, v10, v18);
    // Rule at src/isa/riscv64/inst.isle line 2238.
    return v19;
}

// Generated as internal constructor for term gen_bseti.
pub fn constructor_gen_bseti<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    let v2 = C::has_zbs(ctx);
    match v2 {
        true => {
            let v13 = C::xreg_new(ctx, arg0);
            let v18 = C::u64_as_i32(ctx, arg1);
            let v19 = C::imm12_const(ctx, v18);
            let v20 = constructor_rv_bseti(ctx, v13, v19);
            let v21 = C::xreg_to_reg(ctx, v20);
            // Rule at src/isa/riscv64/inst.isle line 2266.
            return v21;
        }
        false => {
            let v4 = C::u64_le(ctx, arg1, 0xC);
            match v4 {
                true => {
                    let v13 = C::xreg_new(ctx, arg0);
                    let v7 = C::u64_shl(ctx, 0x1, arg1);
                    let v14 = C::u64_as_i32(ctx, v7);
                    let v15 = C::imm12_const(ctx, v14);
                    let v16 = constructor_rv_ori(ctx, v13, v15);
                    let v17 = C::xreg_to_reg(ctx, v16);
                    // Rule at src/isa/riscv64/inst.isle line 2261.
                    return v17;
                }
                false => {
                    let v7 = C::u64_shl(ctx, 0x1, arg1);
                    let v8 = constructor_imm(ctx, I64, v7);
                    let v9 = C::xreg_new(ctx, v8);
                    let v10 = C::xreg_new(ctx, arg0);
                    let v11 = constructor_rv_or(ctx, v10, v9);
                    let v12 = C::xreg_to_reg(ctx, v11);
                    // Rule at src/isa/riscv64/inst.isle line 2255.
                    return v12;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bseti", "src/isa/riscv64/inst.isle line 2254"
    )
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v8 = MInst::Popcnt {
        sum: v5,
        step: v6,
        tmp: v7,
        rs: arg0,
        ty: arg1,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2273.
    return v10;
}

// Generated as internal constructor for term lower_popcnt.
pub fn constructor_lower_popcnt<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::has_zbb(ctx);
    match v2 {
        true => {
            let v4 = constructor_zext(ctx, arg0, arg1, I64);
            let v5 = constructor_rv_cpop(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2282.
            return v5;
        }
        false => {
            let v6 = C::xreg_to_reg(ctx, arg0);
            let v7 = constructor_gen_popcnt(ctx, v6, arg1);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2286.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_popcnt", "src/isa/riscv64/inst.isle line 2281"
    )
}

// Generated as internal constructor for term lower_popcnt_i128.
pub fn constructor_lower_popcnt_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = constructor_lower_popcnt(ctx, v3, I64);
    let v7 = C::value_regs_get(ctx, arg0, 0x1);
    let v8 = C::xreg_new(ctx, v7);
    let v9 = constructor_lower_popcnt(ctx, v8, I64);
    let v10 = constructor_rv_add(ctx, v5, v9);
    let v13 = constructor_imm(ctx, I64, 0x0);
    let v11 = C::xreg_to_reg(ctx, v10);
    let v14 = C::value_regs(ctx, v11, v13);
    // Rule at src/isa/riscv64/inst.isle line 2292.
    return v14;
}

// Generated as internal constructor for term lower_i128_rotl.
pub fn constructor_lower_i128_rotl<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::xreg_new(ctx, v4);
    let v6 = C::gen_shamt(ctx, I128, v5);
    let v7 = C::value_regs_get(ctx, v6, 0x0);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::value_regs_get(ctx, v6, 0x1);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = C::value_regs_get(ctx, arg0, 0x0);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = constructor_rv_sll(ctx, v13, v8);
    let v15 = C::value_regs_get(ctx, arg0, 0x1);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_srl(ctx, v16, v11);
    let v19 = C::zero_reg(ctx);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = C::zero_reg(ctx);
    let v22 = C::xreg_to_reg(ctx, v17);
    let v23 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v20, v21, v22);
    let v24 = C::xreg_new(ctx, v23);
    let v25 = constructor_rv_or(ctx, v14, v24);
    let v26 = C::value_regs_get(ctx, arg0, 0x1);
    let v27 = C::xreg_new(ctx, v26);
    let v28 = constructor_rv_sll(ctx, v27, v8);
    let v29 = C::value_regs_get(ctx, arg0, 0x0);
    let v30 = C::xreg_new(ctx, v29);
    let v31 = constructor_rv_srl(ctx, v30, v11);
    let v32 = C::zero_reg(ctx);
    let v33 = C::xreg_new(ctx, v32);
    let v34 = C::zero_reg(ctx);
    let v35 = C::xreg_to_reg(ctx, v31);
    let v36 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v33, v34, v35);
    let v37 = C::xreg_new(ctx, v36);
    let v38 = constructor_rv_or(ctx, v28, v37);
    let v41 = constructor_imm(ctx, I64, 0x40);
    let v42 = C::xreg_new(ctx, v41);
    let v43 = C::value_regs_get(ctx, arg1, 0x0);
    let v44 = C::xreg_new(ctx, v43);
    let v46 = C::imm12_const(ctx, 0x7F);
    let v47 = constructor_rv_andi(ctx, v44, v46);
    let v49 = C::xreg_to_reg(ctx, v38);
    let v50 = C::xreg_to_reg(ctx, v25);
    let v51 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v47, v42, v49, v50);
    let v52 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v47, v42, v50, v49);
    let v53 = C::value_regs(ctx, v51, v52);
    // Rule at src/isa/riscv64/inst.isle line 2304.
    return v53;
}

// Generated as internal constructor for term lower_i128_rotr.
pub fn constructor_lower_i128_rotr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::xreg_new(ctx, v4);
    let v6 = C::gen_shamt(ctx, I128, v5);
    let v7 = C::value_regs_get(ctx, v6, 0x0);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::value_regs_get(ctx, v6, 0x1);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = C::value_regs_get(ctx, arg0, 0x0);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = constructor_rv_srl(ctx, v13, v8);
    let v15 = C::value_regs_get(ctx, arg0, 0x1);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_sll(ctx, v16, v11);
    let v19 = C::zero_reg(ctx);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = C::zero_reg(ctx);
    let v22 = C::xreg_to_reg(ctx, v17);
    let v23 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v20, v21, v22);
    let v24 = C::xreg_new(ctx, v23);
    let v25 = constructor_rv_or(ctx, v14, v24);
    let v26 = C::value_regs_get(ctx, arg0, 0x1);
    let v27 = C::xreg_new(ctx, v26);
    let v28 = constructor_rv_srl(ctx, v27, v8);
    let v29 = C::value_regs_get(ctx, arg0, 0x0);
    let v30 = C::xreg_new(ctx, v29);
    let v31 = constructor_rv_sll(ctx, v30, v11);
    let v32 = C::zero_reg(ctx);
    let v33 = C::xreg_new(ctx, v32);
    let v34 = C::zero_reg(ctx);
    let v35 = C::xreg_to_reg(ctx, v31);
    let v36 = C::gen_select_reg(ctx, &IntCC::Equal, v8, v33, v34, v35);
    let v37 = C::xreg_new(ctx, v36);
    let v38 = constructor_rv_or(ctx, v28, v37);
    let v41 = constructor_imm(ctx, I64, 0x40);
    let v42 = C::xreg_new(ctx, v41);
    let v43 = C::value_regs_get(ctx, arg1, 0x0);
    let v44 = C::xreg_new(ctx, v43);
    let v46 = C::imm12_const(ctx, 0x7F);
    let v47 = constructor_rv_andi(ctx, v44, v46);
    let v49 = C::xreg_to_reg(ctx, v38);
    let v50 = C::xreg_to_reg(ctx, v25);
    let v51 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v47, v42, v49, v50);
    let v52 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v47, v42, v50, v49);
    let v53 = C::value_regs(ctx, v51, v52);
    // Rule at src/isa/riscv64/inst.isle line 2333.
    return v53;
}

// Generated as internal constructor for term load_op_reg_type.
pub fn constructor_load_op_reg_type<C: Context>(ctx: &mut C, arg0: &LoadOP) -> Type {
    match arg0 {
        &LoadOP::Flw => {
            // Rule at src/isa/riscv64/inst.isle line 2371.
            return F64;
        }
        &LoadOP::Fld => {
            // Rule at src/isa/riscv64/inst.isle line 2370.
            return F64;
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2372.
    return I64;
}

// Generated as internal constructor for term emit_load.
pub fn constructor_emit_load<C: Context>(
    ctx: &mut C,
    arg0: &LoadOP,
    arg1: MemFlags,
    arg2: AMode,
) -> Reg {
    let v3 = constructor_load_op_reg_type(ctx, arg0);
    let v4 = C::temp_writable_reg(ctx, v3);
    let v5 = MInst::Load {
        rd: v4,
        op: arg0.clone(),
        flags: arg1,
        from: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2375.
    return v7;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &LoadOP,
    arg3: MemFlags,
    arg4: Type,
) -> Reg {
    let v6 = C::gen_amode(ctx, arg0, arg1, I64);
    let v7 = constructor_emit_load(ctx, arg2, arg3, v6);
    // Rule at src/isa/riscv64/inst.isle line 2382.
    return v7;
}

// Generated as internal constructor for term gen_load_128.
pub fn constructor_gen_load_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
) -> ValueRegs {
    let v5 = constructor_gen_load(ctx, arg0, arg1, &LoadOP::Ld, arg2, I64);
    let v7 = C::offset32_add(ctx, arg1, 0x8);
    let v8 = constructor_gen_load(ctx, arg0, v7, &LoadOP::Ld, arg2, I64);
    let v9 = C::value_regs(ctx, v5, v8);
    // Rule at src/isa/riscv64/inst.isle line 2386.
    return v9;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &StoreOP,
    arg3: MemFlags,
    arg4: Reg,
) -> InstOutput {
    let v6 = C::gen_amode(ctx, arg0, arg1, I64);
    let v7 = MInst::Store {
        to: v6,
        op: arg2.clone(),
        flags: arg3,
        src: arg4,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst.isle line 2400.
    return v9;
}

// Generated as internal constructor for term gen_store_128.
pub fn constructor_gen_store_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
    arg3: ValueRegs,
) -> InstOutput {
    let v5 = C::gen_amode(ctx, arg0, arg1, I64);
    let v8 = C::value_regs_get(ctx, arg3, 0x0);
    let v11 = C::offset32_add(ctx, arg1, 0x8);
    let v12 = C::gen_amode(ctx, arg0, v11, I64);
    let v14 = C::value_regs_get(ctx, arg3, 0x1);
    let v9 = MInst::Store {
        to: v5,
        op: StoreOP::Sd,
        flags: arg2,
        src: v8,
    };
    let v15 = MInst::Store {
        to: v12,
        op: StoreOP::Sd,
        flags: arg2,
        src: v14,
    };
    let v16 = SideEffectNoResult::Inst2 {
        inst1: v9,
        inst2: v15,
    };
    let v17 = constructor_side_effect(ctx, &v16);
    // Rule at src/isa/riscv64/inst.isle line 2406.
    return v17;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2419.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2428.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2435.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2443.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2451.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2459.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2467.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2476.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2484.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2492.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2431.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2439.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2447.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2455.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2463.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2472.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2480.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2488.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2496.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_atomic_rmw_op", "src/isa/riscv64/inst.isle line 2426"
    )
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2505.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2514.
    return v5;
}

// Generated as internal constructor for term gen_select.
pub fn constructor_gen_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::Select {
        dst: v4.clone(),
        ty: arg0,
        condition: arg1,
        x: arg2,
        y: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2525.
    return v8;
}

// Generated as internal constructor for term gen_int_select.
pub fn constructor_gen_int_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntSelectOP,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::IntSelect {
        op: arg1.clone(),
        dst: v5.clone(),
        x: arg2,
        y: arg3,
        ty: arg0,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2550.
    return v8;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src/isa/riscv64/inst.isle line 2560.
    return v3;
}

// Generated as internal constructor for term int_load_op.
pub fn constructor_int_load_op<C: Context>(ctx: &mut C, arg0: bool, arg1: u8) -> LoadOP {
    match arg1 {
        0x8 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2576.
                    return LoadOP::Lb;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2572.
                    return LoadOP::Lbu;
                }
                _ => {}
            }
        }
        0x10 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2583.
                    return LoadOP::Lh;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2580.
                    return LoadOP::Lhu;
                }
                _ => {}
            }
        }
        0x20 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 2589.
                    return LoadOP::Lw;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 2586.
                    return LoadOP::Lwu;
                }
                _ => {}
            }
        }
        0x40 => {
            // Rule at src/isa/riscv64/inst.isle line 2593.
            return LoadOP::Ld;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_load_op", "src/isa/riscv64/inst.isle line 2570"
    )
}

// Generated as internal constructor for term gen_fcvt_int.
pub fn constructor_gen_fcvt_int<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: FReg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> XReg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v6 = constructor_temp_writable_freg(ctx);
    let v7 = C::writable_freg_to_writable_reg(ctx, v6);
    let v8 = C::freg_to_reg(ctx, arg1);
    let v9 = MInst::FcvtToInt {
        is_sat: arg0,
        rd: v5,
        tmp: v7,
        rs: v8,
        is_signed: arg2,
        in_type: arg3,
        out_type: arg4,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v5);
    let v12 = C::xreg_new(ctx, v11);
    // Rule at src/isa/riscv64/inst.isle line 2606.
    return v12;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: FReg,
    arg2: FReg,
    arg3: Type,
) -> FReg {
    let v4 = constructor_move_f_to_x(ctx, arg1, arg3);
    let v5 = constructor_move_f_to_x(ctx, arg2, arg3);
    let v6 = C::xreg_to_reg(ctx, v4);
    let v7 = C::xreg_to_reg(ctx, v5);
    let v8 = constructor_alu_rrr(ctx, arg0, v6, v7);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_float_int_of_same_size(ctx, arg3);
    let v11 = constructor_move_x_to_f(ctx, v9, v10);
    // Rule at src/isa/riscv64/inst.isle line 2619.
    return v11;
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> Reg {
    let v4 = &C::signed_cond_code(ctx, arg0);
    if let Some(v5) = v4 {
        let v7 = constructor_ext_int_if_need(ctx, true, arg1, arg3);
        let v8 = constructor_ext_int_if_need(ctx, true, arg2, arg3);
        let v9 = constructor_gen_icmp(ctx, arg0, v7, v8, arg3);
        let v10 = C::xreg_to_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 2628.
        return v10;
    }
    let v12 = constructor_ext_int_if_need(ctx, false, arg1, arg3);
    let v13 = constructor_ext_int_if_need(ctx, false, arg2, arg3);
    let v14 = constructor_gen_icmp(ctx, arg0, v12, v13, arg3);
    let v15 = C::xreg_to_reg(ctx, v14);
    // Rule at src/isa/riscv64/inst.isle line 2631.
    return v15;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = C::value_regs_get(ctx, arg1, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_sub(ctx, v4, v6);
    let v8 = C::value_regs_get(ctx, arg0, 0x0);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_sltu(ctx, v9, v7);
    let v12 = C::value_regs_get(ctx, arg0, 0x1);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = C::value_regs_get(ctx, arg1, 0x1);
    let v15 = C::xreg_new(ctx, v14);
    let v16 = constructor_rv_sub(ctx, v13, v15);
    let v17 = constructor_rv_sub(ctx, v16, v10);
    let v18 = C::xreg_to_reg(ctx, v7);
    let v19 = C::xreg_to_reg(ctx, v17);
    let v20 = C::value_regs(ctx, v18, v19);
    // Rule at src/isa/riscv64/inst.isle line 2637.
    return v20;
}

// Generated as internal constructor for term lower_uadd_overflow.
pub fn constructor_lower_uadd_overflow<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
    arg2: Type,
) -> ValueRegs {
    if arg2 == I64 {
        let v3 = constructor_rv_add(ctx, arg0, arg1);
        let v5 = C::xreg_to_reg(ctx, v3);
        let v6 = C::value_reg(ctx, v5);
        let v7 = C::xreg_to_reg(ctx, arg0);
        let v8 = C::value_reg(ctx, v7);
        let v10 = constructor_gen_icmp(ctx, &IntCC::UnsignedLessThan, v6, v8, I64);
        let v11 = C::xreg_to_reg(ctx, v10);
        let v12 = C::value_regs(ctx, v5, v11);
        // Rule at src/isa/riscv64/inst.isle line 2653.
        return v12;
    }
    let v13 = C::fits_in_32(ctx, arg2);
    if let Some(v14) = v13 {
        let v15 = constructor_zext(ctx, arg0, v14, I64);
        let v16 = constructor_zext(ctx, arg1, v14, I64);
        let v17 = constructor_rv_add(ctx, v15, v16);
        let v18 = C::ty_bits(ctx, v14);
        let v19 = C::u8_as_i32(ctx, v18);
        let v20 = C::imm12_const(ctx, v19);
        let v21 = constructor_rv_srli(ctx, v17, v20);
        let v22 = C::xreg_to_reg(ctx, v17);
        let v23 = C::xreg_to_reg(ctx, v21);
        let v24 = C::value_regs(ctx, v22, v23);
        // Rule at src/isa/riscv64/inst.isle line 2660.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_uadd_overflow", "src/isa/riscv64/inst.isle line 2651"
    )
}

// Generated as internal constructor for term gen_jump.
pub fn constructor_gen_jump<C: Context>(ctx: &mut C, arg0: MachLabel) -> MInst {
    let v1 = C::label_to_br_target(ctx, arg0);
    let v2 = MInst::Jal { dest: v1 };
    // Rule at src/isa/riscv64/inst.isle line 2672.
    return v2;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v70,
            arg: v71,
            table: v72,
        } => {
            if let &Opcode::BrTable = v70 {
                let v73 = C::put_in_reg(ctx, v71);
                let v74 = C::lower_br_table(ctx, v73, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2762.
                return Some(v74);
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v13 = C::value_type(ctx, v11);
                if v13 == I128 {
                    let v22 = C::zero_reg(ctx);
                    let v23 = C::zero_reg(ctx);
                    let v24 = C::value_regs(ctx, v22, v23);
                    let v25 = C::put_in_regs(ctx, v11);
                    let v27 = constructor_gen_icmp(ctx, &IntCC::NotEqual, v25, v24, I128);
                    let v28 = C::xreg_to_reg(ctx, v27);
                    let v29 = C::value_reg(ctx, v28);
                    let v31 = C::lower_cond_br(ctx, &IntCC::NotEqual, v29, arg1, I64);
                    // Rule at src/isa/riscv64/inst.isle line 2731.
                    return Some(v31);
                }
                let v32 = C::maybe_uextend(ctx, v11);
                if let Some(v33) = v32 {
                    let v34 = C::def_inst(ctx, v33);
                    if let Some(v35) = v34 {
                        let v36 = &C::inst_data(ctx, v35);
                        match v36 {
                            &InstructionData::FloatCompare {
                                opcode: ref v47,
                                args: ref v48,
                                cond: ref v49,
                            } => {
                                if let &Opcode::Fcmp = v47 {
                                    let v54 = C::floatcc_unordered(ctx, v49);
                                    match v54 {
                                        true => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v55 = C::label_to_br_target(ctx, v6);
                                            let v57 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v58 = C::label_to_br_target(ctx, v57);
                                            let v59 = &C::floatcc_complement(ctx, v49);
                                            let v50 = C::unpack_value_array_2(ctx, v48);
                                            let v60 = constructor_put_in_freg(ctx, v50.0);
                                            let v61 = constructor_put_in_freg(ctx, v50.1);
                                            let v53 = C::value_type(ctx, v50.0);
                                            let v62 =
                                                &constructor_emit_fcmp(ctx, v59, v53, v60, v61);
                                            let v63 = &constructor_cond_br(ctx, v62, v58, v55);
                                            let v64 = constructor_emit_side_effect(ctx, v63);
                                            // Rule at src/isa/riscv64/inst.isle line 2743.
                                            return Some(v64);
                                        }
                                        false => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v55 = C::label_to_br_target(ctx, v6);
                                            let v57 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v58 = C::label_to_br_target(ctx, v57);
                                            let v50 = C::unpack_value_array_2(ctx, v48);
                                            let v65 = constructor_put_in_freg(ctx, v50.0);
                                            let v66 = constructor_put_in_freg(ctx, v50.1);
                                            let v53 = C::value_type(ctx, v50.0);
                                            let v67 =
                                                &constructor_emit_fcmp(ctx, v49, v53, v65, v66);
                                            let v68 = &constructor_cond_br(ctx, v67, v55, v58);
                                            let v69 = constructor_emit_side_effect(ctx, v68);
                                            // Rule at src/isa/riscv64/inst.isle line 2750.
                                            return Some(v69);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v37,
                                args: ref v38,
                                cond: ref v39,
                            } => {
                                if let &Opcode::Icmp = v37 {
                                    let v40 = C::unpack_value_array_2(ctx, v38);
                                    let v44 = C::put_in_regs(ctx, v40.0);
                                    let v45 = C::put_in_regs(ctx, v40.1);
                                    let v43 = C::value_type(ctx, v40.0);
                                    let v46 = C::lower_br_icmp(ctx, v39, v44, v45, arg1, v43);
                                    // Rule at src/isa/riscv64/inst.isle line 2738.
                                    return Some(v46);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v18 = C::put_in_regs(ctx, v11);
                let v20 = constructor_normalize_cmp_value(ctx, v13, v18, &ExtendOp::Zero);
                let v21 = C::lower_cond_br(ctx, &IntCC::NotEqual, v20, arg1, v13);
                // Rule at src/isa/riscv64/inst.isle line 2727.
                return Some(v21);
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v6 = C::vec_label_get(ctx, arg1, 0x0);
                let v7 = &constructor_gen_jump(ctx, v6);
                let v8 = SideEffectNoResult::Inst { inst: v7.clone() };
                let v9 = constructor_emit_side_effect(ctx, &v8);
                // Rule at src/isa/riscv64/inst.isle line 2679.
                return Some(v9);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term normalize_cmp_value.
pub fn constructor_normalize_cmp_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: &ExtendOp,
) -> ValueRegs {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_extend(ctx, arg1, arg2, v2, I64);
        // Rule at src/isa/riscv64/inst.isle line 2702.
        return v6;
    }
    match arg0 {
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 2705.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 2706.
            return arg1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "normalize_cmp_value", "src/isa/riscv64/inst.isle line 2700"
    )
}

// Generated as internal constructor for term normalize_fcvt_from_int.
pub fn constructor_normalize_fcvt_from_int<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: Type,
    arg2: &ExtendOp,
) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::xreg_to_reg(ctx, arg0);
        let v6 = C::value_reg(ctx, v5);
        let v8 = constructor_extend(ctx, v6, arg2, v3, I64);
        let v10 = C::value_regs_get(ctx, v8, 0x0);
        let v11 = C::xreg_new(ctx, v10);
        // Rule at src/isa/riscv64/inst.isle line 2709.
        return v11;
    }
    // Rule at src/isa/riscv64/inst.isle line 2711.
    return arg0;
}

// Generated as internal constructor for term truthy_to_reg.
pub fn constructor_truthy_to_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> XReg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::xreg_new(ctx, v5);
        // Rule at src/isa/riscv64/inst.isle line 2718.
        return v6;
    }
    if arg0 == I128 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::xreg_new(ctx, v5);
        let v8 = C::value_regs_get(ctx, arg1, 0x1);
        let v9 = C::xreg_new(ctx, v8);
        let v10 = constructor_rv_or(ctx, v6, v9);
        // Rule at src/isa/riscv64/inst.isle line 2720.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "truthy_to_reg", "src/isa/riscv64/inst.isle line 2717"
    )
}

// Generated as internal constructor for term gen_bitcast.
pub fn constructor_gen_bitcast<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type, arg2: Type) -> Reg {
    match arg1 {
        I32 => {
            if arg2 == F32 {
                let v8 = C::xreg_new(ctx, arg0);
                let v9 = constructor_rv_fmvwx(ctx, v8);
                let v10 = C::freg_to_reg(ctx, v9);
                // Rule at src/isa/riscv64/inst.isle line 2774.
                return v10;
            }
        }
        I64 => {
            if arg2 == F64 {
                let v8 = C::xreg_new(ctx, arg0);
                let v11 = constructor_rv_fmvdx(ctx, v8);
                let v12 = C::freg_to_reg(ctx, v11);
                // Rule at src/isa/riscv64/inst.isle line 2775.
                return v12;
            }
        }
        F32 => {
            if arg2 == I32 {
                let v3 = C::freg_new(ctx, arg0);
                let v4 = constructor_rv_fmvxw(ctx, v3);
                let v5 = C::xreg_to_reg(ctx, v4);
                // Rule at src/isa/riscv64/inst.isle line 2772.
                return v5;
            }
        }
        F64 => {
            if arg2 == I64 {
                let v3 = C::freg_new(ctx, arg0);
                let v6 = constructor_rv_fmvxd(ctx, v3);
                let v7 = C::xreg_to_reg(ctx, v6);
                // Rule at src/isa/riscv64/inst.isle line 2773.
                return v7;
            }
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2776.
    return arg0;
}

// Generated as internal constructor for term move_f_to_x.
pub fn constructor_move_f_to_x<C: Context>(ctx: &mut C, arg0: FReg, arg1: Type) -> XReg {
    match arg1 {
        F32 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, F32, I32);
            let v6 = C::xreg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2779.
            return v6;
        }
        F64 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, F64, I64);
            let v10 = C::xreg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2780.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_f_to_x", "src/isa/riscv64/inst.isle line 2778"
    )
}

// Generated as internal constructor for term move_x_to_f.
pub fn constructor_move_x_to_f<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> FReg {
    match arg1 {
        I32 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, I32, F32);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2783.
            return v6;
        }
        I64 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, I64, F64);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2784.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_x_to_f", "src/isa/riscv64/inst.isle line 2782"
    )
}

// Generated as internal constructor for term float_int_of_same_size.
pub fn constructor_float_int_of_same_size<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 2787.
            return I32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 2788.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_of_same_size", "src/isa/riscv64/inst.isle line 2786"
    )
}

// Generated as internal constructor for term gen_rev8.
pub fn constructor_gen_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::has_zbb(ctx);
    match v1 {
        true => {
            let v2 = constructor_rv_rev8(ctx, arg0);
            // Rule at src/isa/riscv64/inst.isle line 2792.
            return v2;
        }
        false => {
            let v3 = constructor_temp_writable_xreg(ctx);
            let v4 = constructor_temp_writable_xreg(ctx);
            let v5 = constructor_temp_writable_xreg(ctx);
            let v6 = C::xreg_to_reg(ctx, arg0);
            let v7 = C::writable_xreg_to_writable_reg(ctx, v5);
            let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
            let v9 = C::writable_xreg_to_writable_reg(ctx, v3);
            let v10 = MInst::Rev8 {
                rs: v6,
                step: v7,
                tmp: v8,
                rd: v9,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            let v13 = C::xreg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2798.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_rev8", "src/isa/riscv64/inst.isle line 2791"
    )
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        true => {
            let v3 = C::xreg_new(ctx, arg0);
            let v4 = constructor_rv_brev8(ctx, v3);
            let v5 = C::xreg_to_reg(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2809.
            return v5;
        }
        false => {
            let v6 = constructor_temp_writable_xreg(ctx);
            let v7 = constructor_temp_writable_xreg(ctx);
            let v8 = constructor_temp_writable_xreg(ctx);
            let v9 = constructor_temp_writable_xreg(ctx);
            let v10 = C::writable_xreg_to_writable_reg(ctx, v8);
            let v11 = C::writable_xreg_to_writable_reg(ctx, v6);
            let v12 = C::writable_xreg_to_writable_reg(ctx, v7);
            let v13 = C::writable_xreg_to_writable_reg(ctx, v9);
            let v14 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v10,
                tmp: v11,
                tmp2: v12,
                rd: v13,
            };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2814.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_brev8", "src/isa/riscv64/inst.isle line 2808"
    )
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    if arg0 == I128 {
        let v12 = constructor_value_regs_zero(ctx);
        let v13 = constructor_i128_sub(ctx, v12, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2831.
        return v13;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::value_regs_get(ctx, arg1, 0x0);
            let v8 = C::xreg_new(ctx, v7);
            let v9 = constructor_rv_neg(ctx, v8);
            let v10 = C::xreg_to_reg(ctx, v9);
            let v11 = C::value_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2827.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg", "src/isa/riscv64/inst.isle line 2826"
    )
}

// Generated as internal constructor for term max.
pub fn constructor_max<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::has_zbb(ctx);
            match v7 {
                true => {
                    let v8 = constructor_rv_max(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2837.
                    return v8;
                }
                false => {
                    let v10 = C::xreg_to_reg(ctx, arg1);
                    let v11 = C::xreg_to_reg(ctx, arg2);
                    let v12 =
                        C::gen_select_reg(ctx, &IntCC::SignedGreaterThan, arg1, arg2, v10, v11);
                    let v13 = C::xreg_new(ctx, v12);
                    // Rule at src/isa/riscv64/inst.isle line 2841.
                    return v13;
                }
                _ => {}
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max", "src/isa/riscv64/inst.isle line 2836"
    )
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = MInst::TrapIf {
        test: v2,
        trap_code: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2848.
    return v5;
}

// Generated as internal constructor for term gen_trapifc.
pub fn constructor_gen_trapifc<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: XReg,
    arg2: XReg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = C::xreg_to_reg(ctx, arg2);
    let v6 = MInst::TrapIfC {
        rs1: v4,
        rs2: v5,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    let v8 = constructor_side_effect(ctx, &v7);
    // Rule at src/isa/riscv64/inst.isle line 2853.
    return v8;
}

// Generated as internal constructor for term gen_div_overflow.
pub fn constructor_gen_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: XReg,
    arg1: XReg,
    arg2: Type,
) -> InstOutput {
    let v5 = C::i64_as_u64(ctx, -0x1);
    let v6 = constructor_imm(ctx, I64, v5);
    let v7 = C::xreg_new(ctx, v6);
    let v9 = constructor_imm(ctx, I64, 0x1);
    let v10 = C::xreg_new(ctx, v9);
    let v12 = C::imm12_const(ctx, 0x3F);
    let v13 = constructor_rv_slli(ctx, v10, v12);
    let v14 = C::shift_int_to_most_significant(ctx, arg0, arg2);
    let v16 = C::xreg_to_reg(ctx, v7);
    let v17 = C::value_reg(ctx, v16);
    let v18 = C::xreg_to_reg(ctx, arg1);
    let v19 = C::value_reg(ctx, v18);
    let v20 = constructor_gen_icmp(ctx, &IntCC::Equal, v17, v19, arg2);
    let v21 = C::xreg_to_reg(ctx, v13);
    let v22 = C::value_reg(ctx, v21);
    let v23 = C::xreg_to_reg(ctx, v14);
    let v24 = C::value_reg(ctx, v23);
    let v25 = constructor_gen_icmp(ctx, &IntCC::Equal, v22, v24, arg2);
    let v26 = constructor_rv_and(ctx, v20, v25);
    let v28 = constructor_gen_trapif(ctx, v26, &TrapCode::IntegerOverflow);
    // Rule at src/isa/riscv64/inst.isle line 2862.
    return v28;
}

// Generated as internal constructor for term gen_div_by_zero.
pub fn constructor_gen_div_by_zero<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = constructor_gen_trapifc(
        ctx,
        &IntCC::Equal,
        v3,
        arg0,
        &TrapCode::IntegerDivisionByZero,
    );
    // Rule at src/isa/riscv64/inst.isle line 2874.
    return v5;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg, arg2: XReg) -> XReg {
    let v3 = constructor_rv_mul(ctx, arg0, arg1);
    let v4 = constructor_rv_add(ctx, v3, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2888.
    return v4;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        if arg1 == I128 {
            let v30 = constructor_lower_bmask(ctx, I64, I128, arg2);
            let v31 = C::value_regs_get(ctx, v30, 0x0);
            let v32 = C::value_regs_get(ctx, v30, 0x0);
            let v33 = C::value_regs(ctx, v31, v32);
            // Rule at src/isa/riscv64/inst.isle line 2929.
            return v33;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v25 = constructor_lower_bmask(ctx, I64, v5, arg2);
            let v26 = C::value_regs_get(ctx, v25, 0x0);
            let v27 = C::value_regs_get(ctx, v25, 0x0);
            let v28 = C::value_regs(ctx, v26, v27);
            // Rule at src/isa/riscv64/inst.isle line 2920.
            return v28;
        }
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v15 = C::value_regs_get(ctx, arg2, 0x0);
            let v16 = C::xreg_new(ctx, v15);
            let v18 = C::value_regs_get(ctx, arg2, 0x1);
            let v19 = C::xreg_new(ctx, v18);
            let v20 = constructor_rv_or(ctx, v16, v19);
            let v22 = C::xreg_to_reg(ctx, v20);
            let v23 = C::value_reg(ctx, v22);
            let v24 = constructor_lower_bmask(ctx, v2, I64, v23);
            // Rule at src/isa/riscv64/inst.isle line 2910.
            return v24;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_normalize_cmp_value(ctx, v5, arg2, &ExtendOp::Zero);
            let v9 = constructor_truthy_to_reg(ctx, v5, v8);
            let v10 = constructor_rv_snez(ctx, v9);
            let v11 = constructor_rv_neg(ctx, v10);
            let v12 = C::xreg_to_reg(ctx, v11);
            let v13 = C::value_reg(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2901.
            return v13;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/riscv64/inst.isle line 2895"
    )
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_xreg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 2940.
    return v5;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v2 = constructor_imm(ctx, I64, 0x0);
    let v3 = constructor_imm(ctx, I64, 0x0);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/riscv64/inst.isle line 2956.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm_from_bits(ctx, 0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2966.
    return v3;
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> XReg {
    let v2 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2969.
    return v2;
}

// Generated as internal constructor for term ordered.
pub fn constructor_ordered<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_is_not_nan(ctx, arg0, arg1);
    let v4 = constructor_is_not_nan(ctx, arg0, arg2);
    let v5 = constructor_rv_and(ctx, v3, v4);
    // Rule at src/isa/riscv64/inst.isle line 2972.
    return v5;
}

// Generated as internal constructor for term cmp_result.
pub fn constructor_cmp_result<C: Context>(ctx: &mut C, arg0: XReg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: false,
    };
    // Rule at src/isa/riscv64/inst.isle line 2982.
    return v2;
}

// Generated as internal constructor for term cmp_result_invert.
pub fn constructor_cmp_result_invert<C: Context>(ctx: &mut C, arg0: XReg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: true,
    };
    // Rule at src/isa/riscv64/inst.isle line 2987.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
    arg1: BranchTarget,
    arg2: BranchTarget,
) -> SideEffectNoResult {
    let v3 = constructor_cmp_integer_compare(ctx, arg0);
    let v4 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: v3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/riscv64/inst.isle line 2991.
    return v5;
}

// Generated as internal constructor for term cmp_integer_compare.
pub fn constructor_cmp_integer_compare<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
) -> IntegerCompare {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v4 = C::zero_reg(ctx);
                let v5 = C::xreg_new(ctx, v4);
                let v8 = C::int_compare(ctx, &IntCC::Equal, v1, v5);
                // Rule at src/isa/riscv64/inst.isle line 3007.
                return v8;
            }
            false => {
                let v4 = C::zero_reg(ctx);
                let v5 = C::xreg_new(ctx, v4);
                let v6 = C::int_compare(ctx, &IntCC::NotEqual, v1, v5);
                // Rule at src/isa/riscv64/inst.isle line 3003.
                return v6;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_integer_compare", "src/isa/riscv64/inst.isle line 3000"
    )
}

// Generated as internal constructor for term cmp_value.
pub fn constructor_cmp_value<C: Context>(ctx: &mut C, arg0: &CmpResult) -> XReg {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v3 = constructor_not(ctx, v1);
                // Rule at src/isa/riscv64/inst.isle line 3013.
                return v3;
            }
            false => {
                // Rule at src/isa/riscv64/inst.isle line 3012.
                return v1;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_value", "src/isa/riscv64/inst.isle line 3011"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: FReg,
    arg3: FReg,
) -> CmpResult {
    match arg0 {
        &FloatCC::Equal => {
            let v7 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v8 = &constructor_cmp_result(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 3031.
            return v8.clone();
        }
        &FloatCC::GreaterThan => {
            let v21 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v22 = &constructor_cmp_result(ctx, v21);
            // Rule at src/isa/riscv64/inst.isle line 3062.
            return v22.clone();
        }
        &FloatCC::GreaterThanOrEqual => {
            let v23 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v24 = &constructor_cmp_result(ctx, v23);
            // Rule at src/isa/riscv64/inst.isle line 3067.
            return v24.clone();
        }
        &FloatCC::LessThan => {
            let v10 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v18 = &constructor_cmp_result(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 3052.
            return v18.clone();
        }
        &FloatCC::LessThanOrEqual => {
            let v19 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v20 = &constructor_cmp_result(ctx, v19);
            // Rule at src/isa/riscv64/inst.isle line 3057.
            return v20.clone();
        }
        &FloatCC::NotEqual => {
            let v7 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v9 = &constructor_cmp_result_invert(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 3037.
            return v9.clone();
        }
        &FloatCC::Ordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v5 = &constructor_cmp_result(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 3020.
            return v5.clone();
        }
        &FloatCC::OrderedNotEqual => {
            let v10 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v11 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v12 = constructor_rv_or(ctx, v10, v11);
            let v13 = &constructor_cmp_result(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 3042.
            return v13.clone();
        }
        &FloatCC::Unordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v6 = &constructor_cmp_result_invert(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 3026.
            return v6.clone();
        }
        &FloatCC::UnorderedOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v14 = constructor_not(ctx, v4);
            let v15 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v16 = constructor_rv_or(ctx, v14, v15);
            let v17 = &constructor_cmp_result(ctx, v16);
            // Rule at src/isa/riscv64/inst.isle line 3047.
            return v17.clone();
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v30 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v31 = constructor_rv_and(ctx, v4, v30);
            let v32 = &constructor_cmp_result_invert(ctx, v31);
            // Rule at src/isa/riscv64/inst.isle line 3085.
            return v32.clone();
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v33 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v34 = constructor_rv_and(ctx, v4, v33);
            let v35 = &constructor_cmp_result_invert(ctx, v34);
            // Rule at src/isa/riscv64/inst.isle line 3091.
            return v35.clone();
        }
        &FloatCC::UnorderedOrLessThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v25 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v26 = constructor_rv_and(ctx, v4, v25);
            let v27 = &constructor_cmp_result_invert(ctx, v26);
            // Rule at src/isa/riscv64/inst.isle line 3073.
            return v27.clone();
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v11 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v28 = constructor_rv_and(ctx, v4, v11);
            let v29 = &constructor_cmp_result_invert(ctx, v28);
            // Rule at src/isa/riscv64/inst.isle line 3079.
            return v29.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/riscv64/inst.isle line 3016"
    )
}

// Generated as internal constructor for term masked.
pub fn constructor_masked<C: Context>(ctx: &mut C, arg0: VReg) -> VecOpMasking {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = VecOpMasking::Enabled { reg: v1 };
    // Rule at src/isa/riscv64/inst_vector.isle line 85.
    return v2;
}

// Generated as internal constructor for term unmasked.
pub fn constructor_unmasked<C: Context>(ctx: &mut C) -> VecOpMasking {
    // Rule at src/isa/riscv64/inst_vector.isle line 88.
    return VecOpMasking::Disabled;
}

// Generated as internal constructor for term element_width_from_type.
pub fn constructor_element_width_from_type<C: Context>(ctx: &mut C, arg0: Type) -> VecElementWidth {
    let v1 = C::lane_type(ctx, arg0);
    match v1 {
        I8 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 330.
            return VecElementWidth::E8;
        }
        I16 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 333.
            return VecElementWidth::E16;
        }
        I32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 336.
            return VecElementWidth::E32;
        }
        I64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 342.
            return VecElementWidth::E64;
        }
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 339.
            return VecElementWidth::E32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 345.
            return VecElementWidth::E64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "element_width_from_type", "src/isa/riscv64/inst_vector.isle line 329"
    )
}

// Generated as internal constructor for term vec_alu_rrrr.
pub fn constructor_vec_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRR,
    arg1: VReg,
    arg2: VReg,
    arg3: Reg,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRR {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        vs1: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 368.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_imm5.
pub fn constructor_vec_alu_rrr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: Imm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRImm5 {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        imm: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 376.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_uimm5.
pub fn constructor_vec_alu_rrr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: UImm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = C::uimm5_bitcast_to_imm5(ctx, arg3);
    let v7 = constructor_vec_alu_rrr_imm5(ctx, arg0, arg1, arg2, v6, arg4, arg5);
    // Rule at src/isa/riscv64/inst_vector.isle line 384.
    return v7;
}

// Generated as internal constructor for term vec_alu_rrr.
pub fn constructor_vec_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRR {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        vs1: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 389.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_imm5.
pub fn constructor_vec_alu_rr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: Imm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRImm5 {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        imm: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 396.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_uimm5.
pub fn constructor_vec_alu_rr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = C::uimm5_bitcast_to_imm5(ctx, arg2);
    let v6 = constructor_vec_alu_rr_imm5(ctx, arg0, arg1, v5, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 404.
    return v6;
}

// Generated as internal constructor for term vec_alu_rr.
pub fn constructor_vec_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRR,
    arg1: Reg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = C::vec_alu_rr_dst_type(ctx, arg0);
    let v5 = C::temp_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRR {
        op: arg0.clone(),
        vd: v5,
        vs: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 410.
    return v8;
}

// Generated as internal constructor for term vec_alu_r_imm5.
pub fn constructor_vec_alu_r_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRImm5,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = constructor_temp_writable_vreg(ctx);
    let v5 = C::writable_vreg_to_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRImm5 {
        op: arg0.clone(),
        vd: v5,
        imm: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_vreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 417.
    return v8;
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: MemFlags,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecLoad {
        eew: arg0.clone(),
        to: v6,
        from: arg1.clone(),
        flags: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 424.
    return v9;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: VReg,
    arg3: MemFlags,
    arg4: &VecOpMasking,
    arg5: VState,
) -> InstOutput {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = MInst::VecStore {
        eew: arg0.clone(),
        to: arg1.clone(),
        from: v6,
        flags: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 431.
    return v9;
}

// Generated as internal constructor for term rv_vadd_vv.
pub fn constructor_rv_vadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 437.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vx.
pub fn constructor_rv_vadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 442.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vi.
pub fn constructor_rv_vadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 447.
    return v7;
}

// Generated as internal constructor for term rv_vsadd_vv.
pub fn constructor_rv_vsadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 452.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vx.
pub fn constructor_rv_vsadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 457.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vi.
pub fn constructor_rv_vsadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 462.
    return v7;
}

// Generated as internal constructor for term rv_vsaddu_vv.
pub fn constructor_rv_vsaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 467.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vx.
pub fn constructor_rv_vsaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 472.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vi.
pub fn constructor_rv_vsaddu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsadduVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 477.
    return v7;
}

// Generated as internal constructor for term rv_vwadd_vv.
pub fn constructor_rv_vwadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 484.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_vx.
pub fn constructor_rv_vwadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 491.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wv.
pub fn constructor_rv_vwadd_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 498.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wx.
pub fn constructor_rv_vwadd_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 505.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vv.
pub fn constructor_rv_vwaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 512.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vx.
pub fn constructor_rv_vwaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 519.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wv.
pub fn constructor_rv_vwaddu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 526.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wx.
pub fn constructor_rv_vwaddu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 533.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vv.
pub fn constructor_rv_vsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 538.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vx.
pub fn constructor_rv_vsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 543.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vx.
pub fn constructor_rv_vrsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 548.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vv.
pub fn constructor_rv_vwsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 555.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vx.
pub fn constructor_rv_vwsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 562.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wv.
pub fn constructor_rv_vwsub_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 569.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wx.
pub fn constructor_rv_vwsub_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 576.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vv.
pub fn constructor_rv_vwsubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 583.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vx.
pub fn constructor_rv_vwsubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 590.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wv.
pub fn constructor_rv_vwsubu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 597.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wx.
pub fn constructor_rv_vwsubu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 604.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vv.
pub fn constructor_rv_vssub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 609.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vx.
pub fn constructor_rv_vssub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 614.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vv.
pub fn constructor_rv_vssubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 619.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vx.
pub fn constructor_rv_vssubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 624.
    return v8;
}

// Generated as internal constructor for term rv_vneg_v.
pub fn constructor_rv_vneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v5 = C::zero_reg(ctx);
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v4, v5, arg1, arg2);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 629.
    return v7;
}

// Generated as internal constructor for term rv_vrsub_vi.
pub fn constructor_rv_vrsub_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VrsubVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 634.
    return v7;
}

// Generated as internal constructor for term rv_vmul_vv.
pub fn constructor_rv_vmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 639.
    return v8;
}

// Generated as internal constructor for term rv_vmul_vx.
pub fn constructor_rv_vmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 644.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vv.
pub fn constructor_rv_vmulh_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 649.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vx.
pub fn constructor_rv_vmulh_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 654.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vv.
pub fn constructor_rv_vmulhu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 659.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vx.
pub fn constructor_rv_vmulhu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 664.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vv.
pub fn constructor_rv_vsmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 672.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vx.
pub fn constructor_rv_vsmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 680.
    return v8;
}

// Generated as internal constructor for term rv_vmacc_vv.
pub fn constructor_rv_vmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 688.
    return v7;
}

// Generated as internal constructor for term rv_vmacc_vx.
pub fn constructor_rv_vmacc_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 696.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vv.
pub fn constructor_rv_vnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 704.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vx.
pub fn constructor_rv_vnmsac_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 712.
    return v7;
}

// Generated as internal constructor for term rv_vsll_vv.
pub fn constructor_rv_vsll_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 717.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vx.
pub fn constructor_rv_vsll_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 722.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vi.
pub fn constructor_rv_vsll_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsllVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 727.
    return v7;
}

// Generated as internal constructor for term rv_vsrl_vv.
pub fn constructor_rv_vsrl_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 732.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vx.
pub fn constructor_rv_vsrl_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 737.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vi.
pub fn constructor_rv_vsrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 742.
    return v7;
}

// Generated as internal constructor for term rv_vsra_vv.
pub fn constructor_rv_vsra_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 747.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vx.
pub fn constructor_rv_vsra_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 752.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vi.
pub fn constructor_rv_vsra_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsraVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 757.
    return v7;
}

// Generated as internal constructor for term rv_vand_vv.
pub fn constructor_rv_vand_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 762.
    return v8;
}

// Generated as internal constructor for term rv_vand_vx.
pub fn constructor_rv_vand_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 767.
    return v8;
}

// Generated as internal constructor for term rv_vand_vi.
pub fn constructor_rv_vand_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VandVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 772.
    return v7;
}

// Generated as internal constructor for term rv_vor_vv.
pub fn constructor_rv_vor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 777.
    return v8;
}

// Generated as internal constructor for term rv_vor_vx.
pub fn constructor_rv_vor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 782.
    return v8;
}

// Generated as internal constructor for term rv_vor_vi.
pub fn constructor_rv_vor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 787.
    return v7;
}

// Generated as internal constructor for term rv_vxor_vv.
pub fn constructor_rv_vxor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 792.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vx.
pub fn constructor_rv_vxor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 797.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vi.
pub fn constructor_rv_vxor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VxorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 802.
    return v7;
}

// Generated as internal constructor for term rv_vssrl_vi.
pub fn constructor_rv_vssrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VssrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 811.
    return v7;
}

// Generated as internal constructor for term rv_vnot_v.
pub fn constructor_rv_vnot_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::i8_to_imm5(ctx, -0x1);
    if let Some(v5) = v4 {
        let v6 = constructor_rv_vxor_vi(ctx, arg0, v5, arg1, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 817.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_vnot_v", "src/isa/riscv64/inst_vector.isle line 816"
    )
}

// Generated as internal constructor for term rv_vmax_vv.
pub fn constructor_rv_vmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 823.
    return v8;
}

// Generated as internal constructor for term rv_vmax_vx.
pub fn constructor_rv_vmax_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 828.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vv.
pub fn constructor_rv_vmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 833.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vx.
pub fn constructor_rv_vmin_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 838.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vv.
pub fn constructor_rv_vmaxu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 843.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vx.
pub fn constructor_rv_vmaxu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 848.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vv.
pub fn constructor_rv_vminu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 853.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vx.
pub fn constructor_rv_vminu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 858.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vv.
pub fn constructor_rv_vfadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 863.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vf.
pub fn constructor_rv_vfadd_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 868.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vv.
pub fn constructor_rv_vfsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 873.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vf.
pub fn constructor_rv_vfsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 878.
    return v8;
}

// Generated as internal constructor for term rv_vfrsub_vf.
pub fn constructor_rv_vfrsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 883.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vv.
pub fn constructor_rv_vfmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 888.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vf.
pub fn constructor_rv_vfmul_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 893.
    return v8;
}

// Generated as internal constructor for term rv_vfmacc_vv.
pub fn constructor_rv_vfmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 901.
    return v7;
}

// Generated as internal constructor for term rv_vfmacc_vf.
pub fn constructor_rv_vfmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 909.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vv.
pub fn constructor_rv_vfnmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 917.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vf.
pub fn constructor_rv_vfnmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 925.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vv.
pub fn constructor_rv_vfmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 933.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vf.
pub fn constructor_rv_vfmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 941.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vv.
pub fn constructor_rv_vfnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 949.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vf.
pub fn constructor_rv_vfnmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 957.
    return v7;
}

// Generated as internal constructor for term rv_vfdiv_vv.
pub fn constructor_rv_vfdiv_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 962.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vf.
pub fn constructor_rv_vfdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 967.
    return v8;
}

// Generated as internal constructor for term rv_vfrdiv_vf.
pub fn constructor_rv_vfrdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 972.
    return v8;
}

// Generated as internal constructor for term rv_vfmin_vv.
pub fn constructor_rv_vfmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 977.
    return v8;
}

// Generated as internal constructor for term rv_vfmax_vv.
pub fn constructor_rv_vfmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 982.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vv.
pub fn constructor_rv_vfsgnj_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 988.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vf.
pub fn constructor_rv_vfsgnj_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 993.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnjn_vv.
pub fn constructor_rv_vfsgnjn_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjnVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 999.
    return v8;
}

// Generated as internal constructor for term rv_vfneg_v.
pub fn constructor_rv_vfneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjn_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 1005.
    return v3;
}

// Generated as internal constructor for term rv_vfsgnjx_vv.
pub fn constructor_rv_vfsgnjx_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1011.
    return v8;
}

// Generated as internal constructor for term rv_vfabs_v.
pub fn constructor_rv_vfabs_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjx_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 1017.
    return v3;
}

// Generated as internal constructor for term rv_vfsqrt_v.
pub fn constructor_rv_vfsqrt_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfsqrtV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1022.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_xu_f_v.
pub fn constructor_rv_vfcvt_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1028.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_x_f_v.
pub fn constructor_rv_vfcvt_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1034.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_xu_f_v.
pub fn constructor_rv_vfcvt_rtz_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1042.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_x_f_v.
pub fn constructor_rv_vfcvt_rtz_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1050.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_xu_v.
pub fn constructor_rv_vfcvt_f_xu_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxuV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1056.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_x_v.
pub fn constructor_rv_vfcvt_f_x_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1062.
    return v6;
}

// Generated as internal constructor for term rv_vfwcvt_f_f_v.
pub fn constructor_rv_vfwcvt_f_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfwcvtffV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1068.
    return v6;
}

// Generated as internal constructor for term rv_vfncvt_f_f_w.
pub fn constructor_rv_vfncvt_f_f_w<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfncvtffW, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1074.
    return v6;
}

// Generated as internal constructor for term rv_vslidedown_vx.
pub fn constructor_rv_vslidedown_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VslidedownVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1081.
    return v8;
}

// Generated as internal constructor for term rv_vslidedown_vi.
pub fn constructor_rv_vslidedown_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VslidedownVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1087.
    return v7;
}

// Generated as internal constructor for term rv_vslideup_vvi.
pub fn constructor_rv_vslideup_vvi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = constructor_vec_alu_rrr_uimm5(
        ctx,
        &VecAluOpRRRImm5::VslideupVI,
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
    );
    // Rule at src/isa/riscv64/inst_vector.isle line 1095.
    return v6;
}

// Generated as internal constructor for term rv_vmv_xs.
pub fn constructor_rv_vmv_xs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> XReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvXS, v3, v4, arg1);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1102.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_fs.
pub fn constructor_rv_vfmv_fs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> FReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvFS, v3, v4, arg1);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1109.
    return v6;
}

// Generated as internal constructor for term rv_vmv_sx.
pub fn constructor_rv_vmv_sx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvSX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1116.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_sf.
pub fn constructor_rv_vfmv_sf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvSF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1123.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vx.
pub fn constructor_rv_vmv_vx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvVX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1130.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_vf.
pub fn constructor_rv_vfmv_vf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvVF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1137.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vi.
pub fn constructor_rv_vmv_vi<C: Context>(ctx: &mut C, arg0: Imm5, arg1: VState) -> VReg {
    let v3 = &constructor_unmasked(ctx);
    let v4 = constructor_vec_alu_r_imm5(ctx, &VecAluOpRImm5::VmvVI, arg0, v3, arg1);
    let v5 = C::vreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1144.
    return v5;
}

// Generated as internal constructor for term rv_vmerge_vvm.
pub fn constructor_rv_vmerge_vvm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVVM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1154.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vxm.
pub fn constructor_rv_vmerge_vxm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVXM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1163.
    return v9;
}

// Generated as internal constructor for term rv_vfmerge_vfm.
pub fn constructor_rv_vfmerge_vfm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmergeVFM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1172.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vim.
pub fn constructor_rv_vmerge_vim<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = &constructor_masked(ctx, arg2);
    let v7 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmergeVIM, v5, arg1, v6, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1181.
    return v8;
}

// Generated as internal constructor for term rv_vredminu_vs.
pub fn constructor_rv_vredminu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredminuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1189.
    return v8;
}

// Generated as internal constructor for term rv_vredmaxu_vs.
pub fn constructor_rv_vredmaxu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredmaxuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1196.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vv.
pub fn constructor_rv_vrgather_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1203.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vx.
pub fn constructor_rv_vrgather_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1210.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vi.
pub fn constructor_rv_vrgather_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VrgatherVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1215.
    return v7;
}

// Generated as internal constructor for term rv_vcompress_vm.
pub fn constructor_rv_vcompress_vm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VcompressVM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1226.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vv.
pub fn constructor_rv_vmseq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1231.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vx.
pub fn constructor_rv_vmseq_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1236.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vi.
pub fn constructor_rv_vmseq_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmseqVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1241.
    return v7;
}

// Generated as internal constructor for term rv_vmsne_vv.
pub fn constructor_rv_vmsne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1246.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vx.
pub fn constructor_rv_vmsne_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1251.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vi.
pub fn constructor_rv_vmsne_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsneVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1256.
    return v7;
}

// Generated as internal constructor for term rv_vmsltu_vv.
pub fn constructor_rv_vmsltu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1261.
    return v8;
}

// Generated as internal constructor for term rv_vmsltu_vx.
pub fn constructor_rv_vmsltu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1266.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vv.
pub fn constructor_rv_vmslt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1271.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vx.
pub fn constructor_rv_vmslt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1276.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vv.
pub fn constructor_rv_vmsleu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1281.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vx.
pub fn constructor_rv_vmsleu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1286.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vi.
pub fn constructor_rv_vmsleu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1291.
    return v7;
}

// Generated as internal constructor for term rv_vmsle_vv.
pub fn constructor_rv_vmsle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1296.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vx.
pub fn constructor_rv_vmsle_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1301.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vi.
pub fn constructor_rv_vmsle_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1306.
    return v7;
}

// Generated as internal constructor for term rv_vmsgtu_vv.
pub fn constructor_rv_vmsgtu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsltu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1312.
    return v4;
}

// Generated as internal constructor for term rv_vmsgtu_vx.
pub fn constructor_rv_vmsgtu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1316.
    return v8;
}

// Generated as internal constructor for term rv_vmsgtu_vi.
pub fn constructor_rv_vmsgtu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1321.
    return v7;
}

// Generated as internal constructor for term rv_vmsgt_vv.
pub fn constructor_rv_vmsgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmslt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1327.
    return v4;
}

// Generated as internal constructor for term rv_vmsgt_vx.
pub fn constructor_rv_vmsgt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1331.
    return v8;
}

// Generated as internal constructor for term rv_vmsgt_vi.
pub fn constructor_rv_vmsgt_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1336.
    return v7;
}

// Generated as internal constructor for term rv_vmsgeu_vv.
pub fn constructor_rv_vmsgeu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsleu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1342.
    return v4;
}

// Generated as internal constructor for term rv_vmsge_vv.
pub fn constructor_rv_vmsge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1347.
    return v4;
}

// Generated as internal constructor for term rv_vmfeq_vv.
pub fn constructor_rv_vmfeq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1351.
    return v8;
}

// Generated as internal constructor for term rv_vmfeq_vf.
pub fn constructor_rv_vmfeq_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1356.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vv.
pub fn constructor_rv_vmfne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1361.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vf.
pub fn constructor_rv_vmfne_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1366.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vv.
pub fn constructor_rv_vmflt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1371.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vf.
pub fn constructor_rv_vmflt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1376.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vv.
pub fn constructor_rv_vmfle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1381.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vf.
pub fn constructor_rv_vmfle_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1386.
    return v8;
}

// Generated as internal constructor for term rv_vmfgt_vv.
pub fn constructor_rv_vmfgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmflt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1392.
    return v4;
}

// Generated as internal constructor for term rv_vmfgt_vf.
pub fn constructor_rv_vmfgt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgtVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1396.
    return v8;
}

// Generated as internal constructor for term rv_vmfge_vv.
pub fn constructor_rv_vmfge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmfle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1402.
    return v4;
}

// Generated as internal constructor for term rv_vmfge_vf.
pub fn constructor_rv_vmfge_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgeVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1406.
    return v8;
}

// Generated as internal constructor for term rv_vzext_vf2.
pub fn constructor_rv_vzext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1412.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf4.
pub fn constructor_rv_vzext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1418.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf8.
pub fn constructor_rv_vzext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1424.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf2.
pub fn constructor_rv_vsext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1430.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf4.
pub fn constructor_rv_vsext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1436.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf8.
pub fn constructor_rv_vsext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1442.
    return v6;
}

// Generated as internal constructor for term rv_vnclip_wi.
pub fn constructor_rv_vnclip_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1449.
    return v7;
}

// Generated as internal constructor for term rv_vnclipu_wi.
pub fn constructor_rv_vnclipu_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipuWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1456.
    return v7;
}

// Generated as internal constructor for term rv_vmand_mm.
pub fn constructor_rv_vmand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1463.
    return v8;
}

// Generated as internal constructor for term rv_vmor_mm.
pub fn constructor_rv_vmor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1470.
    return v8;
}

// Generated as internal constructor for term rv_vmnand_mm.
pub fn constructor_rv_vmnand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1477.
    return v8;
}

// Generated as internal constructor for term rv_vmnot_m.
pub fn constructor_rv_vmnot_m<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> VReg {
    let v2 = constructor_rv_vmnand_mm(ctx, arg0, arg0, arg1);
    // Rule at src/isa/riscv64/inst_vector.isle line 1485.
    return v2;
}

// Generated as internal constructor for term rv_vmnor_mm.
pub fn constructor_rv_vmnor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1491.
    return v8;
}

// Generated as internal constructor for term gen_extractlane.
pub fn constructor_gen_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        if arg2 == 0x0 {
            let v5 = C::ty_vector_float(ctx, v2);
            if let Some(v6) = v5 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v8 = constructor_rv_vfmv_fs(ctx, arg1, v7);
                let v9 = C::freg_to_reg(ctx, v8);
                // Rule at src/isa/riscv64/inst_vector.isle line 1499.
                return v9;
            }
            let v10 = C::ty_vector_not_float(ctx, v2);
            if let Some(v11) = v10 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vmv_xs(ctx, arg1, v7);
                let v13 = C::xreg_to_reg(ctx, v12);
                // Rule at src/isa/riscv64/inst_vector.isle line 1504.
                return v13;
            }
        }
        let v14 = C::uimm5_from_u8(ctx, arg2);
        if let Some(v15) = v14 {
            let v16 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, v2);
            let v17 = constructor_rv_vslidedown_vi(ctx, arg1, v15, v16, v7);
            let v19 = constructor_gen_extractlane(ctx, v2, v17, 0x0);
            // Rule at src/isa/riscv64/inst_vector.isle line 1511.
            return v19;
        }
        let v21 = C::u8_as_u64(ctx, arg2);
        let v22 = constructor_imm(ctx, I64, v21);
        let v23 = C::xreg_new(ctx, v22);
        let v16 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v2);
        let v24 = constructor_rv_vslidedown_vx(ctx, arg1, v23, v16, v7);
        let v25 = constructor_gen_extractlane(ctx, v2, v24, 0x0);
        // Rule at src/isa/riscv64/inst_vector.isle line 1515.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_extractlane", "src/isa/riscv64/inst_vector.isle line 1496"
    )
}

// Generated as internal constructor for term gen_vec_mask.
pub fn constructor_gen_vec_mask<C: Context>(ctx: &mut C, arg0: u64) -> VReg {
    let v1 = C::imm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::vstate_from_type(ctx, I64X2);
        let v5 = constructor_rv_vmv_vi(ctx, v2, v4);
        // Rule at src/isa/riscv64/inst_vector.isle line 1525.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, arg0);
    let v8 = C::xreg_new(ctx, v7);
    let v4 = C::vstate_from_type(ctx, I64X2);
    let v9 = constructor_rv_vmv_sx(ctx, v8, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1530.
    return v9;
}

// Generated as internal constructor for term gen_constant.
pub fn constructor_gen_constant<C: Context>(ctx: &mut C, arg0: Type, arg1: VCodeConstant) -> VReg {
    let v3 = C::gen_const_amode(ctx, arg1);
    let v2 = &constructor_element_width_from_type(ctx, arg0);
    let v4 = VecAMode::UnitStride { base: v3 };
    let v5 = C::mem_flags_trusted(ctx);
    let v6 = &constructor_unmasked(ctx);
    let v7 = C::vstate_from_type(ctx, arg0);
    let v8 = constructor_vec_load(ctx, v2, &v4, v5, v6, v7);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1541.
    return v9;
}

// Generated as internal constructor for term gen_slidedown_half.
pub fn constructor_gen_slidedown_half<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::ty_lane_count(ctx, v2);
        let v6 = C::u64_udiv(ctx, v4, 0x2);
        if let Some(v7) = v6 {
            let v8 = C::uimm5_from_u64(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = &constructor_unmasked(ctx);
                let v11 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vslidedown_vi(ctx, arg1, v9, v10, v11);
                // Rule at src/isa/riscv64/inst_vector.isle line 1554.
                return v12;
            }
            let v14 = constructor_imm(ctx, I64, v7);
            let v15 = C::xreg_new(ctx, v14);
            let v10 = &constructor_unmasked(ctx);
            let v11 = C::vstate_from_type(ctx, v2);
            let v16 = constructor_rv_vslidedown_vx(ctx, arg1, v15, v10, v11);
            // Rule at src/isa/riscv64/inst_vector.isle line 1559.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_slidedown_half", "src/isa/riscv64/inst_vector.isle line 1551"
    )
}

// Generated as internal constructor for term gen_expand_mask.
pub fn constructor_gen_expand_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v3 = C::i8_to_imm5(ctx, 0x0);
    if let Some(v4) = v3 {
        let v6 = C::i8_to_imm5(ctx, -0x1);
        if let Some(v7) = v6 {
            let v8 = C::vstate_from_type(ctx, arg0);
            let v9 = constructor_rv_vmv_vi(ctx, v4, v8);
            let v10 = constructor_rv_vmerge_vim(ctx, v9, v7, arg1, v8);
            // Rule at src/isa/riscv64/inst_vector.isle line 1567.
            return v10;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_expand_mask", "src/isa/riscv64/inst_vector.isle line 1566"
    )
}

// Generated as internal constructor for term gen_icmp_mask.
pub fn constructor_gen_icmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &IntCC::Equal => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v31 = C::i64_from_iconst(ctx, v22);
                            if let Some(v32) = v31 {
                                let v33 = C::imm5_from_i64(ctx, v32);
                                if let Some(v34) = v33 {
                                    let v23 = constructor_put_in_vreg(ctx, arg3);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v35 = constructor_rv_vmseq_vi(ctx, v23, v34, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1591.
                                    return v35;
                                }
                            }
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::i64_from_iconst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = C::imm5_from_i64(ctx, v27);
                                if let Some(v29) = v28 {
                                    let v6 = constructor_put_in_vreg(ctx, arg2);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v30 = constructor_rv_vmseq_vi(ctx, v6, v29, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1588.
                                    return v30;
                                }
                            }
                        }
                    }
                }
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmseq_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1585.
                            return v25;
                        }
                    }
                }
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmseq_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1582.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmseq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1579.
                return v10;
            }
            &IntCC::NotEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v31 = C::i64_from_iconst(ctx, v22);
                            if let Some(v32) = v31 {
                                let v33 = C::imm5_from_i64(ctx, v32);
                                if let Some(v34) = v33 {
                                    let v23 = constructor_put_in_vreg(ctx, arg3);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v40 = constructor_rv_vmsne_vi(ctx, v23, v34, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1608.
                                    return v40;
                                }
                            }
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::i64_from_iconst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = C::imm5_from_i64(ctx, v27);
                                if let Some(v29) = v28 {
                                    let v6 = constructor_put_in_vreg(ctx, arg2);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v39 = constructor_rv_vmsne_vi(ctx, v6, v29, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1605.
                                    return v39;
                                }
                            }
                        }
                    }
                }
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v38 = constructor_rv_vmsne_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1602.
                            return v38;
                        }
                    }
                }
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v37 = constructor_rv_vmsne_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1599.
                            return v37;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v36 = constructor_rv_vmsne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1596.
                return v36;
            }
            &IntCC::SignedGreaterThan => {
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::i64_from_iconst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = C::imm5_from_i64(ctx, v27);
                                if let Some(v29) = v28 {
                                    let v6 = constructor_put_in_vreg(ctx, arg2);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v62 = constructor_rv_vmsgt_vi(ctx, v6, v29, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1686.
                                    return v62;
                                }
                            }
                        }
                    }
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v61 = constructor_rv_vmslt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1683.
                            return v61;
                        }
                    }
                }
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v60 = constructor_rv_vmsgt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1680.
                            return v60;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v59 = constructor_rv_vmsgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1677.
                return v59;
            }
            &IntCC::SignedGreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v31 = C::i64_from_iconst(ctx, v22);
                            if let Some(v32) = v31 {
                                let v33 = C::imm5_from_i64(ctx, v32);
                                if let Some(v34) = v33 {
                                    let v23 = constructor_put_in_vreg(ctx, arg3);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v68 = constructor_rv_vmsle_vi(ctx, v23, v34, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1708.
                                    return v68;
                                }
                            }
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v67 = constructor_rv_vmsle_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1705.
                            return v67;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v66 = constructor_rv_vmsge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1702.
                return v66;
            }
            &IntCC::SignedLessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v31 = C::i64_from_iconst(ctx, v22);
                            if let Some(v32) = v31 {
                                let v33 = C::imm5_from_i64(ctx, v32);
                                if let Some(v34) = v33 {
                                    let v23 = constructor_put_in_vreg(ctx, arg3);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v48 = constructor_rv_vmsgt_vi(ctx, v23, v34, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1636.
                                    return v48;
                                }
                            }
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v47 = constructor_rv_vmsgt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1633.
                            return v47;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v46 = constructor_rv_vmslt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1630.
                            return v46;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v45 = constructor_rv_vmslt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1627.
                return v45;
            }
            &IntCC::SignedLessThanOrEqual => {
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::i64_from_iconst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = C::imm5_from_i64(ctx, v27);
                                if let Some(v29) = v28 {
                                    let v6 = constructor_put_in_vreg(ctx, arg2);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v54 = constructor_rv_vmsle_vi(ctx, v6, v29, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1658.
                                    return v54;
                                }
                            }
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v53 = constructor_rv_vmsle_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1655.
                            return v53;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v52 = constructor_rv_vmsle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1652.
                return v52;
            }
            &IntCC::UnsignedGreaterThan => {
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::i64_from_iconst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = C::imm5_from_i64(ctx, v27);
                                if let Some(v29) = v28 {
                                    let v6 = constructor_put_in_vreg(ctx, arg2);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v58 = constructor_rv_vmsgtu_vi(ctx, v6, v29, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1672.
                                    return v58;
                                }
                            }
                        }
                    }
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v57 = constructor_rv_vmsltu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1669.
                            return v57;
                        }
                    }
                }
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v56 = constructor_rv_vmsgtu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1666.
                            return v56;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v55 = constructor_rv_vmsgtu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1663.
                return v55;
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v31 = C::i64_from_iconst(ctx, v22);
                            if let Some(v32) = v31 {
                                let v33 = C::imm5_from_i64(ctx, v32);
                                if let Some(v34) = v33 {
                                    let v23 = constructor_put_in_vreg(ctx, arg3);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v65 = constructor_rv_vmsleu_vi(ctx, v23, v34, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1697.
                                    return v65;
                                }
                            }
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v64 = constructor_rv_vmsleu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1694.
                            return v64;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v63 = constructor_rv_vmsgeu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1691.
                return v63;
            }
            &IntCC::UnsignedLessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v31 = C::i64_from_iconst(ctx, v22);
                            if let Some(v32) = v31 {
                                let v33 = C::imm5_from_i64(ctx, v32);
                                if let Some(v34) = v33 {
                                    let v23 = constructor_put_in_vreg(ctx, arg3);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v44 = constructor_rv_vmsgtu_vi(ctx, v23, v34, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1622.
                                    return v44;
                                }
                            }
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v43 = constructor_rv_vmsgtu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1619.
                            return v43;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v42 = constructor_rv_vmsltu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1616.
                            return v42;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v41 = constructor_rv_vmsltu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1613.
                return v41;
            }
            &IntCC::UnsignedLessThanOrEqual => {
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v26 = C::i64_from_iconst(ctx, v15);
                            if let Some(v27) = v26 {
                                let v28 = C::imm5_from_i64(ctx, v27);
                                if let Some(v29) = v28 {
                                    let v6 = constructor_put_in_vreg(ctx, arg2);
                                    let v8 = &constructor_unmasked(ctx);
                                    let v9 = C::vstate_from_type(ctx, v2);
                                    let v51 = constructor_rv_vmsleu_vi(ctx, v6, v29, v8, v9);
                                    // Rule at src/isa/riscv64/inst_vector.isle line 1647.
                                    return v51;
                                }
                            }
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v50 = constructor_rv_vmsleu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1644.
                            return v50;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v49 = constructor_rv_vmsleu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1641.
                return v49;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_icmp_mask", "src/isa/riscv64/inst_vector.isle line 1575"
    )
}

// Generated as internal constructor for term gen_fcmp_mask.
pub fn constructor_gen_fcmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &FloatCC::Equal => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmfeq_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1724.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmfeq_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1721.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmfeq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1718.
                return v10;
            }
            &FloatCC::GreaterThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v37 = constructor_rv_vmflt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1769.
                            return v37;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v36 = constructor_rv_vmfgt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1766.
                            return v36;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v35 = constructor_rv_vmfgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1763.
                return v35;
            }
            &FloatCC::GreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v40 = constructor_rv_vmfle_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1780.
                            return v40;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmfge_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1777.
                            return v39;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v38 = constructor_rv_vmfge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1774.
                return v38;
            }
            &FloatCC::LessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v31 = constructor_rv_vmfgt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1747.
                            return v31;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v30 = constructor_rv_vmflt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1744.
                            return v30;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v29 = constructor_rv_vmflt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1741.
                return v29;
            }
            &FloatCC::LessThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmfge_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1758.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmfle_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1755.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmfle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1752.
                return v32;
            }
            &FloatCC::NotEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v28 = constructor_rv_vmfne_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1736.
                            return v28;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v27 = constructor_rv_vmfne_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1733.
                            return v27;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v26 = constructor_rv_vmfne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1730.
                return v26;
            }
            &FloatCC::Ordered => {
                let v42 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg2, arg2);
                let v43 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v44 = constructor_rv_vmand_mm(ctx, v42, v43, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1785.
                return v44;
            }
            &FloatCC::OrderedNotEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v52 = constructor_rv_vmor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1801.
                return v52;
            }
            &FloatCC::Unordered => {
                let v46 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg2, arg2);
                let v47 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmor_mm(ctx, v46, v47, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1793.
                return v48;
            }
            &FloatCC::UnorderedOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v53 = constructor_rv_vmnor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1809.
                return v53;
            }
            &FloatCC::UnorderedOrGreaterThan => {
                let v55 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v56 = constructor_rv_vmnot_m(ctx, v55, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1817.
                return v56;
            }
            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v57 = constructor_rv_vmnot_m(ctx, v50, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1822.
                return v57;
            }
            &FloatCC::UnorderedOrLessThan => {
                let v59 =
                    constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v60 = constructor_rv_vmnot_m(ctx, v59, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1827.
                return v60;
            }
            &FloatCC::UnorderedOrLessThanOrEqual => {
                let v62 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v63 = constructor_rv_vmnot_m(ctx, v62, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1832.
                return v63;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_fcmp_mask", "src/isa/riscv64/inst_vector.isle line 1714"
    )
}

// Generated as internal constructor for term gen_vfcvt_x_f.
pub fn constructor_gen_vfcvt_x_f<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: VState,
) -> VReg {
    if let &FRM::RTZ = arg1 {
        let v3 = &constructor_unmasked(ctx);
        let v4 = constructor_rv_vfcvt_rtz_x_f_v(ctx, arg0, v3, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 1840.
        return v4;
    }
    let v5 = constructor_rv_fsrmi(ctx, arg1);
    let v3 = &constructor_unmasked(ctx);
    let v6 = constructor_rv_vfcvt_x_f_v(ctx, arg0, v3, arg2);
    let v7 = constructor_rv_fsrm(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1844.
    return v6;
}

// Generated as internal constructor for term float_int_max.
pub fn constructor_float_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 1855.
            return 0x4B000000;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 1856.
            return 0x4330000000000000;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_max", "src/isa/riscv64/inst_vector.isle line 1854"
    )
}

// Generated as internal constructor for term gen_vec_round.
pub fn constructor_gen_vec_round<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: Type,
) -> VReg {
    let v3 = C::ty_vec_fits_in_register(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v4);
        let v8 = constructor_rv_vfabs_v(ctx, arg0, v6, v7);
        let v5 = C::lane_type(ctx, v4);
        let v9 = constructor_float_int_max(ctx, v5);
        let v10 = constructor_imm(ctx, v5, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_vmflt_vf(ctx, v8, v11, v6, v7);
        let v13 = constructor_gen_vfcvt_x_f(ctx, arg0, arg1, v7);
        let v14 = constructor_rv_vfcvt_f_x_v(ctx, v13, v6, v7);
        let v15 = constructor_rv_vfsgnj_vv(ctx, v14, arg0, v6, v7);
        let v16 = C::zero_reg(ctx);
        let v17 = constructor_float_int_of_same_size(ctx, v5);
        let v18 = constructor_gen_bitcast(ctx, v16, v17, v5);
        let v19 = C::freg_new(ctx, v18);
        let v20 = constructor_rv_vfadd_vf(ctx, arg0, v19, v6, v7);
        let v21 = constructor_rv_vmerge_vvm(ctx, v20, v15, v12, v7);
        // Rule at src/isa/riscv64/inst_vector.isle line 1865.
        return v21;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_vec_round", "src/isa/riscv64/inst_vector.isle line 1859"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1143,
            args: ref v1144,
            flags: v1145,
        } => {
            if let &Opcode::AtomicCas = v1143 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1082 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1083) = v1082 {
                        let v1113 = C::temp_writable_reg(ctx, v1083);
                        let v1150 = C::temp_writable_reg(ctx, v1083);
                        let v1146 = C::unpack_value_array_3(ctx, v1144);
                        let v1151 = constructor_put_in_xreg(ctx, v1146.0);
                        let v1152 = constructor_gen_atomic_offset(ctx, v1151, v1083);
                        let v1154 = constructor_put_in_xreg(ctx, v1146.1);
                        let v1155 = constructor_zext(ctx, v1154, v1083, I64);
                        let v1157 = constructor_put_in_xreg(ctx, v1146.0);
                        let v1158 = constructor_gen_atomic_p(ctx, v1157, v1083);
                        let v1160 = C::put_in_reg(ctx, v1146.2);
                        let v1153 = C::xreg_to_reg(ctx, v1152);
                        let v1156 = C::xreg_to_reg(ctx, v1155);
                        let v1159 = C::xreg_to_reg(ctx, v1158);
                        let v1161 = MInst::AtomicCas {
                            offset: v1153,
                            t0: v1113,
                            dst: v1150,
                            e: v1156,
                            addr: v1159,
                            v: v1160,
                            ty: v1083,
                        };
                        let v1162 = C::emit(ctx, &v1161);
                        let v1163 = C::writable_reg_to_reg(ctx, v1150);
                        let v1164 = constructor_output_reg(ctx, v1163);
                        // Rule at src/isa/riscv64/lower.isle line 1188.
                        return Some(v1164);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1084,
            args: ref v1085,
            flags: v1086,
            op: ref v1087,
        } => {
            if let &Opcode::AtomicRmw = v1084 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1082 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1083) = v1082 {
                        let v1097 = C::fits_in_16(ctx, v1083);
                        if let Some(v1098) = v1097 {
                            let v1103 = C::is_atomic_rmw_max_etc(ctx, v1087);
                            if let Some(v1104) = v1103 {
                                match v1104.1 {
                                    true => {
                                        let v1088 = C::unpack_value_array_2(ctx, v1085);
                                        let v1099 = constructor_put_in_xreg(ctx, v1088.0);
                                        let v1100 = constructor_put_in_xreg(ctx, v1088.1);
                                        let v1107 = constructor_sext(ctx, v1100, v1098, I64);
                                        let v1108 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1104.0, v1098, v1099, v1107,
                                        );
                                        let v1109 = constructor_output_xreg(ctx, v1108);
                                        // Rule at src/isa/riscv64/lower.isle line 1120.
                                        return Some(v1109);
                                    }
                                    false => {
                                        let v1088 = C::unpack_value_array_2(ctx, v1085);
                                        let v1099 = constructor_put_in_xreg(ctx, v1088.0);
                                        let v1100 = constructor_put_in_xreg(ctx, v1088.1);
                                        let v1110 = constructor_zext(ctx, v1100, v1098, I64);
                                        let v1111 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1104.0, v1098, v1099, v1110,
                                        );
                                        let v1112 = constructor_output_xreg(ctx, v1111);
                                        // Rule at src/isa/riscv64/lower.isle line 1126.
                                        return Some(v1112);
                                    }
                                    _ => {}
                                }
                            }
                            let v1088 = C::unpack_value_array_2(ctx, v1085);
                            let v1099 = constructor_put_in_xreg(ctx, v1088.0);
                            let v1100 = constructor_put_in_xreg(ctx, v1088.1);
                            let v1101 =
                                constructor_gen_atomic_rmw_loop(ctx, v1087, v1098, v1099, v1100);
                            let v1102 = constructor_output_xreg(ctx, v1101);
                            // Rule at src/isa/riscv64/lower.isle line 1113.
                            return Some(v1102);
                        }
                        match v1087 {
                            &AtomicRmwOp::Nand => {
                                let v1088 = C::unpack_value_array_2(ctx, v1085);
                                let v1099 = constructor_put_in_xreg(ctx, v1088.0);
                                let v1100 = constructor_put_in_xreg(ctx, v1088.1);
                                let v1123 = constructor_gen_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRmwOp::Nand,
                                    v1083,
                                    v1099,
                                    v1100,
                                );
                                let v1124 = constructor_output_xreg(ctx, v1123);
                                // Rule at src/isa/riscv64/lower.isle line 1153.
                                return Some(v1124);
                            }
                            &AtomicRmwOp::Sub => {
                                let v1113 = C::temp_writable_reg(ctx, v1083);
                                let v1088 = C::unpack_value_array_2(ctx, v1085);
                                let v1100 = constructor_put_in_xreg(ctx, v1088.1);
                                let v1114 = constructor_rv_neg(ctx, v1100);
                                let v1117 =
                                    &constructor_get_atomic_rmw_op(ctx, v1083, &AtomicRmwOp::Add);
                                let v1118 = C::put_in_reg(ctx, v1088.0);
                                let v1119 = C::atomic_amo(ctx);
                                let v1115 = C::xreg_to_reg(ctx, v1114);
                                let v1120 = constructor_gen_atomic(ctx, v1117, v1118, v1115, v1119);
                                let v1121 = constructor_output_reg(ctx, v1120);
                                // Rule at src/isa/riscv64/lower.isle line 1135.
                                return Some(v1121);
                            }
                            _ => {}
                        }
                        let v1091 = &constructor_get_atomic_rmw_op(ctx, v1083, v1087);
                        let v1088 = C::unpack_value_array_2(ctx, v1085);
                        let v1092 = C::put_in_reg(ctx, v1088.0);
                        let v1093 = C::put_in_reg(ctx, v1088.1);
                        let v1094 = C::atomic_amo(ctx);
                        let v1095 = constructor_gen_atomic(ctx, v1091, v1092, v1093, v1094);
                        let v1096 = constructor_output_reg(ctx, v1095);
                        // Rule at src/isa/riscv64/lower.isle line 1106.
                        return Some(v1096);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v36,
            args: ref v37,
        } => {
            match v36 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v170 = C::def_inst(ctx, v64);
                                        if let Some(v171) = v170 {
                                            let v172 = &C::inst_data(ctx, v171);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1759,
                                                imm: v1760,
                                            } = v172
                                            {
                                                if let &Opcode::Iconst = v1759 {
                                                    let v1761 = C::u64_from_imm64(ctx, v1760);
                                                    let v1762 = C::uimm5_from_u64(ctx, v1761);
                                                    if let Some(v1763) = v1762 {
                                                        let v161 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1764 = constructor_rv_vrgather_vi(
                                                            ctx, v161, v1763, v163, v164,
                                                        );
                                                        let v1765 =
                                                            constructor_output_vreg(ctx, v1764);
                                                        // Rule at src/isa/riscv64/lower.isle line 1941.
                                                        return Some(v1765);
                                                    }
                                                }
                                            }
                                        }
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1757 =
                                            constructor_rv_vrgather_vx(ctx, v161, v167, v163, v164);
                                        let v1758 = constructor_output_vreg(ctx, v1757);
                                        // Rule at src/isa/riscv64/lower.isle line 1938.
                                        return Some(v1758);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1755 = constructor_rv_vrgather_vv(ctx, v161, v162, v163, v164);
                            let v1756 = constructor_output_vreg(ctx, v1755);
                            // Rule at src/isa/riscv64/lower.isle line 1935.
                            return Some(v1756);
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1376 =
                                            constructor_rv_vmin_vx(ctx, v193, v194, v163, v164);
                                        let v1377 = constructor_output_vreg(ctx, v1376);
                                        // Rule at src/isa/riscv64/lower.isle line 1430.
                                        return Some(v1377);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1374 =
                                            constructor_rv_vmin_vx(ctx, v161, v167, v163, v164);
                                        let v1375 = constructor_output_vreg(ctx, v1374);
                                        // Rule at src/isa/riscv64/lower.isle line 1427.
                                        return Some(v1375);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1372 = constructor_rv_vmin_vv(ctx, v161, v162, v163, v164);
                            let v1373 = constructor_output_vreg(ctx, v1372);
                            // Rule at src/isa/riscv64/lower.isle line 1424.
                            return Some(v1373);
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v1359 = constructor_ext_int_if_need(ctx, true, v136, v444);
                            let v913 = C::put_in_regs(ctx, v38.1);
                            let v1360 = constructor_ext_int_if_need(ctx, true, v913, v444);
                            let v1370 = constructor_gen_int_select(
                                ctx,
                                v444,
                                &IntSelectOP::Smin,
                                v1359,
                                v1360,
                            );
                            let v1371 = C::output(ctx, v1370);
                            // Rule at src/isa/riscv64/lower.isle line 1421.
                            return Some(v1371);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1397 =
                                            constructor_rv_vminu_vx(ctx, v193, v194, v163, v164);
                                        let v1398 = constructor_output_vreg(ctx, v1397);
                                        // Rule at src/isa/riscv64/lower.isle line 1458.
                                        return Some(v1398);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1395 =
                                            constructor_rv_vminu_vx(ctx, v161, v167, v163, v164);
                                        let v1396 = constructor_output_vreg(ctx, v1395);
                                        // Rule at src/isa/riscv64/lower.isle line 1455.
                                        return Some(v1396);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1393 = constructor_rv_vminu_vv(ctx, v161, v162, v163, v164);
                            let v1394 = constructor_output_vreg(ctx, v1393);
                            // Rule at src/isa/riscv64/lower.isle line 1452.
                            return Some(v1394);
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v1380 = constructor_ext_int_if_need(ctx, false, v136, v444);
                            let v913 = C::put_in_regs(ctx, v38.1);
                            let v1381 = constructor_ext_int_if_need(ctx, false, v913, v444);
                            let v1391 = constructor_gen_int_select(
                                ctx,
                                v444,
                                &IntSelectOP::Umin,
                                v1380,
                                v1381,
                            );
                            let v1392 = C::output(ctx, v1391);
                            // Rule at src/isa/riscv64/lower.isle line 1449.
                            return Some(v1392);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1367 =
                                            constructor_rv_vmax_vx(ctx, v193, v194, v163, v164);
                                        let v1368 = constructor_output_vreg(ctx, v1367);
                                        // Rule at src/isa/riscv64/lower.isle line 1416.
                                        return Some(v1368);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1365 =
                                            constructor_rv_vmax_vx(ctx, v161, v167, v163, v164);
                                        let v1366 = constructor_output_vreg(ctx, v1365);
                                        // Rule at src/isa/riscv64/lower.isle line 1413.
                                        return Some(v1366);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1363 = constructor_rv_vmax_vv(ctx, v161, v162, v163, v164);
                            let v1364 = constructor_output_vreg(ctx, v1363);
                            // Rule at src/isa/riscv64/lower.isle line 1410.
                            return Some(v1364);
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v1359 = constructor_ext_int_if_need(ctx, true, v136, v444);
                            let v913 = C::put_in_regs(ctx, v38.1);
                            let v1360 = constructor_ext_int_if_need(ctx, true, v913, v444);
                            let v1361 = constructor_gen_int_select(
                                ctx,
                                v444,
                                &IntSelectOP::Smax,
                                v1359,
                                v1360,
                            );
                            let v1362 = C::output(ctx, v1361);
                            // Rule at src/isa/riscv64/lower.isle line 1407.
                            return Some(v1362);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1388 =
                                            constructor_rv_vmaxu_vx(ctx, v193, v194, v163, v164);
                                        let v1389 = constructor_output_vreg(ctx, v1388);
                                        // Rule at src/isa/riscv64/lower.isle line 1444.
                                        return Some(v1389);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1386 =
                                            constructor_rv_vmaxu_vx(ctx, v161, v167, v163, v164);
                                        let v1387 = constructor_output_vreg(ctx, v1386);
                                        // Rule at src/isa/riscv64/lower.isle line 1441.
                                        return Some(v1387);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1384 = constructor_rv_vmaxu_vv(ctx, v161, v162, v163, v164);
                            let v1385 = constructor_output_vreg(ctx, v1384);
                            // Rule at src/isa/riscv64/lower.isle line 1438.
                            return Some(v1385);
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v1380 = constructor_ext_int_if_need(ctx, false, v136, v444);
                            let v913 = C::put_in_regs(ctx, v38.1);
                            let v1381 = constructor_ext_int_if_need(ctx, false, v913, v444);
                            let v1382 = constructor_gen_int_select(
                                ctx,
                                v444,
                                &IntSelectOP::Umax,
                                v1380,
                                v1381,
                            );
                            let v1383 = C::output(ctx, v1382);
                            // Rule at src/isa/riscv64/lower.isle line 1435.
                            return Some(v1383);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v773 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v774) = v773 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                let v162 = constructor_put_in_vreg(ctx, v38.1);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v603 = constructor_rv_vand_vv(ctx, v161, v162, v163, v164);
                                let v1853 = constructor_put_in_vreg(ctx, v38.0);
                                let v1854 = constructor_put_in_vreg(ctx, v38.1);
                                let v1855 = constructor_rv_vxor_vv(ctx, v1853, v1854, v163, v164);
                                let v1856 = constructor_rv_vssrl_vi(ctx, v1855, v774, v163, v164);
                                let v1857 = constructor_rv_vadd_vv(ctx, v603, v1856, v163, v164);
                                let v1858 = constructor_output_vreg(ctx, v1857);
                                // Rule at src/isa/riscv64/lower.isle line 2055.
                                return Some(v1858);
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v209 = C::i64_from_iconst(ctx, v75);
                                        if let Some(v210) = v209 {
                                            let v211 = C::imm5_from_i64(ctx, v210);
                                            if let Some(v212) = v211 {
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1712 = constructor_rv_vsaddu_vi(
                                                    ctx, v193, v212, v163, v164,
                                                );
                                                let v1713 = constructor_output_vreg(ctx, v1712);
                                                // Rule at src/isa/riscv64/lower.isle line 1849.
                                                return Some(v1713);
                                            }
                                        }
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v187 = C::i64_from_iconst(ctx, v64);
                                        if let Some(v188) = v187 {
                                            let v189 = C::imm5_from_i64(ctx, v188);
                                            if let Some(v190) = v189 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1710 = constructor_rv_vsaddu_vi(
                                                    ctx, v161, v190, v163, v164,
                                                );
                                                let v1711 = constructor_output_vreg(ctx, v1710);
                                                // Rule at src/isa/riscv64/lower.isle line 1846.
                                                return Some(v1711);
                                            }
                                        }
                                    }
                                }
                            }
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1708 =
                                            constructor_rv_vsaddu_vx(ctx, v193, v194, v163, v164);
                                        let v1709 = constructor_output_vreg(ctx, v1708);
                                        // Rule at src/isa/riscv64/lower.isle line 1843.
                                        return Some(v1709);
                                    }
                                }
                            }
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1706 =
                                            constructor_rv_vsaddu_vx(ctx, v161, v167, v163, v164);
                                        let v1707 = constructor_output_vreg(ctx, v1706);
                                        // Rule at src/isa/riscv64/lower.isle line 1840.
                                        return Some(v1707);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1704 = constructor_rv_vsaddu_vv(ctx, v161, v162, v163, v164);
                            let v1705 = constructor_output_vreg(ctx, v1704);
                            // Rule at src/isa/riscv64/lower.isle line 1837.
                            return Some(v1705);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v209 = C::i64_from_iconst(ctx, v75);
                                        if let Some(v210) = v209 {
                                            let v211 = C::imm5_from_i64(ctx, v210);
                                            if let Some(v212) = v211 {
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1722 = constructor_rv_vsadd_vi(
                                                    ctx, v193, v212, v163, v164,
                                                );
                                                let v1723 = constructor_output_vreg(ctx, v1722);
                                                // Rule at src/isa/riscv64/lower.isle line 1866.
                                                return Some(v1723);
                                            }
                                        }
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v187 = C::i64_from_iconst(ctx, v64);
                                        if let Some(v188) = v187 {
                                            let v189 = C::imm5_from_i64(ctx, v188);
                                            if let Some(v190) = v189 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1720 = constructor_rv_vsadd_vi(
                                                    ctx, v161, v190, v163, v164,
                                                );
                                                let v1721 = constructor_output_vreg(ctx, v1720);
                                                // Rule at src/isa/riscv64/lower.isle line 1863.
                                                return Some(v1721);
                                            }
                                        }
                                    }
                                }
                            }
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1718 =
                                            constructor_rv_vsadd_vx(ctx, v193, v194, v163, v164);
                                        let v1719 = constructor_output_vreg(ctx, v1718);
                                        // Rule at src/isa/riscv64/lower.isle line 1860.
                                        return Some(v1719);
                                    }
                                }
                            }
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1716 =
                                            constructor_rv_vsadd_vx(ctx, v161, v167, v163, v164);
                                        let v1717 = constructor_output_vreg(ctx, v1716);
                                        // Rule at src/isa/riscv64/lower.isle line 1857.
                                        return Some(v1717);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1714 = constructor_rv_vsadd_vv(ctx, v161, v162, v163, v164);
                            let v1715 = constructor_output_vreg(ctx, v1714);
                            // Rule at src/isa/riscv64/lower.isle line 1854.
                            return Some(v1715);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1726 =
                                            constructor_rv_vssubu_vx(ctx, v161, v167, v163, v164);
                                        let v1727 = constructor_output_vreg(ctx, v1726);
                                        // Rule at src/isa/riscv64/lower.isle line 1874.
                                        return Some(v1727);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1724 = constructor_rv_vssubu_vv(ctx, v161, v162, v163, v164);
                            let v1725 = constructor_output_vreg(ctx, v1724);
                            // Rule at src/isa/riscv64/lower.isle line 1871.
                            return Some(v1725);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1730 =
                                            constructor_rv_vssub_vx(ctx, v161, v167, v163, v164);
                                        let v1731 = constructor_output_vreg(ctx, v1730);
                                        // Rule at src/isa/riscv64/lower.isle line 1882.
                                        return Some(v1731);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1728 = constructor_rv_vssub_vv(ctx, v161, v162, v163, v164);
                            let v1729 = constructor_output_vreg(ctx, v1728);
                            // Rule at src/isa/riscv64/lower.isle line 1879.
                            return Some(v1729);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                match v73 {
                                    &InstructionData::Binary {
                                        opcode: ref v97,
                                        args: ref v98,
                                    } => {
                                        if let &Opcode::Imul = v97 {
                                            let v99 = C::unpack_value_array_2(ctx, v98);
                                            let v125 = C::def_inst(ctx, v99.0);
                                            if let Some(v126) = v125 {
                                                let v127 = &C::inst_data(ctx, v126);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v128,
                                                    arg: v129,
                                                } = v127
                                                {
                                                    if let &Opcode::Splat = v128 {
                                                        let v193 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v316 =
                                                            constructor_put_in_vreg(ctx, v99.1);
                                                        let v317 =
                                                            constructor_put_in_xreg(ctx, v129);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v318 = constructor_rv_vmacc_vx(
                                                            ctx, v193, v316, v317, v163, v164,
                                                        );
                                                        let v319 =
                                                            constructor_output_vreg(ctx, v318);
                                                        // Rule at src/isa/riscv64/lower.isle line 273.
                                                        return Some(v319);
                                                    }
                                                }
                                            }
                                            let v308 = C::def_inst(ctx, v99.1);
                                            if let Some(v309) = v308 {
                                                let v310 = &C::inst_data(ctx, v309);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v311,
                                                    arg: v312,
                                                } = v310
                                                {
                                                    if let &Opcode::Splat = v311 {
                                                        let v193 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v304 =
                                                            constructor_put_in_vreg(ctx, v99.0);
                                                        let v313 =
                                                            constructor_put_in_xreg(ctx, v312);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v314 = constructor_rv_vmacc_vx(
                                                            ctx, v193, v304, v313, v163, v164,
                                                        );
                                                        let v315 =
                                                            constructor_output_vreg(ctx, v314);
                                                        // Rule at src/isa/riscv64/lower.isle line 270.
                                                        return Some(v315);
                                                    }
                                                }
                                            }
                                            let v193 = constructor_put_in_vreg(ctx, v38.1);
                                            let v304 = constructor_put_in_vreg(ctx, v99.0);
                                            let v305 = constructor_put_in_vreg(ctx, v99.1);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v306 = constructor_rv_vmacc_vv(
                                                ctx, v193, v304, v305, v163, v164,
                                            );
                                            let v307 = constructor_output_vreg(ctx, v306);
                                            // Rule at src/isa/riscv64/lower.isle line 267.
                                            return Some(v307);
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } => {
                                        match v74 {
                                            &Opcode::Splat => {
                                                let v60 = C::def_inst(ctx, v38.1);
                                                if let Some(v61) = v60 {
                                                    let v62 = &C::inst_data(ctx, v61);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v63,
                                                        arg: v64,
                                                    } = v62
                                                    {
                                                        match v63 {
                                                            &Opcode::SwidenLow => {
                                                                let v197 = C::def_inst(ctx, v75);
                                                                if let Some(v198) = v197 {
                                                                    let v199 =
                                                                        &C::inst_data(ctx, v198);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v200,
                                                                        arg: v201,
                                                                    } = v199 {
                                                                        if let &Opcode::Sextend = v200 {
                                                                            let v65 = C::value_type(ctx, v64);
                                                                            let v236 = C::lane_type(ctx, v65);
                                                                            let v202 = C::value_type(ctx, v201);
                                                                            let v237 = C::ty_equal(ctx, v236, v202);
                                                                            if v237 == true {
                                                                                let v238 = constructor_put_in_vreg(ctx, v64);
                                                                                let v204 = constructor_put_in_xreg(ctx, v201);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v216 = C::ty_half_lanes(ctx, v65);
                                                                                let v217 = v216?;
                                                                                let v218 = C::vstate_from_type(ctx, v217);
                                                                                let v219 = C::vstate_mf2(ctx, v218);
                                                                                let v239 = constructor_rv_vwadd_vx(ctx, v238, v204, v163, v219);
                                                                                let v240 = constructor_output_vreg(ctx, v239);
                                                                                // Rule at src/isa/riscv64/lower.isle line 159.
                                                                                return Some(v240);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v197 = C::def_inst(ctx, v75);
                                                                if let Some(v198) = v197 {
                                                                    let v199 =
                                                                        &C::inst_data(ctx, v198);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v200,
                                                                        arg: v201,
                                                                    } = v199 {
                                                                        if let &Opcode::Sextend = v200 {
                                                                            let v65 = C::value_type(ctx, v64);
                                                                            let v236 = C::lane_type(ctx, v65);
                                                                            let v202 = C::value_type(ctx, v201);
                                                                            let v237 = C::ty_equal(ctx, v236, v202);
                                                                            if v237 == true {
                                                                                let v238 = constructor_put_in_vreg(ctx, v64);
                                                                                let v255 = constructor_gen_slidedown_half(ctx, v65, v238);
                                                                                let v256 = constructor_put_in_xreg(ctx, v201);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v216 = C::ty_half_lanes(ctx, v65);
                                                                                let v217 = v216?;
                                                                                let v218 = C::vstate_from_type(ctx, v217);
                                                                                let v219 = C::vstate_mf2(ctx, v218);
                                                                                let v257 = constructor_rv_vwadd_vx(ctx, v255, v256, v163, v219);
                                                                                let v258 = constructor_output_vreg(ctx, v257);
                                                                                // Rule at src/isa/riscv64/lower.isle line 182.
                                                                                return Some(v258);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v197 = C::def_inst(ctx, v75);
                                                                if let Some(v198) = v197 {
                                                                    let v199 =
                                                                        &C::inst_data(ctx, v198);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v200,
                                                                        arg: v201,
                                                                    } = v199 {
                                                                        if let &Opcode::Uextend = v200 {
                                                                            let v65 = C::value_type(ctx, v64);
                                                                            let v236 = C::lane_type(ctx, v65);
                                                                            let v202 = C::value_type(ctx, v201);
                                                                            let v237 = C::ty_equal(ctx, v236, v202);
                                                                            if v237 == true {
                                                                                let v238 = constructor_put_in_vreg(ctx, v64);
                                                                                let v204 = constructor_put_in_xreg(ctx, v201);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v216 = C::ty_half_lanes(ctx, v65);
                                                                                let v217 = v216?;
                                                                                let v218 = C::vstate_from_type(ctx, v217);
                                                                                let v219 = C::vstate_mf2(ctx, v218);
                                                                                let v267 = constructor_rv_vwaddu_vx(ctx, v238, v204, v163, v219);
                                                                                let v268 = constructor_output_vreg(ctx, v267);
                                                                                // Rule at src/isa/riscv64/lower.isle line 204.
                                                                                return Some(v268);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v197 = C::def_inst(ctx, v75);
                                                                if let Some(v198) = v197 {
                                                                    let v199 =
                                                                        &C::inst_data(ctx, v198);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v200,
                                                                        arg: v201,
                                                                    } = v199 {
                                                                        if let &Opcode::Uextend = v200 {
                                                                            let v65 = C::value_type(ctx, v64);
                                                                            let v236 = C::lane_type(ctx, v65);
                                                                            let v202 = C::value_type(ctx, v201);
                                                                            let v237 = C::ty_equal(ctx, v236, v202);
                                                                            if v237 == true {
                                                                                let v238 = constructor_put_in_vreg(ctx, v64);
                                                                                let v255 = constructor_gen_slidedown_half(ctx, v65, v238);
                                                                                let v256 = constructor_put_in_xreg(ctx, v201);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v216 = C::ty_half_lanes(ctx, v65);
                                                                                let v217 = v216?;
                                                                                let v218 = C::vstate_from_type(ctx, v217);
                                                                                let v219 = C::vstate_mf2(ctx, v218);
                                                                                let v277 = constructor_rv_vwaddu_vx(ctx, v255, v256, v163, v219);
                                                                                let v278 = constructor_output_vreg(ctx, v277);
                                                                                // Rule at src/isa/riscv64/lower.isle line 227.
                                                                                return Some(v278);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v209 = C::i64_from_iconst(ctx, v75);
                                                if let Some(v210) = v209 {
                                                    let v211 = C::imm5_from_i64(ctx, v210);
                                                    if let Some(v212) = v211 {
                                                        let v193 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v213 = constructor_rv_vadd_vi(
                                                            ctx, v193, v212, v163, v164,
                                                        );
                                                        let v214 =
                                                            constructor_output_vreg(ctx, v213);
                                                        // Rule at src/isa/riscv64/lower.isle line 139.
                                                        return Some(v214);
                                                    }
                                                }
                                                let v176 = C::ty_half_width(ctx, v11);
                                                if let Some(v177) = v176 {
                                                    let v197 = C::def_inst(ctx, v75);
                                                    if let Some(v198) = v197 {
                                                        let v199 = &C::inst_data(ctx, v198);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v200,
                                                            arg: v201,
                                                        } = v199
                                                        {
                                                            match v200 {
                                                                &Opcode::Uextend => {
                                                                    let v178 =
                                                                        C::lane_type(ctx, v177);
                                                                    let v202 =
                                                                        C::value_type(ctx, v201);
                                                                    let v203 = C::ty_equal(
                                                                        ctx, v178, v202,
                                                                    );
                                                                    if v203 == true {
                                                                        let v193 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v204 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v201,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v181 =
                                                                            C::vstate_from_type(
                                                                                ctx, v177,
                                                                            );
                                                                        let v182 = C::vstate_mf2(
                                                                            ctx, v181,
                                                                        );
                                                                        let v207 = constructor_rv_vwaddu_wx(ctx, v193, v204, v163, v182);
                                                                        let v208 =
                                                                            constructor_output_vreg(
                                                                                ctx, v207,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 134.
                                                                        return Some(v208);
                                                                    }
                                                                }
                                                                &Opcode::Sextend => {
                                                                    let v178 =
                                                                        C::lane_type(ctx, v177);
                                                                    let v202 =
                                                                        C::value_type(ctx, v201);
                                                                    let v203 = C::ty_equal(
                                                                        ctx, v178, v202,
                                                                    );
                                                                    if v203 == true {
                                                                        let v193 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v204 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v201,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v181 =
                                                                            C::vstate_from_type(
                                                                                ctx, v177,
                                                                            );
                                                                        let v182 = C::vstate_mf2(
                                                                            ctx, v181,
                                                                        );
                                                                        let v205 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v193, v204,
                                                                                v163, v182,
                                                                            );
                                                                        let v206 =
                                                                            constructor_output_vreg(
                                                                                ctx, v205,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 129.
                                                                        return Some(v206);
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v194 = constructor_put_in_xreg(ctx, v75);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v195 = constructor_rv_vadd_vx(
                                                    ctx, v193, v194, v163, v164,
                                                );
                                                let v196 = constructor_output_vreg(ctx, v195);
                                                // Rule at src/isa/riscv64/lower.isle line 126.
                                                return Some(v196);
                                            }
                                            &Opcode::Ineg => {
                                                let v197 = C::def_inst(ctx, v75);
                                                if let Some(v198) = v197 {
                                                    let v199 = &C::inst_data(ctx, v198);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v346,
                                                        args: ref v347,
                                                    } = v199
                                                    {
                                                        if let &Opcode::Imul = v346 {
                                                            let v348 =
                                                                C::unpack_value_array_2(ctx, v347);
                                                            let v363 = C::def_inst(ctx, v348.0);
                                                            if let Some(v364) = v363 {
                                                                let v365 = &C::inst_data(ctx, v364);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v366,
                                                                    arg: v367,
                                                                } = v365
                                                                {
                                                                    if let &Opcode::Splat = v366 {
                                                                        let v193 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v368 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v348.1,
                                                                            );
                                                                        let v369 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v367,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v164 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v370 = constructor_rv_vnmsac_vx(ctx, v193, v368, v369, v163, v164);
                                                                        let v371 =
                                                                            constructor_output_vreg(
                                                                                ctx, v370,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 293.
                                                                        return Some(v371);
                                                                    }
                                                                }
                                                            }
                                                            let v355 = C::def_inst(ctx, v348.1);
                                                            if let Some(v356) = v355 {
                                                                let v357 = &C::inst_data(ctx, v356);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v358,
                                                                    arg: v359,
                                                                } = v357
                                                                {
                                                                    if let &Opcode::Splat = v358 {
                                                                        let v193 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v351 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v348.0,
                                                                            );
                                                                        let v360 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v359,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v164 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v361 = constructor_rv_vnmsac_vx(ctx, v193, v351, v360, v163, v164);
                                                                        let v362 =
                                                                            constructor_output_vreg(
                                                                                ctx, v361,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 290.
                                                                        return Some(v362);
                                                                    }
                                                                }
                                                            }
                                                            let v193 =
                                                                constructor_put_in_vreg(ctx, v38.1);
                                                            let v351 = constructor_put_in_vreg(
                                                                ctx, v348.0,
                                                            );
                                                            let v352 = constructor_put_in_vreg(
                                                                ctx, v348.1,
                                                            );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v164 =
                                                                C::vstate_from_type(ctx, v11);
                                                            let v353 = constructor_rv_vnmsac_vv(
                                                                ctx, v193, v351, v352, v163, v164,
                                                            );
                                                            let v354 =
                                                                constructor_output_vreg(ctx, v353);
                                                            // Rule at src/isa/riscv64/lower.isle line 287.
                                                            return Some(v354);
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v60 = C::def_inst(ctx, v38.1);
                                                if let Some(v61) = v60 {
                                                    let v62 = &C::inst_data(ctx, v61);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v63,
                                                        arg: v64,
                                                    } = v62
                                                    {
                                                        match v63 {
                                                            &Opcode::Splat => {
                                                                let v170 = C::def_inst(ctx, v64);
                                                                if let Some(v171) = v170 {
                                                                    let v172 =
                                                                        &C::inst_data(ctx, v171);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v173,
                                                                        arg: v174,
                                                                    } = v172 {
                                                                        if let &Opcode::Sextend = v173 {
                                                                            let v76 = C::value_type(ctx, v75);
                                                                            let v232 = C::lane_type(ctx, v76);
                                                                            let v175 = C::value_type(ctx, v174);
                                                                            let v233 = C::ty_equal(ctx, v232, v175);
                                                                            if v233 == true {
                                                                                let v229 = constructor_put_in_vreg(ctx, v75);
                                                                                let v180 = constructor_put_in_xreg(ctx, v174);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v223 = C::ty_half_lanes(ctx, v76);
                                                                                let v224 = v223?;
                                                                                let v225 = C::vstate_from_type(ctx, v224);
                                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                                let v234 = constructor_rv_vwadd_vx(ctx, v229, v180, v163, v226);
                                                                                let v235 = constructor_output_vreg(ctx, v234);
                                                                                // Rule at src/isa/riscv64/lower.isle line 154.
                                                                                return Some(v235);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v229 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v215 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v223 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v224 = v223?;
                                                                let v225 =
                                                                    C::vstate_from_type(ctx, v224);
                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                let v230 = constructor_rv_vwadd_vv(
                                                                    ctx, v229, v215, v163, v226,
                                                                );
                                                                let v231 = constructor_output_vreg(
                                                                    ctx, v230,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 150.
                                                                return Some(v231);
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v229 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v215 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v279 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v215,
                                                                    );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v223 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v224 = v223?;
                                                                let v225 =
                                                                    C::vstate_from_type(ctx, v224);
                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                let v280 = constructor_rv_vwadd_vv(
                                                                    ctx, v229, v279, v163, v226,
                                                                );
                                                                let v281 = constructor_output_vreg(
                                                                    ctx, v280,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 234.
                                                                return Some(v281);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v222 = constructor_put_in_vreg(ctx, v75);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v76 = C::value_type(ctx, v75);
                                                let v223 = C::ty_half_lanes(ctx, v76);
                                                let v224 = v223?;
                                                let v225 = C::vstate_from_type(ctx, v224);
                                                let v226 = C::vstate_mf2(ctx, v225);
                                                let v227 = constructor_rv_vwadd_wv(
                                                    ctx, v193, v222, v163, v226,
                                                );
                                                let v228 = constructor_output_vreg(ctx, v227);
                                                // Rule at src/isa/riscv64/lower.isle line 147.
                                                return Some(v228);
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v60 = C::def_inst(ctx, v38.1);
                                                if let Some(v61) = v60 {
                                                    let v62 = &C::inst_data(ctx, v61);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v63,
                                                        arg: v64,
                                                    } = v62
                                                    {
                                                        match v63 {
                                                            &Opcode::Splat => {
                                                                let v170 = C::def_inst(ctx, v64);
                                                                if let Some(v171) = v170 {
                                                                    let v172 =
                                                                        &C::inst_data(ctx, v171);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v173,
                                                                        arg: v174,
                                                                    } = v172 {
                                                                        if let &Opcode::Sextend = v173 {
                                                                            let v76 = C::value_type(ctx, v75);
                                                                            let v232 = C::lane_type(ctx, v76);
                                                                            let v175 = C::value_type(ctx, v174);
                                                                            let v233 = C::ty_equal(ctx, v232, v175);
                                                                            if v233 == true {
                                                                                let v229 = constructor_put_in_vreg(ctx, v75);
                                                                                let v247 = constructor_gen_slidedown_half(ctx, v76, v229);
                                                                                let v252 = constructor_put_in_xreg(ctx, v174);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v223 = C::ty_half_lanes(ctx, v76);
                                                                                let v224 = v223?;
                                                                                let v225 = C::vstate_from_type(ctx, v224);
                                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                                let v253 = constructor_rv_vwadd_vx(ctx, v247, v252, v163, v226);
                                                                                let v254 = constructor_output_vreg(ctx, v253);
                                                                                // Rule at src/isa/riscv64/lower.isle line 177.
                                                                                return Some(v254);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v229 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v247 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v229,
                                                                    );
                                                                let v248 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v223 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v224 = v223?;
                                                                let v225 =
                                                                    C::vstate_from_type(ctx, v224);
                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                let v282 = constructor_rv_vwadd_vv(
                                                                    ctx, v247, v248, v163, v226,
                                                                );
                                                                let v283 = constructor_output_vreg(
                                                                    ctx, v282,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 238.
                                                                return Some(v283);
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v229 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v247 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v229,
                                                                    );
                                                                let v248 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v249 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v248,
                                                                    );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v223 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v224 = v223?;
                                                                let v225 =
                                                                    C::vstate_from_type(ctx, v224);
                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                let v250 = constructor_rv_vwadd_vv(
                                                                    ctx, v247, v249, v163, v226,
                                                                );
                                                                let v251 = constructor_output_vreg(
                                                                    ctx, v250,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 173.
                                                                return Some(v251);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v222 = constructor_put_in_vreg(ctx, v75);
                                                let v76 = C::value_type(ctx, v75);
                                                let v244 =
                                                    constructor_gen_slidedown_half(ctx, v76, v222);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v223 = C::ty_half_lanes(ctx, v76);
                                                let v224 = v223?;
                                                let v225 = C::vstate_from_type(ctx, v224);
                                                let v226 = C::vstate_mf2(ctx, v225);
                                                let v245 = constructor_rv_vwadd_wv(
                                                    ctx, v193, v244, v163, v226,
                                                );
                                                let v246 = constructor_output_vreg(ctx, v245);
                                                // Rule at src/isa/riscv64/lower.isle line 170.
                                                return Some(v246);
                                            }
                                            &Opcode::UwidenLow => {
                                                let v60 = C::def_inst(ctx, v38.1);
                                                if let Some(v61) = v60 {
                                                    let v62 = &C::inst_data(ctx, v61);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v63,
                                                        arg: v64,
                                                    } = v62
                                                    {
                                                        match v63 {
                                                            &Opcode::Splat => {
                                                                let v170 = C::def_inst(ctx, v64);
                                                                if let Some(v171) = v170 {
                                                                    let v172 =
                                                                        &C::inst_data(ctx, v171);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v173,
                                                                        arg: v174,
                                                                    } = v172 {
                                                                        if let &Opcode::Uextend = v173 {
                                                                            let v76 = C::value_type(ctx, v75);
                                                                            let v232 = C::lane_type(ctx, v76);
                                                                            let v175 = C::value_type(ctx, v174);
                                                                            let v233 = C::ty_equal(ctx, v232, v175);
                                                                            if v233 == true {
                                                                                let v229 = constructor_put_in_vreg(ctx, v75);
                                                                                let v180 = constructor_put_in_xreg(ctx, v174);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v223 = C::ty_half_lanes(ctx, v76);
                                                                                let v224 = v223?;
                                                                                let v225 = C::vstate_from_type(ctx, v224);
                                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                                let v265 = constructor_rv_vwaddu_vx(ctx, v229, v180, v163, v226);
                                                                                let v266 = constructor_output_vreg(ctx, v265);
                                                                                // Rule at src/isa/riscv64/lower.isle line 199.
                                                                                return Some(v266);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v229 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v215 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v223 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v224 = v223?;
                                                                let v225 =
                                                                    C::vstate_from_type(ctx, v224);
                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                let v263 = constructor_rv_vwaddu_vv(
                                                                    ctx, v229, v215, v163, v226,
                                                                );
                                                                let v264 = constructor_output_vreg(
                                                                    ctx, v263,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 195.
                                                                return Some(v264);
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v229 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v215 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v279 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v215,
                                                                    );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v223 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v224 = v223?;
                                                                let v225 =
                                                                    C::vstate_from_type(ctx, v224);
                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                let v284 = constructor_rv_vwaddu_vv(
                                                                    ctx, v229, v279, v163, v226,
                                                                );
                                                                let v285 = constructor_output_vreg(
                                                                    ctx, v284,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 244.
                                                                return Some(v285);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v222 = constructor_put_in_vreg(ctx, v75);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v76 = C::value_type(ctx, v75);
                                                let v223 = C::ty_half_lanes(ctx, v76);
                                                let v224 = v223?;
                                                let v225 = C::vstate_from_type(ctx, v224);
                                                let v226 = C::vstate_mf2(ctx, v225);
                                                let v261 = constructor_rv_vwaddu_wv(
                                                    ctx, v193, v222, v163, v226,
                                                );
                                                let v262 = constructor_output_vreg(ctx, v261);
                                                // Rule at src/isa/riscv64/lower.isle line 192.
                                                return Some(v262);
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v60 = C::def_inst(ctx, v38.1);
                                                if let Some(v61) = v60 {
                                                    let v62 = &C::inst_data(ctx, v61);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v63,
                                                        arg: v64,
                                                    } = v62
                                                    {
                                                        match v63 {
                                                            &Opcode::Splat => {
                                                                let v170 = C::def_inst(ctx, v64);
                                                                if let Some(v171) = v170 {
                                                                    let v172 =
                                                                        &C::inst_data(ctx, v171);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v173,
                                                                        arg: v174,
                                                                    } = v172 {
                                                                        if let &Opcode::Uextend = v173 {
                                                                            let v76 = C::value_type(ctx, v75);
                                                                            let v232 = C::lane_type(ctx, v76);
                                                                            let v175 = C::value_type(ctx, v174);
                                                                            let v233 = C::ty_equal(ctx, v232, v175);
                                                                            if v233 == true {
                                                                                let v229 = constructor_put_in_vreg(ctx, v75);
                                                                                let v247 = constructor_gen_slidedown_half(ctx, v76, v229);
                                                                                let v252 = constructor_put_in_xreg(ctx, v174);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v223 = C::ty_half_lanes(ctx, v76);
                                                                                let v224 = v223?;
                                                                                let v225 = C::vstate_from_type(ctx, v224);
                                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                                let v275 = constructor_rv_vwaddu_vx(ctx, v247, v252, v163, v226);
                                                                                let v276 = constructor_output_vreg(ctx, v275);
                                                                                // Rule at src/isa/riscv64/lower.isle line 222.
                                                                                return Some(v276);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v229 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v247 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v229,
                                                                    );
                                                                let v248 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v223 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v224 = v223?;
                                                                let v225 =
                                                                    C::vstate_from_type(ctx, v224);
                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                let v286 = constructor_rv_vwaddu_vv(
                                                                    ctx, v247, v248, v163, v226,
                                                                );
                                                                let v287 = constructor_output_vreg(
                                                                    ctx, v286,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 248.
                                                                return Some(v287);
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v229 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v247 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v229,
                                                                    );
                                                                let v248 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v249 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v248,
                                                                    );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v223 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v224 = v223?;
                                                                let v225 =
                                                                    C::vstate_from_type(ctx, v224);
                                                                let v226 = C::vstate_mf2(ctx, v225);
                                                                let v273 = constructor_rv_vwaddu_vv(
                                                                    ctx, v247, v249, v163, v226,
                                                                );
                                                                let v274 = constructor_output_vreg(
                                                                    ctx, v273,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 218.
                                                                return Some(v274);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v222 = constructor_put_in_vreg(ctx, v75);
                                                let v76 = C::value_type(ctx, v75);
                                                let v244 =
                                                    constructor_gen_slidedown_half(ctx, v76, v222);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v223 = C::ty_half_lanes(ctx, v76);
                                                let v224 = v223?;
                                                let v225 = C::vstate_from_type(ctx, v224);
                                                let v226 = C::vstate_mf2(ctx, v225);
                                                let v271 = constructor_rv_vwaddu_wv(
                                                    ctx, v193, v244, v163, v226,
                                                );
                                                let v272 = constructor_output_vreg(ctx, v271);
                                                // Rule at src/isa/riscv64/lower.isle line 215.
                                                return Some(v272);
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                match v62 {
                                    &InstructionData::Binary {
                                        opcode: ref v80,
                                        args: ref v81,
                                    } => {
                                        if let &Opcode::Imul = v80 {
                                            let v82 = C::unpack_value_array_2(ctx, v81);
                                            let v114 = C::def_inst(ctx, v82.0);
                                            if let Some(v115) = v114 {
                                                let v116 = &C::inst_data(ctx, v115);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v117,
                                                    arg: v118,
                                                } = v116
                                                {
                                                    if let &Opcode::Splat = v117 {
                                                        let v161 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v300 =
                                                            constructor_put_in_vreg(ctx, v82.1);
                                                        let v301 =
                                                            constructor_put_in_xreg(ctx, v118);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v302 = constructor_rv_vmacc_vx(
                                                            ctx, v161, v300, v301, v163, v164,
                                                        );
                                                        let v303 =
                                                            constructor_output_vreg(ctx, v302);
                                                        // Rule at src/isa/riscv64/lower.isle line 264.
                                                        return Some(v303);
                                                    }
                                                }
                                            }
                                            let v292 = C::def_inst(ctx, v82.1);
                                            if let Some(v293) = v292 {
                                                let v294 = &C::inst_data(ctx, v293);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v295,
                                                    arg: v296,
                                                } = v294
                                                {
                                                    if let &Opcode::Splat = v295 {
                                                        let v161 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v288 =
                                                            constructor_put_in_vreg(ctx, v82.0);
                                                        let v297 =
                                                            constructor_put_in_xreg(ctx, v296);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v298 = constructor_rv_vmacc_vx(
                                                            ctx, v161, v288, v297, v163, v164,
                                                        );
                                                        let v299 =
                                                            constructor_output_vreg(ctx, v298);
                                                        // Rule at src/isa/riscv64/lower.isle line 261.
                                                        return Some(v299);
                                                    }
                                                }
                                            }
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v288 = constructor_put_in_vreg(ctx, v82.0);
                                            let v289 = constructor_put_in_vreg(ctx, v82.1);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v290 = constructor_rv_vmacc_vv(
                                                ctx, v161, v288, v289, v163, v164,
                                            );
                                            let v291 = constructor_output_vreg(ctx, v290);
                                            // Rule at src/isa/riscv64/lower.isle line 258.
                                            return Some(v291);
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } => {
                                        match v63 {
                                            &Opcode::Splat => {
                                                let v187 = C::i64_from_iconst(ctx, v64);
                                                if let Some(v188) = v187 {
                                                    let v189 = C::imm5_from_i64(ctx, v188);
                                                    if let Some(v190) = v189 {
                                                        let v161 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v191 = constructor_rv_vadd_vi(
                                                            ctx, v161, v190, v163, v164,
                                                        );
                                                        let v192 =
                                                            constructor_output_vreg(ctx, v191);
                                                        // Rule at src/isa/riscv64/lower.isle line 122.
                                                        return Some(v192);
                                                    }
                                                }
                                                let v170 = C::def_inst(ctx, v64);
                                                if let Some(v171) = v170 {
                                                    let v172 = &C::inst_data(ctx, v171);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v173,
                                                        arg: v174,
                                                    } = v172
                                                    {
                                                        match v173 {
                                                            &Opcode::Uextend => {
                                                                let v176 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        C::lane_type(ctx, v177);
                                                                    let v175 =
                                                                        C::value_type(ctx, v174);
                                                                    let v179 = C::ty_equal(
                                                                        ctx, v178, v175,
                                                                    );
                                                                    if v179 == true {
                                                                        let v161 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v180 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v174,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v181 =
                                                                            C::vstate_from_type(
                                                                                ctx, v177,
                                                                            );
                                                                        let v182 = C::vstate_mf2(
                                                                            ctx, v181,
                                                                        );
                                                                        let v185 = constructor_rv_vwaddu_wx(ctx, v161, v180, v163, v182);
                                                                        let v186 =
                                                                            constructor_output_vreg(
                                                                                ctx, v185,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 117.
                                                                        return Some(v186);
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v176 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        C::lane_type(ctx, v177);
                                                                    let v175 =
                                                                        C::value_type(ctx, v174);
                                                                    let v179 = C::ty_equal(
                                                                        ctx, v178, v175,
                                                                    );
                                                                    if v179 == true {
                                                                        let v161 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v180 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v174,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v181 =
                                                                            C::vstate_from_type(
                                                                                ctx, v177,
                                                                            );
                                                                        let v182 = C::vstate_mf2(
                                                                            ctx, v181,
                                                                        );
                                                                        let v183 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v161, v180,
                                                                                v163, v182,
                                                                            );
                                                                        let v184 =
                                                                            constructor_output_vreg(
                                                                                ctx, v183,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 112.
                                                                        return Some(v184);
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v167 = constructor_put_in_xreg(ctx, v64);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v168 = constructor_rv_vadd_vx(
                                                    ctx, v161, v167, v163, v164,
                                                );
                                                let v169 = constructor_output_vreg(ctx, v168);
                                                // Rule at src/isa/riscv64/lower.isle line 109.
                                                return Some(v169);
                                            }
                                            &Opcode::Ineg => {
                                                let v170 = C::def_inst(ctx, v64);
                                                if let Some(v171) = v170 {
                                                    let v172 = &C::inst_data(ctx, v171);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v320,
                                                        args: ref v321,
                                                    } = v172
                                                    {
                                                        if let &Opcode::Imul = v320 {
                                                            let v322 =
                                                                C::unpack_value_array_2(ctx, v321);
                                                            let v337 = C::def_inst(ctx, v322.0);
                                                            if let Some(v338) = v337 {
                                                                let v339 = &C::inst_data(ctx, v338);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v340,
                                                                    arg: v341,
                                                                } = v339
                                                                {
                                                                    if let &Opcode::Splat = v340 {
                                                                        let v161 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v342 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v322.1,
                                                                            );
                                                                        let v343 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v341,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v164 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v344 = constructor_rv_vnmsac_vx(ctx, v161, v342, v343, v163, v164);
                                                                        let v345 =
                                                                            constructor_output_vreg(
                                                                                ctx, v344,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 284.
                                                                        return Some(v345);
                                                                    }
                                                                }
                                                            }
                                                            let v329 = C::def_inst(ctx, v322.1);
                                                            if let Some(v330) = v329 {
                                                                let v331 = &C::inst_data(ctx, v330);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v332,
                                                                    arg: v333,
                                                                } = v331
                                                                {
                                                                    if let &Opcode::Splat = v332 {
                                                                        let v161 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v325 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v322.0,
                                                                            );
                                                                        let v334 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v333,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v164 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v335 = constructor_rv_vnmsac_vx(ctx, v161, v325, v334, v163, v164);
                                                                        let v336 =
                                                                            constructor_output_vreg(
                                                                                ctx, v335,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 281.
                                                                        return Some(v336);
                                                                    }
                                                                }
                                                            }
                                                            let v161 =
                                                                constructor_put_in_vreg(ctx, v38.0);
                                                            let v325 = constructor_put_in_vreg(
                                                                ctx, v322.0,
                                                            );
                                                            let v326 = constructor_put_in_vreg(
                                                                ctx, v322.1,
                                                            );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v164 =
                                                                C::vstate_from_type(ctx, v11);
                                                            let v327 = constructor_rv_vnmsac_vv(
                                                                ctx, v161, v325, v326, v163, v164,
                                                            );
                                                            let v328 =
                                                                constructor_output_vreg(ctx, v327);
                                                            // Rule at src/isa/riscv64/lower.isle line 278.
                                                            return Some(v328);
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v215 = constructor_put_in_vreg(ctx, v64);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v65 = C::value_type(ctx, v64);
                                                let v216 = C::ty_half_lanes(ctx, v65);
                                                let v217 = v216?;
                                                let v218 = C::vstate_from_type(ctx, v217);
                                                let v219 = C::vstate_mf2(ctx, v218);
                                                let v220 = constructor_rv_vwadd_wv(
                                                    ctx, v161, v215, v163, v219,
                                                );
                                                let v221 = constructor_output_vreg(ctx, v220);
                                                // Rule at src/isa/riscv64/lower.isle line 144.
                                                return Some(v221);
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v215 = constructor_put_in_vreg(ctx, v64);
                                                let v65 = C::value_type(ctx, v64);
                                                let v241 =
                                                    constructor_gen_slidedown_half(ctx, v65, v215);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v216 = C::ty_half_lanes(ctx, v65);
                                                let v217 = v216?;
                                                let v218 = C::vstate_from_type(ctx, v217);
                                                let v219 = C::vstate_mf2(ctx, v218);
                                                let v242 = constructor_rv_vwadd_wv(
                                                    ctx, v161, v241, v163, v219,
                                                );
                                                let v243 = constructor_output_vreg(ctx, v242);
                                                // Rule at src/isa/riscv64/lower.isle line 167.
                                                return Some(v243);
                                            }
                                            &Opcode::UwidenLow => {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v215 = constructor_put_in_vreg(ctx, v64);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v65 = C::value_type(ctx, v64);
                                                let v216 = C::ty_half_lanes(ctx, v65);
                                                let v217 = v216?;
                                                let v218 = C::vstate_from_type(ctx, v217);
                                                let v219 = C::vstate_mf2(ctx, v218);
                                                let v259 = constructor_rv_vwaddu_wv(
                                                    ctx, v161, v215, v163, v219,
                                                );
                                                let v260 = constructor_output_vreg(ctx, v259);
                                                // Rule at src/isa/riscv64/lower.isle line 189.
                                                return Some(v260);
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v215 = constructor_put_in_vreg(ctx, v64);
                                                let v65 = C::value_type(ctx, v64);
                                                let v241 =
                                                    constructor_gen_slidedown_half(ctx, v65, v215);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v216 = C::ty_half_lanes(ctx, v65);
                                                let v217 = v216?;
                                                let v218 = C::vstate_from_type(ctx, v217);
                                                let v219 = C::vstate_mf2(ctx, v218);
                                                let v269 = constructor_rv_vwaddu_wv(
                                                    ctx, v161, v241, v163, v219,
                                                );
                                                let v270 = constructor_output_vreg(ctx, v269);
                                                // Rule at src/isa/riscv64/lower.isle line 212.
                                                return Some(v270);
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v165 = constructor_rv_vadd_vv(ctx, v161, v162, v163, v164);
                            let v166 = constructor_output_vreg(ctx, v165);
                            // Rule at src/isa/riscv64/lower.isle line 106.
                            return Some(v166);
                        }
                        match v3 {
                            I64 => {
                                let v66 = C::has_zba(ctx);
                                if v66 == true {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v71 = C::def_inst(ctx, v38.0);
                                    if let Some(v72) = v71 {
                                        let v73 = &C::inst_data(ctx, v72);
                                        if let &InstructionData::Binary {
                                            opcode: ref v97,
                                            args: ref v98,
                                        } = v73
                                        {
                                            if let &Opcode::Ishl = v97 {
                                                let v99 = C::unpack_value_array_2(ctx, v98);
                                                let v102 = C::maybe_uextend(ctx, v99.1);
                                                if let Some(v103) = v102 {
                                                    let v104 = C::def_inst(ctx, v103);
                                                    if let Some(v105) = v104 {
                                                        let v106 = &C::inst_data(ctx, v105);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v107,
                                                            imm: v108,
                                                        } = v106
                                                        {
                                                            if let &Opcode::Iconst = v107 {
                                                                let v125 = C::def_inst(ctx, v99.0);
                                                                if let Some(v126) = v125 {
                                                                    let v127 =
                                                                        &C::inst_data(ctx, v126);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v128,
                                                                        arg: v129,
                                                                    } = v127 {
                                                                        if let &Opcode::Uextend = v128 {
                                                                            let v130 = C::value_type(ctx, v129);
                                                                            if v130 == I32 {
                                                                                let v131 = &constructor_match_shnadd_uw(ctx, v108);
                                                                                if let Some(v132) = v131 {
                                                                                    let v133 = C::put_in_reg(ctx, v129);
                                                                                    let v57 = C::put_in_reg(ctx, v38.1);
                                                                                    let v134 = constructor_alu_rrr(ctx, v132, v133, v57);
                                                                                    let v135 = constructor_output_reg(ctx, v134);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 89.
                                                                                    return Some(v135);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::Binary {
                                            opcode: ref v80,
                                            args: ref v81,
                                        } = v62
                                        {
                                            if let &Opcode::Ishl = v80 {
                                                let v82 = C::unpack_value_array_2(ctx, v81);
                                                let v85 = C::maybe_uextend(ctx, v82.1);
                                                if let Some(v86) = v85 {
                                                    let v87 = C::def_inst(ctx, v86);
                                                    if let Some(v88) = v87 {
                                                        let v89 = &C::inst_data(ctx, v88);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v90,
                                                            imm: v91,
                                                        } = v89
                                                        {
                                                            if let &Opcode::Iconst = v90 {
                                                                let v114 = C::def_inst(ctx, v82.0);
                                                                if let Some(v115) = v114 {
                                                                    let v116 =
                                                                        &C::inst_data(ctx, v115);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v117,
                                                                        arg: v118,
                                                                    } = v116 {
                                                                        if let &Opcode::Uextend = v117 {
                                                                            let v119 = C::value_type(ctx, v118);
                                                                            if v119 == I32 {
                                                                                let v120 = &constructor_match_shnadd_uw(ctx, v91);
                                                                                if let Some(v121) = v120 {
                                                                                    let v122 = C::put_in_reg(ctx, v118);
                                                                                    let v50 = C::put_in_reg(ctx, v38.0);
                                                                                    let v123 = constructor_alu_rrr(ctx, v121, v122, v50);
                                                                                    let v124 = constructor_output_reg(ctx, v123);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 84.
                                                                                    return Some(v124);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(v72) = v71 {
                                        let v73 = &C::inst_data(ctx, v72);
                                        match v73 {
                                            &InstructionData::Binary {
                                                opcode: ref v97,
                                                args: ref v98,
                                            } => {
                                                if let &Opcode::Ishl = v97 {
                                                    let v99 = C::unpack_value_array_2(ctx, v98);
                                                    let v102 = C::maybe_uextend(ctx, v99.1);
                                                    if let Some(v103) = v102 {
                                                        let v104 = C::def_inst(ctx, v103);
                                                        if let Some(v105) = v104 {
                                                            let v106 = &C::inst_data(ctx, v105);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v107,
                                                                imm: v108,
                                                            } = v106
                                                            {
                                                                if let &Opcode::Iconst = v107 {
                                                                    let v109 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v108,
                                                                        );
                                                                    if let Some(v110) = v109 {
                                                                        let v111 = C::put_in_reg(
                                                                            ctx, v99.0,
                                                                        );
                                                                        let v57 = C::put_in_reg(
                                                                            ctx, v38.1,
                                                                        );
                                                                        let v112 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v110, v111,
                                                                                v57,
                                                                            );
                                                                        let v113 =
                                                                            constructor_output_reg(
                                                                                ctx, v112,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 67.
                                                                        return Some(v113);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v74,
                                                arg: v75,
                                            } => {
                                                if let &Opcode::Uextend = v74 {
                                                    let v76 = C::value_type(ctx, v75);
                                                    if v76 == I32 {
                                                        let v77 = constructor_put_in_xreg(ctx, v75);
                                                        let v42 =
                                                            constructor_put_in_xreg(ctx, v38.1);
                                                        let v78 =
                                                            constructor_rv_adduw(ctx, v77, v42);
                                                        let v79 = constructor_output_xreg(ctx, v78);
                                                        // Rule at src/isa/riscv64/lower.isle line 52.
                                                        return Some(v79);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        match v62 {
                                            &InstructionData::Binary {
                                                opcode: ref v80,
                                                args: ref v81,
                                            } => {
                                                if let &Opcode::Ishl = v80 {
                                                    let v82 = C::unpack_value_array_2(ctx, v81);
                                                    let v85 = C::maybe_uextend(ctx, v82.1);
                                                    if let Some(v86) = v85 {
                                                        let v87 = C::def_inst(ctx, v86);
                                                        if let Some(v88) = v87 {
                                                            let v89 = &C::inst_data(ctx, v88);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v90,
                                                                imm: v91,
                                                            } = v89
                                                            {
                                                                if let &Opcode::Iconst = v90 {
                                                                    let v92 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v91,
                                                                        );
                                                                    if let Some(v93) = v92 {
                                                                        let v94 = C::put_in_reg(
                                                                            ctx, v82.0,
                                                                        );
                                                                        let v50 = C::put_in_reg(
                                                                            ctx, v38.0,
                                                                        );
                                                                        let v95 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v93, v94, v50,
                                                                            );
                                                                        let v96 =
                                                                            constructor_output_reg(
                                                                                ctx, v95,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 62.
                                                                        return Some(v96);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v63,
                                                arg: v64,
                                            } => {
                                                if let &Opcode::Uextend = v63 {
                                                    let v65 = C::value_type(ctx, v64);
                                                    if v65 == I32 {
                                                        let v67 = constructor_put_in_xreg(ctx, v64);
                                                        let v68 =
                                                            constructor_put_in_xreg(ctx, v38.0);
                                                        let v69 =
                                                            constructor_rv_adduw(ctx, v67, v68);
                                                        let v70 = constructor_output_xreg(ctx, v69);
                                                        // Rule at src/isa/riscv64/lower.isle line 48.
                                                        return Some(v70);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v136 = C::put_in_regs(ctx, v38.0);
                                let v138 = C::value_regs_get(ctx, v136, 0x0);
                                let v139 = C::xreg_new(ctx, v138);
                                let v140 = C::put_in_regs(ctx, v38.1);
                                let v141 = C::value_regs_get(ctx, v140, 0x0);
                                let v142 = C::xreg_new(ctx, v141);
                                let v143 = constructor_rv_add(ctx, v139, v142);
                                let v144 = C::put_in_regs(ctx, v38.1);
                                let v145 = C::value_regs_get(ctx, v144, 0x0);
                                let v146 = C::xreg_new(ctx, v145);
                                let v147 = constructor_rv_sltu(ctx, v143, v146);
                                let v148 = C::put_in_regs(ctx, v38.0);
                                let v150 = C::value_regs_get(ctx, v148, 0x1);
                                let v151 = C::xreg_new(ctx, v150);
                                let v152 = C::put_in_regs(ctx, v38.1);
                                let v153 = C::value_regs_get(ctx, v152, 0x1);
                                let v154 = C::xreg_new(ctx, v153);
                                let v155 = constructor_rv_add(ctx, v151, v154);
                                let v156 = constructor_rv_add(ctx, v155, v147);
                                let v157 = C::xreg_to_reg(ctx, v143);
                                let v158 = C::xreg_to_reg(ctx, v156);
                                let v159 = C::value_regs(ctx, v157, v158);
                                let v160 = C::output(ctx, v159);
                                // Rule at src/isa/riscv64/lower.isle line 95.
                                return Some(v160);
                            }
                            _ => {}
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v53 = C::i64_from_iconst(ctx, v38.0);
                            if let Some(v54) = v53 {
                                let v55 = C::imm12_from_i64(ctx, v54);
                                if let Some(v56) = v55 {
                                    let v49 = &constructor_select_addi(ctx, v35);
                                    let v57 = C::put_in_reg(ctx, v38.1);
                                    let v58 = constructor_alu_rr_imm12(ctx, v49, v57, v56);
                                    let v59 = constructor_output_reg(ctx, v58);
                                    // Rule at src/isa/riscv64/lower.isle line 43.
                                    return Some(v59);
                                }
                            }
                            let v45 = C::i64_from_iconst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = C::imm12_from_i64(ctx, v46);
                                if let Some(v48) = v47 {
                                    let v49 = &constructor_select_addi(ctx, v35);
                                    let v50 = C::put_in_reg(ctx, v38.0);
                                    let v51 = constructor_alu_rr_imm12(ctx, v49, v50, v48);
                                    let v52 = constructor_output_reg(ctx, v51);
                                    // Rule at src/isa/riscv64/lower.isle line 40.
                                    return Some(v52);
                                }
                            }
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v43 = constructor_rv_add(ctx, v41, v42);
                            let v44 = constructor_output_xreg(ctx, v43);
                            // Rule at src/isa/riscv64/lower.isle line 36.
                            return Some(v44);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    match v74 {
                                        &Opcode::Splat => {
                                            let v209 = C::i64_from_iconst(ctx, v75);
                                            if let Some(v210) = v209 {
                                                let v211 = C::imm5_from_i64(ctx, v210);
                                                if let Some(v212) = v211 {
                                                    let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                    let v163 = &constructor_unmasked(ctx);
                                                    let v164 = C::vstate_from_type(ctx, v11);
                                                    let v409 = constructor_rv_vrsub_vi(
                                                        ctx, v193, v212, v163, v164,
                                                    );
                                                    let v410 = constructor_output_vreg(ctx, v409);
                                                    // Rule at src/isa/riscv64/lower.isle line 336.
                                                    return Some(v410);
                                                }
                                            }
                                            let v193 = constructor_put_in_vreg(ctx, v38.1);
                                            let v194 = constructor_put_in_xreg(ctx, v75);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v407 = constructor_rv_vrsub_vx(
                                                ctx, v193, v194, v163, v164,
                                            );
                                            let v408 = constructor_output_vreg(ctx, v407);
                                            // Rule at src/isa/riscv64/lower.isle line 333.
                                            return Some(v408);
                                        }
                                        &Opcode::SwidenLow => {
                                            let v60 = C::def_inst(ctx, v38.1);
                                            if let Some(v61) = v60 {
                                                let v62 = &C::inst_data(ctx, v61);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v63,
                                                    arg: v64,
                                                } = v62
                                                {
                                                    match v63 {
                                                        &Opcode::Splat => {
                                                            let v170 = C::def_inst(ctx, v64);
                                                            if let Some(v171) = v170 {
                                                                let v172 = &C::inst_data(ctx, v171);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v173,
                                                                    arg: v174,
                                                                } = v172
                                                                {
                                                                    if let &Opcode::Sextend = v173 {
                                                                        let v76 =
                                                                            C::value_type(ctx, v75);
                                                                        let v232 =
                                                                            C::lane_type(ctx, v76);
                                                                        let v175 = C::value_type(
                                                                            ctx, v174,
                                                                        );
                                                                        let v233 = C::ty_equal(
                                                                            ctx, v232, v175,
                                                                        );
                                                                        if v233 == true {
                                                                            let v229 = constructor_put_in_vreg(ctx, v75);
                                                                            let v180 = constructor_put_in_xreg(ctx, v174);
                                                                            let v163 = &constructor_unmasked(ctx);
                                                                            let v223 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v76,
                                                                                );
                                                                            let v224 = v223?;
                                                                            let v225 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v224,
                                                                                );
                                                                            let v226 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v225,
                                                                                );
                                                                            let v415 = constructor_rv_vwsub_vx(ctx, v229, v180, v163, v226);
                                                                            let v416 = constructor_output_vreg(ctx, v415);
                                                                            // Rule at src/isa/riscv64/lower.isle line 349.
                                                                            return Some(v416);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenLow => {
                                                            let v229 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v215 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v223 = C::ty_half_lanes(ctx, v76);
                                                            let v224 = v223?;
                                                            let v225 =
                                                                C::vstate_from_type(ctx, v224);
                                                            let v226 = C::vstate_mf2(ctx, v225);
                                                            let v413 = constructor_rv_vwsub_vv(
                                                                ctx, v229, v215, v163, v226,
                                                            );
                                                            let v414 =
                                                                constructor_output_vreg(ctx, v413);
                                                            // Rule at src/isa/riscv64/lower.isle line 345.
                                                            return Some(v414);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v229 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v215 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v279 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v215,
                                                                );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v223 = C::ty_half_lanes(ctx, v76);
                                                            let v224 = v223?;
                                                            let v225 =
                                                                C::vstate_from_type(ctx, v224);
                                                            let v226 = C::vstate_mf2(ctx, v225);
                                                            let v435 = constructor_rv_vwsub_vv(
                                                                ctx, v229, v279, v163, v226,
                                                            );
                                                            let v436 =
                                                                constructor_output_vreg(ctx, v435);
                                                            // Rule at src/isa/riscv64/lower.isle line 400.
                                                            return Some(v436);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v60 = C::def_inst(ctx, v38.1);
                                            if let Some(v61) = v60 {
                                                let v62 = &C::inst_data(ctx, v61);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v63,
                                                    arg: v64,
                                                } = v62
                                                {
                                                    match v63 {
                                                        &Opcode::Splat => {
                                                            let v170 = C::def_inst(ctx, v64);
                                                            if let Some(v171) = v170 {
                                                                let v172 = &C::inst_data(ctx, v171);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v173,
                                                                    arg: v174,
                                                                } = v172
                                                                {
                                                                    if let &Opcode::Sextend = v173 {
                                                                        let v76 =
                                                                            C::value_type(ctx, v75);
                                                                        let v232 =
                                                                            C::lane_type(ctx, v76);
                                                                        let v175 = C::value_type(
                                                                            ctx, v174,
                                                                        );
                                                                        let v233 = C::ty_equal(
                                                                            ctx, v232, v175,
                                                                        );
                                                                        if v233 == true {
                                                                            let v229 = constructor_put_in_vreg(ctx, v75);
                                                                            let v247 = constructor_gen_slidedown_half(ctx, v76, v229);
                                                                            let v252 = constructor_put_in_xreg(ctx, v174);
                                                                            let v163 = &constructor_unmasked(ctx);
                                                                            let v223 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v76,
                                                                                );
                                                                            let v224 = v223?;
                                                                            let v225 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v224,
                                                                                );
                                                                            let v226 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v225,
                                                                                );
                                                                            let v421 = constructor_rv_vwsub_vx(ctx, v247, v252, v163, v226);
                                                                            let v422 = constructor_output_vreg(ctx, v421);
                                                                            // Rule at src/isa/riscv64/lower.isle line 364.
                                                                            return Some(v422);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenLow => {
                                                            let v229 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v247 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v229,
                                                                );
                                                            let v248 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v223 = C::ty_half_lanes(ctx, v76);
                                                            let v224 = v223?;
                                                            let v225 =
                                                                C::vstate_from_type(ctx, v224);
                                                            let v226 = C::vstate_mf2(ctx, v225);
                                                            let v437 = constructor_rv_vwsub_vv(
                                                                ctx, v247, v248, v163, v226,
                                                            );
                                                            let v438 =
                                                                constructor_output_vreg(ctx, v437);
                                                            // Rule at src/isa/riscv64/lower.isle line 404.
                                                            return Some(v438);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v229 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v247 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v229,
                                                                );
                                                            let v248 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v249 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v248,
                                                                );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v223 = C::ty_half_lanes(ctx, v76);
                                                            let v224 = v223?;
                                                            let v225 =
                                                                C::vstate_from_type(ctx, v224);
                                                            let v226 = C::vstate_mf2(ctx, v225);
                                                            let v419 = constructor_rv_vwsub_vv(
                                                                ctx, v247, v249, v163, v226,
                                                            );
                                                            let v420 =
                                                                constructor_output_vreg(ctx, v419);
                                                            // Rule at src/isa/riscv64/lower.isle line 360.
                                                            return Some(v420);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenLow => {
                                            let v60 = C::def_inst(ctx, v38.1);
                                            if let Some(v61) = v60 {
                                                let v62 = &C::inst_data(ctx, v61);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v63,
                                                    arg: v64,
                                                } = v62
                                                {
                                                    match v63 {
                                                        &Opcode::Splat => {
                                                            let v170 = C::def_inst(ctx, v64);
                                                            if let Some(v171) = v170 {
                                                                let v172 = &C::inst_data(ctx, v171);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v173,
                                                                    arg: v174,
                                                                } = v172
                                                                {
                                                                    if let &Opcode::Uextend = v173 {
                                                                        let v76 =
                                                                            C::value_type(ctx, v75);
                                                                        let v232 =
                                                                            C::lane_type(ctx, v76);
                                                                        let v175 = C::value_type(
                                                                            ctx, v174,
                                                                        );
                                                                        let v233 = C::ty_equal(
                                                                            ctx, v232, v175,
                                                                        );
                                                                        if v233 == true {
                                                                            let v229 = constructor_put_in_vreg(ctx, v75);
                                                                            let v180 = constructor_put_in_xreg(ctx, v174);
                                                                            let v163 = &constructor_unmasked(ctx);
                                                                            let v223 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v76,
                                                                                );
                                                                            let v224 = v223?;
                                                                            let v225 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v224,
                                                                                );
                                                                            let v226 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v225,
                                                                                );
                                                                            let v427 = constructor_rv_vwsubu_vx(ctx, v229, v180, v163, v226);
                                                                            let v428 = constructor_output_vreg(ctx, v427);
                                                                            // Rule at src/isa/riscv64/lower.isle line 378.
                                                                            return Some(v428);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v229 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v215 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v223 = C::ty_half_lanes(ctx, v76);
                                                            let v224 = v223?;
                                                            let v225 =
                                                                C::vstate_from_type(ctx, v224);
                                                            let v226 = C::vstate_mf2(ctx, v225);
                                                            let v425 = constructor_rv_vwsubu_vv(
                                                                ctx, v229, v215, v163, v226,
                                                            );
                                                            let v426 =
                                                                constructor_output_vreg(ctx, v425);
                                                            // Rule at src/isa/riscv64/lower.isle line 374.
                                                            return Some(v426);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v229 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v215 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v279 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v215,
                                                                );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v223 = C::ty_half_lanes(ctx, v76);
                                                            let v224 = v223?;
                                                            let v225 =
                                                                C::vstate_from_type(ctx, v224);
                                                            let v226 = C::vstate_mf2(ctx, v225);
                                                            let v439 = constructor_rv_vwsubu_vv(
                                                                ctx, v229, v279, v163, v226,
                                                            );
                                                            let v440 =
                                                                constructor_output_vreg(ctx, v439);
                                                            // Rule at src/isa/riscv64/lower.isle line 410.
                                                            return Some(v440);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v60 = C::def_inst(ctx, v38.1);
                                            if let Some(v61) = v60 {
                                                let v62 = &C::inst_data(ctx, v61);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v63,
                                                    arg: v64,
                                                } = v62
                                                {
                                                    match v63 {
                                                        &Opcode::Splat => {
                                                            let v170 = C::def_inst(ctx, v64);
                                                            if let Some(v171) = v170 {
                                                                let v172 = &C::inst_data(ctx, v171);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v173,
                                                                    arg: v174,
                                                                } = v172
                                                                {
                                                                    if let &Opcode::Uextend = v173 {
                                                                        let v76 =
                                                                            C::value_type(ctx, v75);
                                                                        let v232 =
                                                                            C::lane_type(ctx, v76);
                                                                        let v175 = C::value_type(
                                                                            ctx, v174,
                                                                        );
                                                                        let v233 = C::ty_equal(
                                                                            ctx, v232, v175,
                                                                        );
                                                                        if v233 == true {
                                                                            let v229 = constructor_put_in_vreg(ctx, v75);
                                                                            let v247 = constructor_gen_slidedown_half(ctx, v76, v229);
                                                                            let v252 = constructor_put_in_xreg(ctx, v174);
                                                                            let v163 = &constructor_unmasked(ctx);
                                                                            let v223 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v76,
                                                                                );
                                                                            let v224 = v223?;
                                                                            let v225 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v224,
                                                                                );
                                                                            let v226 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v225,
                                                                                );
                                                                            let v433 = constructor_rv_vwsubu_vx(ctx, v247, v252, v163, v226);
                                                                            let v434 = constructor_output_vreg(ctx, v433);
                                                                            // Rule at src/isa/riscv64/lower.isle line 393.
                                                                            return Some(v434);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v229 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v247 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v229,
                                                                );
                                                            let v248 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v223 = C::ty_half_lanes(ctx, v76);
                                                            let v224 = v223?;
                                                            let v225 =
                                                                C::vstate_from_type(ctx, v224);
                                                            let v226 = C::vstate_mf2(ctx, v225);
                                                            let v441 = constructor_rv_vwsubu_vv(
                                                                ctx, v247, v248, v163, v226,
                                                            );
                                                            let v442 =
                                                                constructor_output_vreg(ctx, v441);
                                                            // Rule at src/isa/riscv64/lower.isle line 414.
                                                            return Some(v442);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v229 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v247 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v229,
                                                                );
                                                            let v248 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v249 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v248,
                                                                );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v223 = C::ty_half_lanes(ctx, v76);
                                                            let v224 = v223?;
                                                            let v225 =
                                                                C::vstate_from_type(ctx, v224);
                                                            let v226 = C::vstate_mf2(ctx, v225);
                                                            let v431 = constructor_rv_vwsubu_vv(
                                                                ctx, v247, v249, v163, v226,
                                                            );
                                                            let v432 =
                                                                constructor_output_vreg(ctx, v431);
                                                            // Rule at src/isa/riscv64/lower.isle line 389.
                                                            return Some(v432);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    match v63 {
                                        &Opcode::Splat => {
                                            let v170 = C::def_inst(ctx, v64);
                                            if let Some(v171) = v170 {
                                                let v172 = &C::inst_data(ctx, v171);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v173,
                                                    arg: v174,
                                                } = v172
                                                {
                                                    match v173 {
                                                        &Opcode::Uextend => {
                                                            let v176 = C::ty_half_width(ctx, v11);
                                                            if let Some(v177) = v176 {
                                                                let v178 = C::lane_type(ctx, v177);
                                                                let v175 = C::value_type(ctx, v174);
                                                                let v179 =
                                                                    C::ty_equal(ctx, v178, v175);
                                                                if v179 == true {
                                                                    let v161 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v38.0,
                                                                        );
                                                                    let v180 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v174,
                                                                        );
                                                                    let v163 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v181 = C::vstate_from_type(
                                                                        ctx, v177,
                                                                    );
                                                                    let v182 =
                                                                        C::vstate_mf2(ctx, v181);
                                                                    let v405 =
                                                                        constructor_rv_vwsubu_wx(
                                                                            ctx, v161, v180, v163,
                                                                            v182,
                                                                        );
                                                                    let v406 =
                                                                        constructor_output_vreg(
                                                                            ctx, v405,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 328.
                                                                    return Some(v406);
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v176 = C::ty_half_width(ctx, v11);
                                                            if let Some(v177) = v176 {
                                                                let v178 = C::lane_type(ctx, v177);
                                                                let v175 = C::value_type(ctx, v174);
                                                                let v179 =
                                                                    C::ty_equal(ctx, v178, v175);
                                                                if v179 == true {
                                                                    let v161 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v38.0,
                                                                        );
                                                                    let v180 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v174,
                                                                        );
                                                                    let v163 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v181 = C::vstate_from_type(
                                                                        ctx, v177,
                                                                    );
                                                                    let v182 =
                                                                        C::vstate_mf2(ctx, v181);
                                                                    let v403 =
                                                                        constructor_rv_vwsub_wx(
                                                                            ctx, v161, v180, v163,
                                                                            v182,
                                                                        );
                                                                    let v404 =
                                                                        constructor_output_vreg(
                                                                            ctx, v403,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 323.
                                                                    return Some(v404);
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v167 = constructor_put_in_xreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v401 =
                                                constructor_rv_vsub_vx(ctx, v161, v167, v163, v164);
                                            let v402 = constructor_output_vreg(ctx, v401);
                                            // Rule at src/isa/riscv64/lower.isle line 320.
                                            return Some(v402);
                                        }
                                        &Opcode::SwidenLow => {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v215 = constructor_put_in_vreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v65 = C::value_type(ctx, v64);
                                            let v216 = C::ty_half_lanes(ctx, v65);
                                            let v217 = v216?;
                                            let v218 = C::vstate_from_type(ctx, v217);
                                            let v219 = C::vstate_mf2(ctx, v218);
                                            let v411 = constructor_rv_vwsub_wv(
                                                ctx, v161, v215, v163, v219,
                                            );
                                            let v412 = constructor_output_vreg(ctx, v411);
                                            // Rule at src/isa/riscv64/lower.isle line 342.
                                            return Some(v412);
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v215 = constructor_put_in_vreg(ctx, v64);
                                            let v65 = C::value_type(ctx, v64);
                                            let v241 =
                                                constructor_gen_slidedown_half(ctx, v65, v215);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v216 = C::ty_half_lanes(ctx, v65);
                                            let v217 = v216?;
                                            let v218 = C::vstate_from_type(ctx, v217);
                                            let v219 = C::vstate_mf2(ctx, v218);
                                            let v417 = constructor_rv_vwsub_wv(
                                                ctx, v161, v241, v163, v219,
                                            );
                                            let v418 = constructor_output_vreg(ctx, v417);
                                            // Rule at src/isa/riscv64/lower.isle line 357.
                                            return Some(v418);
                                        }
                                        &Opcode::UwidenLow => {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v215 = constructor_put_in_vreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v65 = C::value_type(ctx, v64);
                                            let v216 = C::ty_half_lanes(ctx, v65);
                                            let v217 = v216?;
                                            let v218 = C::vstate_from_type(ctx, v217);
                                            let v219 = C::vstate_mf2(ctx, v218);
                                            let v423 = constructor_rv_vwsubu_wv(
                                                ctx, v161, v215, v163, v219,
                                            );
                                            let v424 = constructor_output_vreg(ctx, v423);
                                            // Rule at src/isa/riscv64/lower.isle line 371.
                                            return Some(v424);
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v215 = constructor_put_in_vreg(ctx, v64);
                                            let v65 = C::value_type(ctx, v64);
                                            let v241 =
                                                constructor_gen_slidedown_half(ctx, v65, v215);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v216 = C::ty_half_lanes(ctx, v65);
                                            let v217 = v216?;
                                            let v218 = C::vstate_from_type(ctx, v217);
                                            let v219 = C::vstate_mf2(ctx, v218);
                                            let v429 = constructor_rv_vwsubu_wv(
                                                ctx, v161, v241, v163, v219,
                                            );
                                            let v430 = constructor_output_vreg(ctx, v429);
                                            // Rule at src/isa/riscv64/lower.isle line 386.
                                            return Some(v430);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v399 = constructor_rv_vsub_vv(ctx, v161, v162, v163, v164);
                            let v400 = constructor_output_vreg(ctx, v399);
                            // Rule at src/isa/riscv64/lower.isle line 317.
                            return Some(v400);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v396 = C::put_in_regs(ctx, v38.1);
                            let v397 = constructor_i128_sub(ctx, v136, v396);
                            let v398 = C::output(ctx, v397);
                            // Rule at src/isa/riscv64/lower.isle line 313.
                            return Some(v398);
                        }
                        let v390 = C::fits_in_32(ctx, v3);
                        if let Some(v391) = v390 {
                            let v392 = C::ty_int(ctx, v391);
                            if let Some(v393) = v392 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                let v394 = constructor_rv_subw(ctx, v41, v42);
                                let v395 = constructor_output_xreg(ctx, v394);
                                // Rule at src/isa/riscv64/lower.isle line 310.
                                return Some(v395);
                            }
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v388 = constructor_rv_sub(ctx, v41, v42);
                            let v389 = constructor_output_xreg(ctx, v388);
                            // Rule at src/isa/riscv64/lower.isle line 307.
                            return Some(v389);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v478 =
                                            constructor_rv_vmul_vx(ctx, v161, v167, v163, v164);
                                        let v479 = constructor_output_vreg(ctx, v478);
                                        // Rule at src/isa/riscv64/lower.isle line 469.
                                        return Some(v479);
                                    }
                                }
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v476 =
                                            constructor_rv_vmul_vx(ctx, v193, v194, v163, v164);
                                        let v477 = constructor_output_vreg(ctx, v476);
                                        // Rule at src/isa/riscv64/lower.isle line 466.
                                        return Some(v477);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v474 = constructor_rv_vmul_vv(ctx, v161, v162, v163, v164);
                            let v475 = constructor_output_vreg(ctx, v474);
                            // Rule at src/isa/riscv64/lower.isle line 463.
                            return Some(v475);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v138 = C::value_regs_get(ctx, v136, 0x0);
                            let v139 = C::xreg_new(ctx, v138);
                            let v457 = C::value_regs_get(ctx, v136, 0x1);
                            let v458 = C::xreg_new(ctx, v457);
                            let v459 = C::put_in_regs(ctx, v38.1);
                            let v460 = C::value_regs_get(ctx, v459, 0x0);
                            let v461 = C::xreg_new(ctx, v460);
                            let v462 = C::value_regs_get(ctx, v459, 0x1);
                            let v463 = C::xreg_new(ctx, v462);
                            let v464 = constructor_rv_mulhu(ctx, v139, v461);
                            let v465 = constructor_madd(ctx, v139, v463, v464);
                            let v466 = constructor_madd(ctx, v458, v461, v465);
                            let v467 = C::zero_reg(ctx);
                            let v468 = C::xreg_new(ctx, v467);
                            let v469 = constructor_madd(ctx, v139, v461, v468);
                            let v470 = C::xreg_to_reg(ctx, v469);
                            let v471 = C::xreg_to_reg(ctx, v466);
                            let v472 = C::value_regs(ctx, v470, v471);
                            let v473 = C::output(ctx, v472);
                            // Rule at src/isa/riscv64/lower.isle line 437.
                            return Some(v473);
                        }
                        let v390 = C::fits_in_32(ctx, v3);
                        if let Some(v391) = v390 {
                            let v392 = C::ty_int(ctx, v391);
                            if let Some(v393) = v392 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                let v455 = constructor_rv_mulw(ctx, v41, v42);
                                let v456 = constructor_output_xreg(ctx, v455);
                                // Rule at src/isa/riscv64/lower.isle line 433.
                                return Some(v456);
                            }
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v453 = constructor_rv_mul(ctx, v41, v42);
                            let v454 = constructor_output_xreg(ctx, v453);
                            // Rule at src/isa/riscv64/lower.isle line 430.
                            return Some(v454);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v500 =
                                            constructor_rv_vmulhu_vx(ctx, v161, v167, v163, v164);
                                        let v501 = constructor_output_vreg(ctx, v500);
                                        // Rule at src/isa/riscv64/lower.isle line 495.
                                        return Some(v501);
                                    }
                                }
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v498 =
                                            constructor_rv_vmulhu_vx(ctx, v193, v194, v163, v164);
                                        let v499 = constructor_output_vreg(ctx, v498);
                                        // Rule at src/isa/riscv64/lower.isle line 492.
                                        return Some(v499);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v496 = constructor_rv_vmulhu_vv(ctx, v161, v162, v163, v164);
                            let v497 = constructor_output_vreg(ctx, v496);
                            // Rule at src/isa/riscv64/lower.isle line 489.
                            return Some(v497);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v492 = constructor_zext(ctx, v41, v35, I64);
                            let v482 = constructor_put_in_xreg(ctx, v38.1);
                            let v493 = constructor_zext(ctx, v482, v35, I64);
                            let v494 = constructor_lower_umlhi(ctx, v35, v492, v493);
                            let v495 = constructor_output_xreg(ctx, v494);
                            // Rule at src/isa/riscv64/lower.isle line 486.
                            return Some(v495);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v490 =
                                            constructor_rv_vmulh_vx(ctx, v161, v167, v163, v164);
                                        let v491 = constructor_output_vreg(ctx, v490);
                                        // Rule at src/isa/riscv64/lower.isle line 482.
                                        return Some(v491);
                                    }
                                }
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v488 =
                                            constructor_rv_vmulh_vx(ctx, v193, v194, v163, v164);
                                        let v489 = constructor_output_vreg(ctx, v488);
                                        // Rule at src/isa/riscv64/lower.isle line 479.
                                        return Some(v489);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v486 = constructor_rv_vmulh_vv(ctx, v161, v162, v163, v164);
                            let v487 = constructor_output_vreg(ctx, v486);
                            // Rule at src/isa/riscv64/lower.isle line 476.
                            return Some(v487);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v481 = constructor_sext(ctx, v41, v35, I64);
                            let v482 = constructor_put_in_xreg(ctx, v38.1);
                            let v483 = constructor_sext(ctx, v482, v35, I64);
                            let v484 = constructor_lower_smlhi(ctx, v35, v481, v483);
                            let v485 = constructor_output_xreg(ctx, v484);
                            // Rule at src/isa/riscv64/lower.isle line 473.
                            return Some(v485);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v194 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1877 =
                                            constructor_rv_vsmul_vx(ctx, v193, v194, v163, v164);
                                        let v1878 = constructor_output_vreg(ctx, v1877);
                                        // Rule at src/isa/riscv64/lower.isle line 2085.
                                        return Some(v1878);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1875 =
                                            constructor_rv_vsmul_vx(ctx, v161, v167, v163, v164);
                                        let v1876 = constructor_output_vreg(ctx, v1875);
                                        // Rule at src/isa/riscv64/lower.isle line 2082.
                                        return Some(v1876);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1873 = constructor_rv_vsmul_vv(ctx, v161, v162, v163, v164);
                            let v1874 = constructor_output_vreg(ctx, v1873);
                            // Rule at src/isa/riscv64/lower.isle line 2079.
                            return Some(v1874);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v502 = constructor_put_in_xreg(ctx, v38.1);
                            let v522 = constructor_gen_div_by_zero(ctx, v502);
                            let v523 = constructor_put_in_xreg(ctx, v38.0);
                            let v516 = constructor_put_in_xreg(ctx, v38.1);
                            let v524 = constructor_rv_divu(ctx, v523, v516);
                            let v525 = constructor_output_xreg(ctx, v524);
                            // Rule at src/isa/riscv64/lower.isle line 520.
                            return Some(v525);
                        }
                        let v390 = C::fits_in_32(ctx, v3);
                        if let Some(v391) = v390 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v502 = constructor_put_in_xreg(ctx, v38.1);
                            let v503 = constructor_zext(ctx, v502, v391, I64);
                            let v504 = constructor_gen_div_by_zero(ctx, v503);
                            let v505 = constructor_put_in_xreg(ctx, v38.0);
                            let v506 = constructor_zext(ctx, v505, v391, I64);
                            let v507 = constructor_rv_divuw(ctx, v506, v503);
                            let v508 = constructor_output_xreg(ctx, v507);
                            // Rule at src/isa/riscv64/lower.isle line 500.
                            return Some(v508);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v515 = constructor_gen_div_overflow(ctx, v41, v42, I64);
                            let v516 = constructor_put_in_xreg(ctx, v38.1);
                            let v517 = constructor_gen_div_by_zero(ctx, v516);
                            let v518 = constructor_put_in_xreg(ctx, v38.0);
                            let v519 = constructor_put_in_xreg(ctx, v38.1);
                            let v520 = constructor_rv_div(ctx, v518, v519);
                            let v521 = constructor_output_xreg(ctx, v520);
                            // Rule at src/isa/riscv64/lower.isle line 514.
                            return Some(v521);
                        }
                        let v390 = C::fits_in_32(ctx, v3);
                        if let Some(v391) = v390 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v509 = constructor_sext(ctx, v41, v391, I64);
                            let v482 = constructor_put_in_xreg(ctx, v38.1);
                            let v510 = constructor_sext(ctx, v482, v391, I64);
                            let v511 = constructor_gen_div_overflow(ctx, v509, v510, v391);
                            let v512 = constructor_gen_div_by_zero(ctx, v510);
                            let v513 = constructor_rv_divw(ctx, v509, v510);
                            let v514 = constructor_output_xreg(ctx, v513);
                            // Rule at src/isa/riscv64/lower.isle line 506.
                            return Some(v514);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v502 = constructor_put_in_xreg(ctx, v38.1);
                                let v543 = constructor_zext(ctx, v502, I32, I64);
                                let v544 = constructor_gen_div_by_zero(ctx, v543);
                                let v505 = constructor_put_in_xreg(ctx, v38.0);
                                let v545 = constructor_rv_remuw(ctx, v505, v543);
                                let v546 = constructor_output_xreg(ctx, v545);
                                // Rule at src/isa/riscv64/lower.isle line 545.
                                return Some(v546);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v502 = constructor_put_in_xreg(ctx, v38.1);
                                let v522 = constructor_gen_div_by_zero(ctx, v502);
                                let v523 = constructor_put_in_xreg(ctx, v38.0);
                                let v516 = constructor_put_in_xreg(ctx, v38.1);
                                let v549 = constructor_rv_remu(ctx, v523, v516);
                                let v550 = constructor_output_xreg(ctx, v549);
                                // Rule at src/isa/riscv64/lower.isle line 556.
                                return Some(v550);
                            }
                            _ => {}
                        }
                        let v526 = C::fits_in_16(ctx, v3);
                        if let Some(v527) = v526 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v502 = constructor_put_in_xreg(ctx, v38.1);
                            let v528 = constructor_zext(ctx, v502, v527, I64);
                            let v529 = constructor_gen_div_by_zero(ctx, v528);
                            let v505 = constructor_put_in_xreg(ctx, v38.0);
                            let v530 = constructor_zext(ctx, v505, v527, I64);
                            let v531 = constructor_rv_remuw(ctx, v530, v528);
                            let v532 = constructor_output_xreg(ctx, v531);
                            // Rule at src/isa/riscv64/lower.isle line 527.
                            return Some(v532);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v502 = constructor_put_in_xreg(ctx, v38.1);
                                let v539 = constructor_sext(ctx, v502, I32, I64);
                                let v540 = constructor_gen_div_by_zero(ctx, v539);
                                let v505 = constructor_put_in_xreg(ctx, v38.0);
                                let v541 = constructor_rv_remw(ctx, v505, v539);
                                let v542 = constructor_output_xreg(ctx, v541);
                                // Rule at src/isa/riscv64/lower.isle line 539.
                                return Some(v542);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v502 = constructor_put_in_xreg(ctx, v38.1);
                                let v522 = constructor_gen_div_by_zero(ctx, v502);
                                let v523 = constructor_put_in_xreg(ctx, v38.0);
                                let v516 = constructor_put_in_xreg(ctx, v38.1);
                                let v547 = constructor_rv_rem(ctx, v523, v516);
                                let v548 = constructor_output_xreg(ctx, v547);
                                // Rule at src/isa/riscv64/lower.isle line 551.
                                return Some(v548);
                            }
                            _ => {}
                        }
                        let v526 = C::fits_in_16(ctx, v3);
                        if let Some(v527) = v526 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v502 = constructor_put_in_xreg(ctx, v38.1);
                            let v533 = constructor_sext(ctx, v502, v527, I64);
                            let v534 = constructor_gen_div_by_zero(ctx, v533);
                            let v505 = constructor_put_in_xreg(ctx, v38.0);
                            let v535 = constructor_sext(ctx, v505, v527, I64);
                            let v536 = constructor_rv_remw(ctx, v535, v533);
                            let v537 = constructor_output_xreg(ctx, v536);
                            // Rule at src/isa/riscv64/lower.isle line 533.
                            return Some(v537);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v209 = C::i64_from_iconst(ctx, v75);
                                        if let Some(v210) = v209 {
                                            let v211 = C::imm5_from_i64(ctx, v210);
                                            if let Some(v212) = v211 {
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v613 = constructor_rv_vand_vi(
                                                    ctx, v193, v212, v163, v164,
                                                );
                                                let v614 = constructor_output_vreg(ctx, v613);
                                                // Rule at src/isa/riscv64/lower.isle line 613.
                                                return Some(v614);
                                            }
                                        }
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v187 = C::i64_from_iconst(ctx, v64);
                                        if let Some(v188) = v187 {
                                            let v189 = C::imm5_from_i64(ctx, v188);
                                            if let Some(v190) = v189 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v611 = constructor_rv_vand_vi(
                                                    ctx, v161, v190, v163, v164,
                                                );
                                                let v612 = constructor_output_vreg(ctx, v611);
                                                // Rule at src/isa/riscv64/lower.isle line 610.
                                                return Some(v612);
                                            }
                                        }
                                    }
                                }
                            }
                            let v605 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v606) = v605 {
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Splat = v74 {
                                            let v193 = constructor_put_in_vreg(ctx, v38.1);
                                            let v194 = constructor_put_in_xreg(ctx, v75);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v609 =
                                                constructor_rv_vand_vx(ctx, v193, v194, v163, v164);
                                            let v610 = constructor_output_vreg(ctx, v609);
                                            // Rule at src/isa/riscv64/lower.isle line 606.
                                            return Some(v610);
                                        }
                                    }
                                }
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Splat = v63 {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v167 = constructor_put_in_xreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v607 =
                                                constructor_rv_vand_vx(ctx, v161, v167, v163, v164);
                                            let v608 = constructor_output_vreg(ctx, v607);
                                            // Rule at src/isa/riscv64/lower.isle line 602.
                                            return Some(v608);
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v603 = constructor_rv_vand_vv(ctx, v161, v162, v163, v164);
                            let v604 = constructor_output_vreg(ctx, v603);
                            // Rule at src/isa/riscv64/lower.isle line 599.
                            return Some(v604);
                        }
                        let v566 = C::has_zbb(ctx);
                        if v566 == true {
                            if v3 == I128 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v71 = C::def_inst(ctx, v38.0);
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Bnot = v74 {
                                            let v586 = C::put_in_regs(ctx, v38.1);
                                            let v587 = C::value_regs_get(ctx, v586, 0x0);
                                            let v588 = C::xreg_new(ctx, v587);
                                            let v589 = C::put_in_regs(ctx, v75);
                                            let v590 = C::value_regs_get(ctx, v589, 0x0);
                                            let v591 = C::xreg_new(ctx, v590);
                                            let v592 = constructor_rv_andn(ctx, v588, v591);
                                            let v144 = C::put_in_regs(ctx, v38.1);
                                            let v593 = C::value_regs_get(ctx, v144, 0x1);
                                            let v594 = C::xreg_new(ctx, v593);
                                            let v595 = C::put_in_regs(ctx, v75);
                                            let v596 = C::value_regs_get(ctx, v595, 0x1);
                                            let v597 = C::xreg_new(ctx, v596);
                                            let v598 = constructor_rv_andn(ctx, v594, v597);
                                            let v599 = C::xreg_to_reg(ctx, v592);
                                            let v600 = C::xreg_to_reg(ctx, v598);
                                            let v601 = C::value_regs(ctx, v599, v600);
                                            let v602 = C::output(ctx, v601);
                                            // Rule at src/isa/riscv64/lower.isle line 593.
                                            return Some(v602);
                                        }
                                    }
                                }
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Bnot = v63 {
                                            let v136 = C::put_in_regs(ctx, v38.0);
                                            let v138 = C::value_regs_get(ctx, v136, 0x0);
                                            let v139 = C::xreg_new(ctx, v138);
                                            let v571 = C::put_in_regs(ctx, v64);
                                            let v572 = C::value_regs_get(ctx, v571, 0x0);
                                            let v573 = C::xreg_new(ctx, v572);
                                            let v574 = constructor_rv_andn(ctx, v139, v573);
                                            let v575 = C::put_in_regs(ctx, v38.0);
                                            let v576 = C::value_regs_get(ctx, v575, 0x1);
                                            let v577 = C::xreg_new(ctx, v576);
                                            let v578 = C::put_in_regs(ctx, v64);
                                            let v579 = C::value_regs_get(ctx, v578, 0x1);
                                            let v580 = C::xreg_new(ctx, v579);
                                            let v581 = constructor_rv_andn(ctx, v577, v580);
                                            let v582 = C::xreg_to_reg(ctx, v574);
                                            let v583 = C::xreg_to_reg(ctx, v581);
                                            let v584 = C::value_regs(ctx, v582, v583);
                                            let v585 = C::output(ctx, v584);
                                            // Rule at src/isa/riscv64/lower.isle line 587.
                                            return Some(v585);
                                        }
                                    }
                                }
                            }
                            let v372 = C::fits_in_64(ctx, v3);
                            if let Some(v373) = v372 {
                                let v553 = C::ty_int(ctx, v373);
                                if let Some(v554) = v553 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v71 = C::def_inst(ctx, v38.0);
                                    if let Some(v72) = v71 {
                                        let v73 = &C::inst_data(ctx, v72);
                                        if let &InstructionData::Unary {
                                            opcode: ref v74,
                                            arg: v75,
                                        } = v73
                                        {
                                            if let &Opcode::Bnot = v74 {
                                                let v502 = constructor_put_in_xreg(ctx, v38.1);
                                                let v194 = constructor_put_in_xreg(ctx, v75);
                                                let v569 = constructor_rv_andn(ctx, v502, v194);
                                                let v570 = constructor_output_xreg(ctx, v569);
                                                // Rule at src/isa/riscv64/lower.isle line 583.
                                                return Some(v570);
                                            }
                                        }
                                    }
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::Unary {
                                            opcode: ref v63,
                                            arg: v64,
                                        } = v62
                                        {
                                            if let &Opcode::Bnot = v63 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v167 = constructor_put_in_xreg(ctx, v64);
                                                let v567 = constructor_rv_andn(ctx, v41, v167);
                                                let v568 = constructor_output_xreg(ctx, v567);
                                                // Rule at src/isa/riscv64/lower.isle line 579.
                                                return Some(v568);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v562 = constructor_put_in_freg(ctx, v38.0);
                            let v563 = constructor_put_in_freg(ctx, v38.1);
                            let v564 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::And,
                                v562,
                                v563,
                                v560,
                            );
                            let v565 = constructor_output_freg(ctx, v564);
                            // Rule at src/isa/riscv64/lower.isle line 572.
                            return Some(v565);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v553 = C::ty_int(ctx, v373);
                            if let Some(v554) = v553 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v53 = C::i64_from_iconst(ctx, v38.0);
                                if let Some(v54) = v53 {
                                    let v55 = C::imm12_from_i64(ctx, v54);
                                    if let Some(v56) = v55 {
                                        let v502 = constructor_put_in_xreg(ctx, v38.1);
                                        let v557 = constructor_rv_andi(ctx, v502, v56);
                                        let v558 = constructor_output_xreg(ctx, v557);
                                        // Rule at src/isa/riscv64/lower.isle line 569.
                                        return Some(v558);
                                    }
                                }
                                let v45 = C::i64_from_iconst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = C::imm12_from_i64(ctx, v46);
                                    if let Some(v48) = v47 {
                                        let v41 = constructor_put_in_xreg(ctx, v38.0);
                                        let v555 = constructor_rv_andi(ctx, v41, v48);
                                        let v556 = constructor_output_xreg(ctx, v555);
                                        // Rule at src/isa/riscv64/lower.isle line 566.
                                        return Some(v556);
                                    }
                                }
                            }
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v396 = C::put_in_regs(ctx, v38.1);
                            let v551 = constructor_gen_and(ctx, v444, v136, v396);
                            let v552 = C::output(ctx, v551);
                            // Rule at src/isa/riscv64/lower.isle line 562.
                            return Some(v552);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v209 = C::i64_from_iconst(ctx, v75);
                                        if let Some(v210) = v209 {
                                            let v211 = C::imm5_from_i64(ctx, v210);
                                            if let Some(v212) = v211 {
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v648 = constructor_rv_vor_vi(
                                                    ctx, v193, v212, v163, v164,
                                                );
                                                let v649 = constructor_output_vreg(ctx, v648);
                                                // Rule at src/isa/riscv64/lower.isle line 669.
                                                return Some(v649);
                                            }
                                        }
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v187 = C::i64_from_iconst(ctx, v64);
                                        if let Some(v188) = v187 {
                                            let v189 = C::imm5_from_i64(ctx, v188);
                                            if let Some(v190) = v189 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v646 = constructor_rv_vor_vi(
                                                    ctx, v161, v190, v163, v164,
                                                );
                                                let v647 = constructor_output_vreg(ctx, v646);
                                                // Rule at src/isa/riscv64/lower.isle line 666.
                                                return Some(v647);
                                            }
                                        }
                                    }
                                }
                            }
                            let v605 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v606) = v605 {
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Splat = v74 {
                                            let v193 = constructor_put_in_vreg(ctx, v38.1);
                                            let v194 = constructor_put_in_xreg(ctx, v75);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v644 =
                                                constructor_rv_vor_vx(ctx, v193, v194, v163, v164);
                                            let v645 = constructor_output_vreg(ctx, v644);
                                            // Rule at src/isa/riscv64/lower.isle line 662.
                                            return Some(v645);
                                        }
                                    }
                                }
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Splat = v63 {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v167 = constructor_put_in_xreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v642 =
                                                constructor_rv_vor_vx(ctx, v161, v167, v163, v164);
                                            let v643 = constructor_output_vreg(ctx, v642);
                                            // Rule at src/isa/riscv64/lower.isle line 658.
                                            return Some(v643);
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v640 = constructor_rv_vor_vv(ctx, v161, v162, v163, v164);
                            let v641 = constructor_output_vreg(ctx, v640);
                            // Rule at src/isa/riscv64/lower.isle line 655.
                            return Some(v641);
                        }
                        let v566 = C::has_zbb(ctx);
                        if v566 == true {
                            if v3 == I128 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v71 = C::def_inst(ctx, v38.0);
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Bnot = v74 {
                                            let v586 = C::put_in_regs(ctx, v38.1);
                                            let v587 = C::value_regs_get(ctx, v586, 0x0);
                                            let v588 = C::xreg_new(ctx, v587);
                                            let v589 = C::put_in_regs(ctx, v75);
                                            let v590 = C::value_regs_get(ctx, v589, 0x0);
                                            let v591 = C::xreg_new(ctx, v590);
                                            let v634 = constructor_rv_orn(ctx, v588, v591);
                                            let v144 = C::put_in_regs(ctx, v38.1);
                                            let v593 = C::value_regs_get(ctx, v144, 0x1);
                                            let v594 = C::xreg_new(ctx, v593);
                                            let v595 = C::put_in_regs(ctx, v75);
                                            let v596 = C::value_regs_get(ctx, v595, 0x1);
                                            let v597 = C::xreg_new(ctx, v596);
                                            let v635 = constructor_rv_orn(ctx, v594, v597);
                                            let v636 = C::xreg_to_reg(ctx, v634);
                                            let v637 = C::xreg_to_reg(ctx, v635);
                                            let v638 = C::value_regs(ctx, v636, v637);
                                            let v639 = C::output(ctx, v638);
                                            // Rule at src/isa/riscv64/lower.isle line 649.
                                            return Some(v639);
                                        }
                                    }
                                }
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Bnot = v63 {
                                            let v136 = C::put_in_regs(ctx, v38.0);
                                            let v138 = C::value_regs_get(ctx, v136, 0x0);
                                            let v139 = C::xreg_new(ctx, v138);
                                            let v571 = C::put_in_regs(ctx, v64);
                                            let v572 = C::value_regs_get(ctx, v571, 0x0);
                                            let v573 = C::xreg_new(ctx, v572);
                                            let v628 = constructor_rv_orn(ctx, v139, v573);
                                            let v575 = C::put_in_regs(ctx, v38.0);
                                            let v576 = C::value_regs_get(ctx, v575, 0x1);
                                            let v577 = C::xreg_new(ctx, v576);
                                            let v578 = C::put_in_regs(ctx, v64);
                                            let v579 = C::value_regs_get(ctx, v578, 0x1);
                                            let v580 = C::xreg_new(ctx, v579);
                                            let v629 = constructor_rv_orn(ctx, v577, v580);
                                            let v630 = C::xreg_to_reg(ctx, v628);
                                            let v631 = C::xreg_to_reg(ctx, v629);
                                            let v632 = C::value_regs(ctx, v630, v631);
                                            let v633 = C::output(ctx, v632);
                                            // Rule at src/isa/riscv64/lower.isle line 643.
                                            return Some(v633);
                                        }
                                    }
                                }
                            }
                            let v372 = C::fits_in_64(ctx, v3);
                            if let Some(v373) = v372 {
                                let v553 = C::ty_int(ctx, v373);
                                if let Some(v554) = v553 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v71 = C::def_inst(ctx, v38.0);
                                    if let Some(v72) = v71 {
                                        let v73 = &C::inst_data(ctx, v72);
                                        if let &InstructionData::Unary {
                                            opcode: ref v74,
                                            arg: v75,
                                        } = v73
                                        {
                                            if let &Opcode::Bnot = v74 {
                                                let v502 = constructor_put_in_xreg(ctx, v38.1);
                                                let v194 = constructor_put_in_xreg(ctx, v75);
                                                let v626 = constructor_rv_orn(ctx, v502, v194);
                                                let v627 = constructor_output_xreg(ctx, v626);
                                                // Rule at src/isa/riscv64/lower.isle line 639.
                                                return Some(v627);
                                            }
                                        }
                                    }
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::Unary {
                                            opcode: ref v63,
                                            arg: v64,
                                        } = v62
                                        {
                                            if let &Opcode::Bnot = v63 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v167 = constructor_put_in_xreg(ctx, v64);
                                                let v624 = constructor_rv_orn(ctx, v41, v167);
                                                let v625 = constructor_output_xreg(ctx, v624);
                                                // Rule at src/isa/riscv64/lower.isle line 635.
                                                return Some(v625);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v562 = constructor_put_in_freg(ctx, v38.0);
                            let v563 = constructor_put_in_freg(ctx, v38.1);
                            let v622 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Or,
                                v562,
                                v563,
                                v560,
                            );
                            let v623 = constructor_output_freg(ctx, v622);
                            // Rule at src/isa/riscv64/lower.isle line 628.
                            return Some(v623);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v553 = C::ty_int(ctx, v373);
                            if let Some(v554) = v553 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v53 = C::i64_from_iconst(ctx, v38.0);
                                if let Some(v54) = v53 {
                                    let v55 = C::imm12_from_i64(ctx, v54);
                                    if let Some(v56) = v55 {
                                        let v502 = constructor_put_in_xreg(ctx, v38.1);
                                        let v619 = constructor_rv_ori(ctx, v502, v56);
                                        let v620 = constructor_output_xreg(ctx, v619);
                                        // Rule at src/isa/riscv64/lower.isle line 625.
                                        return Some(v620);
                                    }
                                }
                                let v45 = C::i64_from_iconst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = C::imm12_from_i64(ctx, v46);
                                    if let Some(v48) = v47 {
                                        let v41 = constructor_put_in_xreg(ctx, v38.0);
                                        let v617 = constructor_rv_ori(ctx, v41, v48);
                                        let v618 = constructor_output_xreg(ctx, v617);
                                        // Rule at src/isa/riscv64/lower.isle line 622.
                                        return Some(v618);
                                    }
                                }
                            }
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v396 = C::put_in_regs(ctx, v38.1);
                            let v615 = constructor_gen_or(ctx, v444, v136, v396);
                            let v616 = C::output(ctx, v615);
                            // Rule at src/isa/riscv64/lower.isle line 618.
                            return Some(v616);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v209 = C::i64_from_iconst(ctx, v75);
                                        if let Some(v210) = v209 {
                                            let v211 = C::imm5_from_i64(ctx, v210);
                                            if let Some(v212) = v211 {
                                                let v193 = constructor_put_in_vreg(ctx, v38.1);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v669 = constructor_rv_vxor_vi(
                                                    ctx, v193, v212, v163, v164,
                                                );
                                                let v670 = constructor_output_vreg(ctx, v669);
                                                // Rule at src/isa/riscv64/lower.isle line 704.
                                                return Some(v670);
                                            }
                                        }
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v187 = C::i64_from_iconst(ctx, v64);
                                        if let Some(v188) = v187 {
                                            let v189 = C::imm5_from_i64(ctx, v188);
                                            if let Some(v190) = v189 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v667 = constructor_rv_vxor_vi(
                                                    ctx, v161, v190, v163, v164,
                                                );
                                                let v668 = constructor_output_vreg(ctx, v667);
                                                // Rule at src/isa/riscv64/lower.isle line 701.
                                                return Some(v668);
                                            }
                                        }
                                    }
                                }
                            }
                            let v605 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v606) = v605 {
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Splat = v74 {
                                            let v193 = constructor_put_in_vreg(ctx, v38.1);
                                            let v194 = constructor_put_in_xreg(ctx, v75);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v665 =
                                                constructor_rv_vxor_vx(ctx, v193, v194, v163, v164);
                                            let v666 = constructor_output_vreg(ctx, v665);
                                            // Rule at src/isa/riscv64/lower.isle line 697.
                                            return Some(v666);
                                        }
                                    }
                                }
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Splat = v63 {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v167 = constructor_put_in_xreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v663 =
                                                constructor_rv_vxor_vx(ctx, v161, v167, v163, v164);
                                            let v664 = constructor_output_vreg(ctx, v663);
                                            // Rule at src/isa/riscv64/lower.isle line 693.
                                            return Some(v664);
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v661 = constructor_rv_vxor_vv(ctx, v161, v162, v163, v164);
                            let v662 = constructor_output_vreg(ctx, v661);
                            // Rule at src/isa/riscv64/lower.isle line 690.
                            return Some(v662);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v562 = constructor_put_in_freg(ctx, v38.0);
                            let v563 = constructor_put_in_freg(ctx, v38.1);
                            let v659 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Xor,
                                v562,
                                v563,
                                v560,
                            );
                            let v660 = constructor_output_freg(ctx, v659);
                            // Rule at src/isa/riscv64/lower.isle line 687.
                            return Some(v660);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v396 = C::put_in_regs(ctx, v38.1);
                            let v657 =
                                constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v136, v396);
                            let v658 = C::output(ctx, v657);
                            // Rule at src/isa/riscv64/lower.isle line 684.
                            return Some(v658);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v553 = C::ty_int(ctx, v373);
                            if let Some(v554) = v553 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v53 = C::i64_from_iconst(ctx, v38.0);
                                if let Some(v54) = v53 {
                                    let v55 = C::imm12_from_i64(ctx, v54);
                                    if let Some(v56) = v55 {
                                        let v502 = constructor_put_in_xreg(ctx, v38.1);
                                        let v654 = constructor_rv_xori(ctx, v502, v56);
                                        let v655 = constructor_output_xreg(ctx, v654);
                                        // Rule at src/isa/riscv64/lower.isle line 681.
                                        return Some(v655);
                                    }
                                }
                                let v45 = C::i64_from_iconst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = C::imm12_from_i64(ctx, v46);
                                    if let Some(v48) = v47 {
                                        let v41 = constructor_put_in_xreg(ctx, v38.0);
                                        let v652 = constructor_rv_xori(ctx, v41, v48);
                                        let v653 = constructor_output_xreg(ctx, v652);
                                        // Rule at src/isa/riscv64/lower.isle line 678.
                                        return Some(v653);
                                    }
                                }
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                let v650 = constructor_rv_xor(ctx, v41, v42);
                                let v651 = constructor_output_xreg(ctx, v650);
                                // Rule at src/isa/riscv64/lower.isle line 674.
                                return Some(v651);
                            }
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v396 = C::put_in_regs(ctx, v38.1);
                            let v1007 = constructor_lower_i128_rotl(ctx, v136, v396);
                            let v1008 = C::output(ctx, v1007);
                            // Rule at src/isa/riscv64/lower.isle line 1024.
                            return Some(v1008);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v1004 = constructor_zext(ctx, v41, v373, I64);
                            let v913 = C::put_in_regs(ctx, v38.1);
                            let v914 = C::value_regs_get(ctx, v913, 0x0);
                            let v915 = C::xreg_new(ctx, v914);
                            let v1005 = constructor_lower_rotl(ctx, v373, v1004, v915);
                            let v1006 = constructor_output_xreg(ctx, v1005);
                            // Rule at src/isa/riscv64/lower.isle line 1021.
                            return Some(v1006);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v396 = C::put_in_regs(ctx, v38.1);
                            let v1011 = constructor_lower_i128_rotr(ctx, v136, v396);
                            let v1012 = C::output(ctx, v1011);
                            // Rule at src/isa/riscv64/lower.isle line 1031.
                            return Some(v1012);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v1004 = constructor_zext(ctx, v41, v373, I64);
                            let v913 = C::put_in_regs(ctx, v38.1);
                            let v914 = C::value_regs_get(ctx, v913, 0x0);
                            let v915 = C::xreg_new(ctx, v914);
                            let v1009 = constructor_lower_rotr(ctx, v373, v1004, v915);
                            let v1010 = constructor_output_xreg(ctx, v1009);
                            // Rule at src/isa/riscv64/lower.isle line 1028.
                            return Some(v1010);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v836 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v837) = v836 {
                                let v897 = C::def_inst(ctx, v837);
                                if let Some(v898) = v897 {
                                    let v899 = &C::inst_data(ctx, v898);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v900,
                                        imm: v901,
                                    } = v899
                                    {
                                        if let &Opcode::Iconst = v900 {
                                            let v902 = C::u64_from_imm64(ctx, v901);
                                            let v903 = C::uimm5_from_u64(ctx, v902);
                                            if let Some(v904) = v903 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v905 = constructor_rv_vsll_vi(
                                                    ctx, v161, v904, v163, v164,
                                                );
                                                let v906 = constructor_output_vreg(ctx, v905);
                                                // Rule at src/isa/riscv64/lower.isle line 903.
                                                return Some(v906);
                                            }
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v396 = C::put_in_regs(ctx, v38.1);
                            let v825 = C::value_regs_get(ctx, v396, 0x0);
                            let v826 = C::xreg_new(ctx, v825);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v895 = constructor_rv_vsll_vx(ctx, v161, v826, v163, v164);
                            let v896 = constructor_output_vreg(ctx, v895);
                            // Rule at src/isa/riscv64/lower.isle line 900.
                            return Some(v896);
                        }
                        match v3 {
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v836 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v837) = v836 {
                                    let v838 = C::i64_from_iconst(ctx, v837);
                                    if let Some(v839) = v838 {
                                        let v840 = C::imm12_from_i64(ctx, v839);
                                        if let Some(v841) = v840 {
                                            let v66 = C::has_zba(ctx);
                                            if v66 == true {
                                                let v71 = C::def_inst(ctx, v38.0);
                                                if let Some(v72) = v71 {
                                                    let v73 = &C::inst_data(ctx, v72);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v74,
                                                        arg: v75,
                                                    } = v73
                                                    {
                                                        if let &Opcode::Uextend = v74 {
                                                            let v76 = C::value_type(ctx, v75);
                                                            if v76 == I32 {
                                                                let v77 = constructor_put_in_xreg(
                                                                    ctx, v75,
                                                                );
                                                                let v850 = constructor_rv_slliuw(
                                                                    ctx, v77, v841,
                                                                );
                                                                let v851 = constructor_output_xreg(
                                                                    ctx, v850,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 873.
                                                                return Some(v851);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v846 = constructor_shift_mask(ctx, v3);
                                            let v847 = C::imm12_and(ctx, v841, v846);
                                            let v848 = constructor_rv_slli(ctx, v41, v847);
                                            let v849 = constructor_output_xreg(ctx, v848);
                                            // Rule at src/isa/riscv64/lower.isle line 869.
                                            return Some(v849);
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v586 = C::put_in_regs(ctx, v38.1);
                                let v587 = C::value_regs_get(ctx, v586, 0x0);
                                let v588 = C::xreg_new(ctx, v587);
                                let v853 = C::gen_shamt(ctx, I128, v588);
                                let v854 = C::value_regs_get(ctx, v853, 0x0);
                                let v855 = C::xreg_new(ctx, v854);
                                let v856 = C::value_regs_get(ctx, v853, 0x1);
                                let v857 = C::xreg_new(ctx, v856);
                                let v858 = C::put_in_regs(ctx, v38.0);
                                let v859 = C::value_regs_get(ctx, v858, 0x0);
                                let v860 = C::xreg_new(ctx, v859);
                                let v861 = constructor_rv_sll(ctx, v860, v855);
                                let v862 = C::put_in_regs(ctx, v38.0);
                                let v863 = C::value_regs_get(ctx, v862, 0x0);
                                let v864 = C::xreg_new(ctx, v863);
                                let v865 = constructor_rv_srl(ctx, v864, v857);
                                let v867 = C::zero_reg(ctx);
                                let v868 = C::xreg_new(ctx, v867);
                                let v869 = C::zero_reg(ctx);
                                let v870 = C::xreg_to_reg(ctx, v865);
                                let v871 =
                                    C::gen_select_reg(ctx, &IntCC::Equal, v855, v868, v869, v870);
                                let v872 = C::xreg_new(ctx, v871);
                                let v873 = C::put_in_regs(ctx, v38.0);
                                let v874 = C::value_regs_get(ctx, v873, 0x1);
                                let v875 = C::xreg_new(ctx, v874);
                                let v876 = constructor_rv_sll(ctx, v875, v855);
                                let v877 = constructor_rv_or(ctx, v872, v876);
                                let v879 = constructor_imm(ctx, I64, 0x40);
                                let v880 = C::xreg_new(ctx, v879);
                                let v881 = C::put_in_regs(ctx, v38.1);
                                let v882 = C::value_regs_get(ctx, v881, 0x0);
                                let v883 = C::xreg_new(ctx, v882);
                                let v885 = C::imm12_const(ctx, 0x7F);
                                let v886 = constructor_rv_andi(ctx, v883, v885);
                                let v888 = C::zero_reg(ctx);
                                let v889 = C::xreg_to_reg(ctx, v861);
                                let v890 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v886,
                                    v880,
                                    v888,
                                    v889,
                                );
                                let v891 = C::xreg_to_reg(ctx, v877);
                                let v892 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v886,
                                    v880,
                                    v889,
                                    v891,
                                );
                                let v893 = C::value_regs(ctx, v890, v892);
                                let v894 = C::output(ctx, v893);
                                // Rule at src/isa/riscv64/lower.isle line 878.
                                return Some(v894);
                            }
                            _ => {}
                        }
                        let v834 = C::int_fits_in_32(ctx, v3);
                        if let Some(v835) = v834 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v836 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v837) = v836 {
                                let v838 = C::i64_from_iconst(ctx, v837);
                                if let Some(v839) = v838 {
                                    let v840 = C::imm12_from_i64(ctx, v839);
                                    if let Some(v841) = v840 {
                                        let v41 = constructor_put_in_xreg(ctx, v38.0);
                                        let v842 = constructor_shift_mask(ctx, v835);
                                        let v843 = C::imm12_and(ctx, v841, v842);
                                        let v844 = constructor_rv_slliw(ctx, v41, v843);
                                        let v845 = constructor_output_xreg(ctx, v844);
                                        // Rule at src/isa/riscv64/lower.isle line 864.
                                        return Some(v845);
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v396 = C::put_in_regs(ctx, v38.1);
                                let v825 = C::value_regs_get(ctx, v396, 0x0);
                                let v826 = C::xreg_new(ctx, v825);
                                let v830 = constructor_rv_sllw(ctx, v41, v826);
                                let v831 = constructor_output_xreg(ctx, v830);
                                // Rule at src/isa/riscv64/lower.isle line 856.
                                return Some(v831);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v396 = C::put_in_regs(ctx, v38.1);
                                let v825 = C::value_regs_get(ctx, v396, 0x0);
                                let v826 = C::xreg_new(ctx, v825);
                                let v832 = constructor_rv_sll(ctx, v41, v826);
                                let v833 = constructor_output_xreg(ctx, v832);
                                // Rule at src/isa/riscv64/lower.isle line 860.
                                return Some(v833);
                            }
                            _ => {}
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v820 = C::ty_8_or_16(ctx, v444);
                            if let Some(v821) = v820 {
                                let v822 = constructor_shift_mask(ctx, v821);
                                let v823 = constructor_u64_to_imm12(ctx, v822);
                                if let Some(v824) = v823 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v396 = C::put_in_regs(ctx, v38.1);
                                    let v825 = C::value_regs_get(ctx, v396, 0x0);
                                    let v826 = C::xreg_new(ctx, v825);
                                    let v827 = constructor_rv_andi(ctx, v826, v824);
                                    let v828 = constructor_rv_sllw(ctx, v41, v827);
                                    let v829 = constructor_output_xreg(ctx, v828);
                                    // Rule at src/isa/riscv64/lower.isle line 851.
                                    return Some(v829);
                                }
                            }
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v836 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v837) = v836 {
                                let v897 = C::def_inst(ctx, v837);
                                if let Some(v898) = v897 {
                                    let v899 = &C::inst_data(ctx, v898);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v900,
                                        imm: v901,
                                    } = v899
                                    {
                                        if let &Opcode::Iconst = v900 {
                                            let v902 = C::u64_from_imm64(ctx, v901);
                                            let v903 = C::uimm5_from_u64(ctx, v902);
                                            if let Some(v904) = v903 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v959 = constructor_rv_vsrl_vi(
                                                    ctx, v161, v904, v163, v164,
                                                );
                                                let v960 = constructor_output_vreg(ctx, v959);
                                                // Rule at src/isa/riscv64/lower.isle line 957.
                                                return Some(v960);
                                            }
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v396 = C::put_in_regs(ctx, v38.1);
                            let v825 = C::value_regs_get(ctx, v396, 0x0);
                            let v826 = C::xreg_new(ctx, v825);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v957 = constructor_rv_vsrl_vx(ctx, v161, v826, v163, v164);
                            let v958 = constructor_output_vreg(ctx, v957);
                            // Rule at src/isa/riscv64/lower.isle line 954.
                            return Some(v958);
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v836 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v837) = v836 {
                                    let v838 = C::i64_from_iconst(ctx, v837);
                                    if let Some(v839) = v838 {
                                        let v840 = C::imm12_from_i64(ctx, v839);
                                        if let Some(v841) = v840 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v926 = constructor_rv_srliw(ctx, v41, v841);
                                            let v927 = constructor_output_xreg(ctx, v926);
                                            // Rule at src/isa/riscv64/lower.isle line 926.
                                            return Some(v927);
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v836 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v837) = v836 {
                                    let v838 = C::i64_from_iconst(ctx, v837);
                                    if let Some(v839) = v838 {
                                        let v840 = C::imm12_from_i64(ctx, v839);
                                        if let Some(v841) = v840 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v928 = constructor_rv_srli(ctx, v41, v841);
                                            let v929 = constructor_output_xreg(ctx, v928);
                                            // Rule at src/isa/riscv64/lower.isle line 929.
                                            return Some(v929);
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v586 = C::put_in_regs(ctx, v38.1);
                                let v587 = C::value_regs_get(ctx, v586, 0x0);
                                let v588 = C::xreg_new(ctx, v587);
                                let v853 = C::gen_shamt(ctx, I128, v588);
                                let v854 = C::value_regs_get(ctx, v853, 0x0);
                                let v855 = C::xreg_new(ctx, v854);
                                let v856 = C::value_regs_get(ctx, v853, 0x1);
                                let v857 = C::xreg_new(ctx, v856);
                                let v858 = C::put_in_regs(ctx, v38.0);
                                let v930 = C::value_regs_get(ctx, v858, 0x1);
                                let v931 = C::xreg_new(ctx, v930);
                                let v932 = constructor_rv_sll(ctx, v931, v857);
                                let v933 = C::zero_reg(ctx);
                                let v934 = C::xreg_new(ctx, v933);
                                let v935 = C::zero_reg(ctx);
                                let v936 = C::xreg_to_reg(ctx, v932);
                                let v937 =
                                    C::gen_select_reg(ctx, &IntCC::Equal, v855, v934, v935, v936);
                                let v938 = C::xreg_new(ctx, v937);
                                let v939 = C::put_in_regs(ctx, v38.0);
                                let v940 = C::value_regs_get(ctx, v939, 0x0);
                                let v941 = C::xreg_new(ctx, v940);
                                let v942 = constructor_rv_srl(ctx, v941, v855);
                                let v943 = constructor_rv_or(ctx, v938, v942);
                                let v944 = constructor_imm(ctx, I64, 0x40);
                                let v945 = C::xreg_new(ctx, v944);
                                let v946 = C::put_in_regs(ctx, v38.0);
                                let v947 = C::value_regs_get(ctx, v946, 0x1);
                                let v948 = C::xreg_new(ctx, v947);
                                let v949 = constructor_rv_srl(ctx, v948, v855);
                                let v881 = C::put_in_regs(ctx, v38.1);
                                let v882 = C::value_regs_get(ctx, v881, 0x0);
                                let v883 = C::xreg_new(ctx, v882);
                                let v885 = C::imm12_const(ctx, 0x7F);
                                let v886 = constructor_rv_andi(ctx, v883, v885);
                                let v950 = C::xreg_to_reg(ctx, v949);
                                let v951 = C::xreg_to_reg(ctx, v943);
                                let v952 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v886,
                                    v945,
                                    v950,
                                    v951,
                                );
                                let v953 = C::zero_reg(ctx);
                                let v954 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v886,
                                    v945,
                                    v953,
                                    v950,
                                );
                                let v955 = C::value_regs(ctx, v952, v954);
                                let v956 = C::output(ctx, v955);
                                // Rule at src/isa/riscv64/lower.isle line 932.
                                return Some(v956);
                            }
                            _ => {}
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v836 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v837) = v836 {
                                let v838 = C::i64_from_iconst(ctx, v837);
                                if let Some(v839) = v838 {
                                    let v840 = C::imm12_from_i64(ctx, v839);
                                    if let Some(v841) = v840 {
                                        let v907 = C::fits_in_16(ctx, v444);
                                        if let Some(v908) = v907 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v912 = constructor_zext(ctx, v41, v908, I64);
                                            let v909 = constructor_shift_mask(ctx, v908);
                                            let v923 = C::imm12_and(ctx, v841, v909);
                                            let v924 = constructor_rv_srliw(ctx, v912, v923);
                                            let v925 = constructor_output_xreg(ctx, v924);
                                            // Rule at src/isa/riscv64/lower.isle line 923.
                                            return Some(v925);
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v396 = C::put_in_regs(ctx, v38.1);
                                let v825 = C::value_regs_get(ctx, v396, 0x0);
                                let v826 = C::xreg_new(ctx, v825);
                                let v919 = constructor_rv_srlw(ctx, v41, v826);
                                let v920 = constructor_output_xreg(ctx, v919);
                                // Rule at src/isa/riscv64/lower.isle line 915.
                                return Some(v920);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v396 = C::put_in_regs(ctx, v38.1);
                                let v825 = C::value_regs_get(ctx, v396, 0x0);
                                let v826 = C::xreg_new(ctx, v825);
                                let v921 = constructor_rv_srl(ctx, v41, v826);
                                let v922 = constructor_output_xreg(ctx, v921);
                                // Rule at src/isa/riscv64/lower.isle line 919.
                                return Some(v922);
                            }
                            _ => {}
                        }
                        if let Some(v444) = v443 {
                            let v907 = C::fits_in_16(ctx, v444);
                            if let Some(v908) = v907 {
                                let v909 = constructor_shift_mask(ctx, v908);
                                let v910 = constructor_u64_to_imm12(ctx, v909);
                                if let Some(v911) = v910 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v912 = constructor_zext(ctx, v41, v908, I64);
                                    let v913 = C::put_in_regs(ctx, v38.1);
                                    let v914 = C::value_regs_get(ctx, v913, 0x0);
                                    let v915 = C::xreg_new(ctx, v914);
                                    let v916 = constructor_rv_andi(ctx, v915, v911);
                                    let v917 = constructor_rv_srlw(ctx, v912, v916);
                                    let v918 = constructor_output_xreg(ctx, v917);
                                    // Rule at src/isa/riscv64/lower.isle line 910.
                                    return Some(v918);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v836 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v837) = v836 {
                                let v897 = C::def_inst(ctx, v837);
                                if let Some(v898) = v897 {
                                    let v899 = &C::inst_data(ctx, v898);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v900,
                                        imm: v901,
                                    } = v899
                                    {
                                        if let &Opcode::Iconst = v900 {
                                            let v902 = C::u64_from_imm64(ctx, v901);
                                            let v903 = C::uimm5_from_u64(ctx, v902);
                                            if let Some(v904) = v903 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1002 = constructor_rv_vsra_vi(
                                                    ctx, v161, v904, v163, v164,
                                                );
                                                let v1003 = constructor_output_vreg(ctx, v1002);
                                                // Rule at src/isa/riscv64/lower.isle line 1016.
                                                return Some(v1003);
                                            }
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v396 = C::put_in_regs(ctx, v38.1);
                            let v825 = C::value_regs_get(ctx, v396, 0x0);
                            let v826 = C::xreg_new(ctx, v825);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1000 = constructor_rv_vsra_vx(ctx, v161, v826, v163, v164);
                            let v1001 = constructor_output_vreg(ctx, v1000);
                            // Rule at src/isa/riscv64/lower.isle line 1013.
                            return Some(v1001);
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v836 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v837) = v836 {
                                    let v838 = C::i64_from_iconst(ctx, v837);
                                    if let Some(v839) = v838 {
                                        let v840 = C::imm12_from_i64(ctx, v839);
                                        if let Some(v841) = v840 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v970 = constructor_rv_sraiw(ctx, v41, v841);
                                            let v971 = constructor_output_xreg(ctx, v970);
                                            // Rule at src/isa/riscv64/lower.isle line 980.
                                            return Some(v971);
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v836 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v837) = v836 {
                                    let v838 = C::i64_from_iconst(ctx, v837);
                                    if let Some(v839) = v838 {
                                        let v840 = C::imm12_from_i64(ctx, v839);
                                        if let Some(v841) = v840 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v972 = constructor_rv_srai(ctx, v41, v841);
                                            let v973 = constructor_output_xreg(ctx, v972);
                                            // Rule at src/isa/riscv64/lower.isle line 983.
                                            return Some(v973);
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v586 = C::put_in_regs(ctx, v38.1);
                                let v587 = C::value_regs_get(ctx, v586, 0x0);
                                let v588 = C::xreg_new(ctx, v587);
                                let v853 = C::gen_shamt(ctx, I128, v588);
                                let v854 = C::value_regs_get(ctx, v853, 0x0);
                                let v855 = C::xreg_new(ctx, v854);
                                let v856 = C::value_regs_get(ctx, v853, 0x1);
                                let v857 = C::xreg_new(ctx, v856);
                                let v858 = C::put_in_regs(ctx, v38.0);
                                let v930 = C::value_regs_get(ctx, v858, 0x1);
                                let v931 = C::xreg_new(ctx, v930);
                                let v932 = constructor_rv_sll(ctx, v931, v857);
                                let v933 = C::zero_reg(ctx);
                                let v934 = C::xreg_new(ctx, v933);
                                let v935 = C::zero_reg(ctx);
                                let v936 = C::xreg_to_reg(ctx, v932);
                                let v937 =
                                    C::gen_select_reg(ctx, &IntCC::Equal, v855, v934, v935, v936);
                                let v938 = C::xreg_new(ctx, v937);
                                let v939 = C::put_in_regs(ctx, v38.0);
                                let v940 = C::value_regs_get(ctx, v939, 0x0);
                                let v941 = C::xreg_new(ctx, v940);
                                let v942 = constructor_rv_srl(ctx, v941, v855);
                                let v943 = constructor_rv_or(ctx, v938, v942);
                                let v944 = constructor_imm(ctx, I64, 0x40);
                                let v945 = C::xreg_new(ctx, v944);
                                let v946 = C::put_in_regs(ctx, v38.0);
                                let v947 = C::value_regs_get(ctx, v946, 0x1);
                                let v948 = C::xreg_new(ctx, v947);
                                let v974 = constructor_rv_sra(ctx, v948, v855);
                                let v976 = C::i64_as_u64(ctx, -0x1);
                                let v977 = constructor_imm(ctx, I64, v976);
                                let v978 = C::xreg_new(ctx, v977);
                                let v980 = C::put_in_regs(ctx, v38.0);
                                let v981 = C::value_regs_get(ctx, v980, 0x1);
                                let v982 = C::xreg_new(ctx, v981);
                                let v953 = C::zero_reg(ctx);
                                let v983 = C::xreg_new(ctx, v953);
                                let v985 = C::zero_reg(ctx);
                                let v984 = C::xreg_to_reg(ctx, v978);
                                let v986 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::SignedLessThan,
                                    v982,
                                    v983,
                                    v984,
                                    v985,
                                );
                                let v987 = C::xreg_new(ctx, v986);
                                let v988 = constructor_imm(ctx, I64, 0x40);
                                let v989 = C::xreg_new(ctx, v988);
                                let v990 = C::put_in_regs(ctx, v38.1);
                                let v991 = C::value_regs_get(ctx, v990, 0x0);
                                let v992 = C::xreg_new(ctx, v991);
                                let v885 = C::imm12_const(ctx, 0x7F);
                                let v993 = constructor_rv_andi(ctx, v992, v885);
                                let v994 = C::xreg_to_reg(ctx, v974);
                                let v951 = C::xreg_to_reg(ctx, v943);
                                let v995 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v993,
                                    v989,
                                    v994,
                                    v951,
                                );
                                let v996 = C::xreg_to_reg(ctx, v987);
                                let v997 = C::gen_select_reg(
                                    ctx,
                                    &IntCC::UnsignedGreaterThanOrEqual,
                                    v993,
                                    v989,
                                    v996,
                                    v994,
                                );
                                let v998 = C::value_regs(ctx, v995, v997);
                                let v999 = C::output(ctx, v998);
                                // Rule at src/isa/riscv64/lower.isle line 986.
                                return Some(v999);
                            }
                            _ => {}
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v836 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v837) = v836 {
                                let v838 = C::i64_from_iconst(ctx, v837);
                                if let Some(v839) = v838 {
                                    let v840 = C::imm12_from_i64(ctx, v839);
                                    if let Some(v841) = v840 {
                                        let v907 = C::fits_in_16(ctx, v444);
                                        if let Some(v908) = v907 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v961 = constructor_sext(ctx, v41, v908, I64);
                                            let v909 = constructor_shift_mask(ctx, v908);
                                            let v923 = C::imm12_and(ctx, v841, v909);
                                            let v968 = constructor_rv_sraiw(ctx, v961, v923);
                                            let v969 = constructor_output_xreg(ctx, v968);
                                            // Rule at src/isa/riscv64/lower.isle line 977.
                                            return Some(v969);
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v396 = C::put_in_regs(ctx, v38.1);
                                let v825 = C::value_regs_get(ctx, v396, 0x0);
                                let v826 = C::xreg_new(ctx, v825);
                                let v964 = constructor_rv_sraw(ctx, v41, v826);
                                let v965 = constructor_output_xreg(ctx, v964);
                                // Rule at src/isa/riscv64/lower.isle line 969.
                                return Some(v965);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v396 = C::put_in_regs(ctx, v38.1);
                                let v825 = C::value_regs_get(ctx, v396, 0x0);
                                let v826 = C::xreg_new(ctx, v825);
                                let v966 = constructor_rv_sra(ctx, v41, v826);
                                let v967 = constructor_output_xreg(ctx, v966);
                                // Rule at src/isa/riscv64/lower.isle line 973.
                                return Some(v967);
                            }
                            _ => {}
                        }
                        if let Some(v444) = v443 {
                            let v907 = C::fits_in_16(ctx, v444);
                            if let Some(v908) = v907 {
                                let v909 = constructor_shift_mask(ctx, v908);
                                let v910 = constructor_u64_to_imm12(ctx, v909);
                                if let Some(v911) = v910 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v961 = constructor_sext(ctx, v41, v908, I64);
                                    let v913 = C::put_in_regs(ctx, v38.1);
                                    let v914 = C::value_regs_get(ctx, v913, 0x0);
                                    let v915 = C::xreg_new(ctx, v914);
                                    let v916 = constructor_rv_andi(ctx, v915, v911);
                                    let v962 = constructor_rv_sraw(ctx, v961, v916);
                                    let v963 = constructor_output_xreg(ctx, v962);
                                    // Rule at src/isa/riscv64/lower.isle line 964.
                                    return Some(v963);
                                }
                            }
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1187 = constructor_put_in_freg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1188 =
                                            constructor_rv_vfadd_vf(ctx, v193, v1187, v163, v164);
                                        let v1189 = constructor_output_vreg(ctx, v1188);
                                        // Rule at src/isa/riscv64/lower.isle line 1239.
                                        return Some(v1189);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1026 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1185 =
                                            constructor_rv_vfadd_vf(ctx, v161, v1026, v163, v164);
                                        let v1186 = constructor_output_vreg(ctx, v1185);
                                        // Rule at src/isa/riscv64/lower.isle line 1236.
                                        return Some(v1186);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1183 = constructor_rv_vfadd_vv(ctx, v161, v162, v163, v164);
                            let v1184 = constructor_output_vreg(ctx, v1183);
                            // Rule at src/isa/riscv64/lower.isle line 1233.
                            return Some(v1184);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v562 = constructor_put_in_freg(ctx, v38.0);
                            let v563 = constructor_put_in_freg(ctx, v38.1);
                            let v1181 = constructor_rv_fadd(ctx, v560, v562, v563);
                            let v1182 = constructor_output_freg(ctx, v1181);
                            // Rule at src/isa/riscv64/lower.isle line 1230.
                            return Some(v1182);
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1187 = constructor_put_in_freg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1196 =
                                            constructor_rv_vfrsub_vf(ctx, v193, v1187, v163, v164);
                                        let v1197 = constructor_output_vreg(ctx, v1196);
                                        // Rule at src/isa/riscv64/lower.isle line 1253.
                                        return Some(v1197);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1026 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1194 =
                                            constructor_rv_vfsub_vf(ctx, v161, v1026, v163, v164);
                                        let v1195 = constructor_output_vreg(ctx, v1194);
                                        // Rule at src/isa/riscv64/lower.isle line 1250.
                                        return Some(v1195);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1192 = constructor_rv_vfsub_vv(ctx, v161, v162, v163, v164);
                            let v1193 = constructor_output_vreg(ctx, v1192);
                            // Rule at src/isa/riscv64/lower.isle line 1247.
                            return Some(v1193);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v562 = constructor_put_in_freg(ctx, v38.0);
                            let v563 = constructor_put_in_freg(ctx, v38.1);
                            let v1190 = constructor_rv_fsub(ctx, v560, v562, v563);
                            let v1191 = constructor_output_freg(ctx, v1190);
                            // Rule at src/isa/riscv64/lower.isle line 1244.
                            return Some(v1191);
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1187 = constructor_put_in_freg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1204 =
                                            constructor_rv_vfmul_vf(ctx, v193, v1187, v163, v164);
                                        let v1205 = constructor_output_vreg(ctx, v1204);
                                        // Rule at src/isa/riscv64/lower.isle line 1266.
                                        return Some(v1205);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1026 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1202 =
                                            constructor_rv_vfmul_vf(ctx, v161, v1026, v163, v164);
                                        let v1203 = constructor_output_vreg(ctx, v1202);
                                        // Rule at src/isa/riscv64/lower.isle line 1263.
                                        return Some(v1203);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1200 = constructor_rv_vfmul_vv(ctx, v161, v162, v163, v164);
                            let v1201 = constructor_output_vreg(ctx, v1200);
                            // Rule at src/isa/riscv64/lower.isle line 1260.
                            return Some(v1201);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v562 = constructor_put_in_freg(ctx, v38.0);
                            let v563 = constructor_put_in_freg(ctx, v38.1);
                            let v1198 = constructor_rv_fmul(ctx, v560, v562, v563);
                            let v1199 = constructor_output_freg(ctx, v1198);
                            // Rule at src/isa/riscv64/lower.isle line 1257.
                            return Some(v1199);
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v193 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1187 = constructor_put_in_freg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1212 =
                                            constructor_rv_vfrdiv_vf(ctx, v193, v1187, v163, v164);
                                        let v1213 = constructor_output_vreg(ctx, v1212);
                                        // Rule at src/isa/riscv64/lower.isle line 1280.
                                        return Some(v1213);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1026 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1210 =
                                            constructor_rv_vfdiv_vf(ctx, v161, v1026, v163, v164);
                                        let v1211 = constructor_output_vreg(ctx, v1210);
                                        // Rule at src/isa/riscv64/lower.isle line 1277.
                                        return Some(v1211);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1208 = constructor_rv_vfdiv_vv(ctx, v161, v162, v163, v164);
                            let v1209 = constructor_output_vreg(ctx, v1208);
                            // Rule at src/isa/riscv64/lower.isle line 1274.
                            return Some(v1209);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v562 = constructor_put_in_freg(ctx, v38.0);
                            let v563 = constructor_put_in_freg(ctx, v38.1);
                            let v1206 = constructor_rv_fdiv(ctx, v560, v562, v563);
                            let v1207 = constructor_output_freg(ctx, v1206);
                            // Rule at src/isa/riscv64/lower.isle line 1271.
                            return Some(v1207);
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1026 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1027 =
                                            constructor_rv_vfsgnj_vf(ctx, v161, v1026, v163, v164);
                                        let v1028 = constructor_output_vreg(ctx, v1027);
                                        // Rule at src/isa/riscv64/lower.isle line 1056.
                                        return Some(v1028);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1024 = constructor_rv_vfsgnj_vv(ctx, v161, v162, v163, v164);
                            let v1025 = constructor_output_vreg(ctx, v1024);
                            // Rule at src/isa/riscv64/lower.isle line 1053.
                            return Some(v1025);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v562 = constructor_put_in_freg(ctx, v38.0);
                            let v563 = constructor_put_in_freg(ctx, v38.1);
                            let v1022 = constructor_rv_fsgnj(ctx, v560, v562, v563);
                            let v1023 = constructor_output_freg(ctx, v1022);
                            // Rule at src/isa/riscv64/lower.isle line 1050.
                            return Some(v1023);
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1219 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::Ordered,
                                v38.0,
                                v38.1,
                            );
                            let v781 = C::lane_type(ctx, v11);
                            let v1220 = constructor_canonical_nan_u64(ctx, v781);
                            let v1221 = constructor_imm(ctx, I64, v1220);
                            let v1222 = C::xreg_new(ctx, v1221);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1223 = constructor_rv_vmv_vx(ctx, v1222, v164);
                            let v1224 = constructor_put_in_vreg(ctx, v38.0);
                            let v1225 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v1226 = constructor_rv_vfmin_vv(ctx, v1224, v1225, v163, v164);
                            let v1227 = constructor_rv_vmerge_vvm(ctx, v1223, v1226, v1219, v164);
                            let v1228 = constructor_output_vreg(ctx, v1227);
                            // Rule at src/isa/riscv64/lower.isle line 1294.
                            return Some(v1228);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1215 = C::put_in_reg(ctx, v38.0);
                            let v57 = C::put_in_reg(ctx, v38.1);
                            let v1216 = constructor_gen_float_select(
                                ctx,
                                &FloatSelectOP::Min,
                                v1215,
                                v57,
                                v560,
                            );
                            let v1217 = constructor_output_reg(ctx, v1216);
                            // Rule at src/isa/riscv64/lower.isle line 1285.
                            return Some(v1217);
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1219 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::Ordered,
                                v38.0,
                                v38.1,
                            );
                            let v781 = C::lane_type(ctx, v11);
                            let v1220 = constructor_canonical_nan_u64(ctx, v781);
                            let v1221 = constructor_imm(ctx, I64, v1220);
                            let v1222 = C::xreg_new(ctx, v1221);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1223 = constructor_rv_vmv_vx(ctx, v1222, v164);
                            let v1224 = constructor_put_in_vreg(ctx, v38.0);
                            let v1225 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v1232 = constructor_rv_vfmax_vv(ctx, v1224, v1225, v163, v164);
                            let v1233 = constructor_rv_vmerge_vvm(ctx, v1223, v1232, v1219, v164);
                            let v1234 = constructor_output_vreg(ctx, v1233);
                            // Rule at src/isa/riscv64/lower.isle line 1312.
                            return Some(v1234);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1215 = C::put_in_reg(ctx, v38.0);
                            let v57 = C::put_in_reg(ctx, v38.1);
                            let v1230 = constructor_gen_float_select(
                                ctx,
                                &FloatSelectOP::Max,
                                v1215,
                                v57,
                                v560,
                            );
                            let v1231 = constructor_output_reg(ctx, v1230);
                            // Rule at src/isa/riscv64/lower.isle line 1303.
                            return Some(v1231);
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1792 = C::ty_lane_count(ctx, v11);
                            let v1834 = C::u64_udiv(ctx, v1792, 0x2);
                            if let Some(v1835) = v1834 {
                                let v1836 = constructor_u64_to_uimm5(ctx, v1835);
                                if let Some(v1837) = v1836 {
                                    let v1880 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v1881) = v1880 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v1882 = C::ty_half_lanes(ctx, v11);
                                        let v1883 = v1882?;
                                        let v1884 = C::vstate_from_type(ctx, v1883);
                                        let v1885 = C::vstate_mf2(ctx, v1884);
                                        let v1886 =
                                            constructor_rv_vnclip_wi(ctx, v161, v1881, v163, v1885);
                                        let v1887 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1888 = constructor_rv_vnclip_wi(
                                            ctx, v1887, v1881, v163, v1885,
                                        );
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1889 = constructor_rv_vslideup_vvi(
                                            ctx, v1886, v1888, v1837, v163, v164,
                                        );
                                        let v1890 = constructor_output_vreg(ctx, v1889);
                                        // Rule at src/isa/riscv64/lower.isle line 2090.
                                        return Some(v1890);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1792 = C::ty_lane_count(ctx, v11);
                            let v1834 = C::u64_udiv(ctx, v1792, 0x2);
                            if let Some(v1835) = v1834 {
                                let v1836 = constructor_u64_to_uimm5(ctx, v1835);
                                if let Some(v1837) = v1836 {
                                    let v1880 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v1881) = v1880 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1746 = C::zero_reg(ctx);
                                        let v1747 = C::xreg_new(ctx, v1746);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v1879 = C::value_type(ctx, v38.0);
                                        let v1895 = C::vstate_from_type(ctx, v1879);
                                        let v1896 =
                                            constructor_rv_vmax_vx(ctx, v161, v1747, v163, v1895);
                                        let v1854 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1897 = C::zero_reg(ctx);
                                        let v1898 = C::xreg_new(ctx, v1897);
                                        let v1899 =
                                            constructor_rv_vmax_vx(ctx, v1854, v1898, v163, v1895);
                                        let v1882 = C::ty_half_lanes(ctx, v11);
                                        let v1883 = v1882?;
                                        let v1884 = C::vstate_from_type(ctx, v1883);
                                        let v1885 = C::vstate_mf2(ctx, v1884);
                                        let v1900 = constructor_rv_vnclipu_wi(
                                            ctx, v1896, v1881, v163, v1885,
                                        );
                                        let v1901 = constructor_rv_vnclipu_wi(
                                            ctx, v1899, v1881, v163, v1885,
                                        );
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1902 = constructor_rv_vslideup_vvi(
                                            ctx, v1900, v1901, v1837, v163, v164,
                                        );
                                        let v1903 = constructor_output_vreg(ctx, v1902);
                                        // Rule at src/isa/riscv64/lower.isle line 2112.
                                        return Some(v1903);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1792 = C::ty_lane_count(ctx, v11);
                            let v1834 = C::u64_udiv(ctx, v1792, 0x2);
                            if let Some(v1835) = v1834 {
                                let v1836 = constructor_u64_to_uimm5(ctx, v1835);
                                if let Some(v1837) = v1836 {
                                    let v1880 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v1881) = v1880 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v1882 = C::ty_half_lanes(ctx, v11);
                                        let v1883 = v1882?;
                                        let v1884 = C::vstate_from_type(ctx, v1883);
                                        let v1885 = C::vstate_mf2(ctx, v1884);
                                        let v1891 = constructor_rv_vnclipu_wi(
                                            ctx, v161, v1881, v163, v1885,
                                        );
                                        let v1887 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1892 = constructor_rv_vnclipu_wi(
                                            ctx, v1887, v1881, v163, v1885,
                                        );
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1893 = constructor_rv_vslideup_vvi(
                                            ctx, v1891, v1892, v1837, v163, v164,
                                        );
                                        let v1894 = constructor_output_vreg(ctx, v1893);
                                        // Rule at src/isa/riscv64/lower.isle line 2099.
                                        return Some(v1894);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1792 = C::ty_lane_count(ctx, v11);
                            let v1834 = C::u64_udiv(ctx, v1792, 0x2);
                            if let Some(v1835) = v1834 {
                                let v1836 = constructor_u64_to_uimm5(ctx, v1835);
                                if let Some(v1837) = v1836 {
                                    let v1838 = constructor_gen_vec_mask(ctx, 0x5555555555555555);
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v1839 = constructor_put_in_vreg(ctx, v38.0);
                                    let v164 = C::vstate_from_type(ctx, v11);
                                    let v1840 =
                                        constructor_rv_vcompress_vm(ctx, v1839, v1838, v164);
                                    let v1841 = constructor_put_in_vreg(ctx, v38.1);
                                    let v1842 =
                                        constructor_rv_vcompress_vm(ctx, v1841, v1838, v164);
                                    let v163 = &constructor_unmasked(ctx);
                                    let v1843 = constructor_rv_vslideup_vvi(
                                        ctx, v1840, v1842, v1837, v163, v164,
                                    );
                                    let v1845 = constructor_gen_vec_mask(ctx, 0xAAAAAAAAAAAAAAAA);
                                    let v1846 = constructor_put_in_vreg(ctx, v38.0);
                                    let v1847 =
                                        constructor_rv_vcompress_vm(ctx, v1846, v1845, v164);
                                    let v1848 = constructor_put_in_vreg(ctx, v38.1);
                                    let v1849 =
                                        constructor_rv_vcompress_vm(ctx, v1848, v1845, v164);
                                    let v1850 = constructor_rv_vslideup_vvi(
                                        ctx, v1847, v1849, v1837, v163, v164,
                                    );
                                    let v1851 =
                                        constructor_rv_vadd_vv(ctx, v1843, v1850, v163, v164);
                                    let v1852 = constructor_output_vreg(ctx, v1851);
                                    // Rule at src/isa/riscv64/lower.isle line 2024.
                                    return Some(v1852);
                                }
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v1353 = C::xreg_to_reg(ctx, v41);
                            let v1354 = C::xreg_to_reg(ctx, v42);
                            let v1355 = C::value_regs(ctx, v1353, v1354);
                            let v1356 = C::output(ctx, v1355);
                            // Rule at src/isa/riscv64/lower.isle line 1398.
                            return Some(v1356);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1650,
            arg: v1651,
            imm: v1652,
        } => {
            if let &Opcode::Extractlane = v1650 {
                let v1655 = constructor_put_in_vreg(ctx, v1651);
                let v1653 = C::value_type(ctx, v1651);
                let v1654 = C::u8_from_uimm8(ctx, v1652);
                let v1656 = constructor_gen_extractlane(ctx, v1653, v1655, v1654);
                let v1657 = constructor_output_reg(ctx, v1656);
                // Rule at src/isa/riscv64/lower.isle line 1789.
                return Some(v1657);
            }
        }
        &InstructionData::Call {
            opcode: ref v1630,
            args: v1631,
            func_ref: v1632,
        } => {
            match v1630 {
                &Opcode::Call => {
                    let v1634 = C::func_ref_data(ctx, v1632);
                    let v1633 = C::value_list_slice(ctx, v1631);
                    let v1638 = C::gen_call(ctx, v1634.0, v1634.1, v1634.2, v1633);
                    // Rule at src/isa/riscv64/lower.isle line 1772.
                    return Some(v1638);
                }
                &Opcode::ReturnCall => {
                    let v1634 = C::func_ref_data(ctx, v1632);
                    let v1633 = C::value_list_slice(ctx, v1631);
                    let v1648 = C::gen_return_call(ctx, v1634.0, v1634.1, v1634.2, v1633);
                    // Rule at src/isa/riscv64/lower.isle line 1780.
                    return Some(v1648);
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1639,
            args: v1640,
            sig_ref: v1641,
        } => {
            match v1639 {
                &Opcode::CallIndirect => {
                    let v1642 = C::value_list_slice(ctx, v1640);
                    let v1643 = C::value_slice_unwrap(ctx, v1642);
                    if let Some(v1644) = v1643 {
                        let v1647 = C::gen_call_indirect(ctx, v1641, v1644.0, v1644.1);
                        // Rule at src/isa/riscv64/lower.isle line 1775.
                        return Some(v1647);
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1642 = C::value_list_slice(ctx, v1640);
                    let v1643 = C::value_slice_unwrap(ctx, v1642);
                    if let Some(v1644) = v1643 {
                        let v1649 = C::gen_return_call_indirect(ctx, v1641, v1644.0, v1644.1);
                        // Rule at src/isa/riscv64/lower.isle line 1783.
                        return Some(v1649);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1503,
            args: ref v1504,
            cond: ref v1505,
        } => {
            if let &Opcode::Fcmp = v1503 {
                let v1506 = C::unpack_value_array_2(ctx, v1504);
                let v1509 = C::value_type(ctx, v1506.0);
                let v1517 = C::ty_vec_fits_in_register(ctx, v1509);
                if let Some(v1518) = v1517 {
                    let v1519 = constructor_gen_fcmp_mask(ctx, v1518, v1505, v1506.0, v1506.1);
                    let v1520 = constructor_gen_expand_mask(ctx, v1518, v1519);
                    let v1521 = constructor_output_vreg(ctx, v1520);
                    // Rule at src/isa/riscv64/lower.isle line 1618.
                    return Some(v1521);
                }
                let v1510 = C::ty_scalar_float(ctx, v1509);
                if let Some(v1511) = v1510 {
                    let v1512 = constructor_put_in_freg(ctx, v1506.0);
                    let v1513 = constructor_put_in_freg(ctx, v1506.1);
                    let v1514 = &constructor_emit_fcmp(ctx, v1505, v1511, v1512, v1513);
                    let v1515 = constructor_cmp_value(ctx, v1514);
                    let v1516 = constructor_output_xreg(ctx, v1515);
                    // Rule at src/isa/riscv64/lower.isle line 1615.
                    return Some(v1516);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1522,
            func_ref: v1523,
        } => {
            if let &Opcode::FuncAddr = v1522 {
                let v1524 = C::func_ref_data(ctx, v1523);
                let v1529 = C::load_ext_name(ctx, v1524.1, 0x0);
                let v1530 = constructor_output_reg(ctx, v1529);
                // Rule at src/isa/riscv64/lower.isle line 1623.
                return Some(v1530);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v374,
            args: ref v375,
            code: ref v376,
        } => {
            if let &Opcode::UaddOverflowTrap = v374 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v372 = C::fits_in_64(ctx, v3);
                    if let Some(v373) = v372 {
                        let v377 = C::unpack_value_array_2(ctx, v375);
                        let v380 = constructor_put_in_xreg(ctx, v377.0);
                        let v381 = constructor_put_in_xreg(ctx, v377.1);
                        let v382 = constructor_lower_uadd_overflow(ctx, v380, v381, v373);
                        let v383 = C::value_regs_get(ctx, v382, 0x1);
                        let v384 = C::xreg_new(ctx, v383);
                        let v385 = constructor_gen_trapif(ctx, v384, v376);
                        let v386 = C::value_regs_get(ctx, v382, 0x0);
                        let v387 = constructor_output_reg(ctx, v386);
                        // Rule at src/isa/riscv64/lower.isle line 298.
                        return Some(v387);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1485,
            args: ref v1486,
            cond: ref v1487,
        } => {
            if let &Opcode::Icmp = v1485 {
                let v1488 = C::unpack_value_array_2(ctx, v1486);
                let v1491 = C::value_type(ctx, v1488.0);
                let v1498 = C::ty_vec_fits_in_register(ctx, v1491);
                if let Some(v1499) = v1498 {
                    let v1500 = constructor_gen_icmp_mask(ctx, v1499, v1487, v1488.0, v1488.1);
                    let v1501 = constructor_gen_expand_mask(ctx, v1499, v1500);
                    let v1502 = constructor_output_vreg(ctx, v1501);
                    // Rule at src/isa/riscv64/lower.isle line 1610.
                    return Some(v1502);
                }
                let v1492 = C::ty_int(ctx, v1491);
                if let Some(v1493) = v1492 {
                    let v1494 = C::put_in_regs(ctx, v1488.0);
                    let v1495 = C::put_in_regs(ctx, v1488.1);
                    let v1496 = constructor_lower_icmp(ctx, v1487, v1494, v1495, v1493);
                    let v1497 = constructor_output_reg(ctx, v1496);
                    // Rule at src/isa/riscv64/lower.isle line 1607.
                    return Some(v1497);
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1409,
            arg: v1410,
            flags: v1411,
            offset: v1412,
        } => {
            match v1409 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1413 = C::value_type(ctx, v1410);
                        let v1414 = C::ty_addr64(ctx, v1413);
                        if let Some(v1415) = v1414 {
                            let v3 = C::value_type(ctx, v2);
                            let v10 = C::ty_vec_fits_in_register(ctx, v3);
                            if let Some(v11) = v10 {
                                let v1416 = C::put_in_reg(ctx, v1410);
                                let v1444 = C::gen_amode(ctx, v1416, v1412, I64);
                                let v1443 = &constructor_element_width_from_type(ctx, v11);
                                let v1445 = VecAMode::UnitStride { base: v1444 };
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v1446 =
                                    constructor_vec_load(ctx, v1443, &v1445, v1411, v163, v164);
                                let v1447 = constructor_output_reg(ctx, v1446);
                                // Rule at src/isa/riscv64/lower.isle line 1519.
                                return Some(v1447);
                            }
                            if v3 == I128 {
                                let v1416 = C::put_in_reg(ctx, v1410);
                                let v1441 = constructor_gen_load_128(ctx, v1416, v1412, v1411);
                                let v1442 = C::output(ctx, v1441);
                                // Rule at src/isa/riscv64/lower.isle line 1515.
                                return Some(v1442);
                            }
                            let v1416 = C::put_in_reg(ctx, v1410);
                            let v1438 = &C::load_op(ctx, v3);
                            let v1439 = constructor_gen_load(ctx, v1416, v1412, v1438, v1411, v3);
                            let v1440 = constructor_output_reg(ctx, v1439);
                            // Rule at src/isa/riscv64/lower.isle line 1511.
                            return Some(v1440);
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1413 = C::value_type(ctx, v1410);
                    let v1414 = C::ty_addr64(ctx, v1413);
                    if let Some(v1415) = v1414 {
                        let v1416 = C::put_in_reg(ctx, v1410);
                        let v1418 = &constructor_int_load_op(ctx, false, 0x8);
                        let v1419 = constructor_gen_load(ctx, v1416, v1412, v1418, v1411, I64);
                        let v1420 = constructor_output_reg(ctx, v1419);
                        // Rule at src/isa/riscv64/lower.isle line 1484.
                        return Some(v1420);
                    }
                }
                &Opcode::Sload8 => {
                    let v1413 = C::value_type(ctx, v1410);
                    let v1414 = C::ty_addr64(ctx, v1413);
                    if let Some(v1415) = v1414 {
                        let v1416 = C::put_in_reg(ctx, v1410);
                        let v1421 = &constructor_int_load_op(ctx, true, 0x8);
                        let v1422 = constructor_gen_load(ctx, v1416, v1412, v1421, v1411, I64);
                        let v1423 = constructor_output_reg(ctx, v1422);
                        // Rule at src/isa/riscv64/lower.isle line 1488.
                        return Some(v1423);
                    }
                }
                &Opcode::Uload16 => {
                    let v1413 = C::value_type(ctx, v1410);
                    let v1414 = C::ty_addr64(ctx, v1413);
                    if let Some(v1415) = v1414 {
                        let v1416 = C::put_in_reg(ctx, v1410);
                        let v1425 = &constructor_int_load_op(ctx, false, 0x10);
                        let v1426 = constructor_gen_load(ctx, v1416, v1412, v1425, v1411, I64);
                        let v1427 = constructor_output_reg(ctx, v1426);
                        // Rule at src/isa/riscv64/lower.isle line 1492.
                        return Some(v1427);
                    }
                }
                &Opcode::Sload16 => {
                    let v1413 = C::value_type(ctx, v1410);
                    let v1414 = C::ty_addr64(ctx, v1413);
                    if let Some(v1415) = v1414 {
                        let v1416 = C::put_in_reg(ctx, v1410);
                        let v1428 = &constructor_int_load_op(ctx, true, 0x10);
                        let v1429 = constructor_gen_load(ctx, v1416, v1412, v1428, v1411, I64);
                        let v1430 = constructor_output_reg(ctx, v1429);
                        // Rule at src/isa/riscv64/lower.isle line 1497.
                        return Some(v1430);
                    }
                }
                &Opcode::Uload32 => {
                    let v1413 = C::value_type(ctx, v1410);
                    let v1414 = C::ty_addr64(ctx, v1413);
                    if let Some(v1415) = v1414 {
                        let v1416 = C::put_in_reg(ctx, v1410);
                        let v1432 = &constructor_int_load_op(ctx, false, 0x20);
                        let v1433 = constructor_gen_load(ctx, v1416, v1412, v1432, v1411, I64);
                        let v1434 = constructor_output_reg(ctx, v1433);
                        // Rule at src/isa/riscv64/lower.isle line 1502.
                        return Some(v1434);
                    }
                }
                &Opcode::Sload32 => {
                    let v1413 = C::value_type(ctx, v1410);
                    let v1414 = C::ty_addr64(ctx, v1413);
                    if let Some(v1415) = v1414 {
                        let v1416 = C::put_in_reg(ctx, v1410);
                        let v1435 = &constructor_int_load_op(ctx, true, 0x20);
                        let v1436 = constructor_gen_load(ctx, v1416, v1412, v1435, v1411, I64);
                        let v1437 = constructor_output_reg(ctx, v1436);
                        // Rule at src/isa/riscv64/lower.isle line 1507.
                        return Some(v1437);
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I16X8 {
                                let v1413 = C::value_type(ctx, v1410);
                                let v1414 = C::ty_addr64(ctx, v1413);
                                if let Some(v1415) = v1414 {
                                    let v1448 = constructor_put_in_xreg(ctx, v1410);
                                    let v1449 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Zero,
                                        v1411,
                                        v1448,
                                        v1412,
                                    );
                                    let v1450 = constructor_output_vreg(ctx, v1449);
                                    // Rule at src/isa/riscv64/lower.isle line 1546.
                                    return Some(v1450);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I16X8 {
                                let v1413 = C::value_type(ctx, v1410);
                                let v1414 = C::ty_addr64(ctx, v1413);
                                if let Some(v1415) = v1414 {
                                    let v1448 = constructor_put_in_xreg(ctx, v1410);
                                    let v1451 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Signed,
                                        v1411,
                                        v1448,
                                        v1412,
                                    );
                                    let v1452 = constructor_output_vreg(ctx, v1451);
                                    // Rule at src/isa/riscv64/lower.isle line 1558.
                                    return Some(v1452);
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I32X4 {
                                let v1413 = C::value_type(ctx, v1410);
                                let v1414 = C::ty_addr64(ctx, v1413);
                                if let Some(v1415) = v1414 {
                                    let v1448 = constructor_put_in_xreg(ctx, v1410);
                                    let v1449 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Zero,
                                        v1411,
                                        v1448,
                                        v1412,
                                    );
                                    let v1450 = constructor_output_vreg(ctx, v1449);
                                    // Rule at src/isa/riscv64/lower.isle line 1550.
                                    return Some(v1450);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I32X4 {
                                let v1413 = C::value_type(ctx, v1410);
                                let v1414 = C::ty_addr64(ctx, v1413);
                                if let Some(v1415) = v1414 {
                                    let v1448 = constructor_put_in_xreg(ctx, v1410);
                                    let v1451 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Signed,
                                        v1411,
                                        v1448,
                                        v1412,
                                    );
                                    let v1452 = constructor_output_vreg(ctx, v1451);
                                    // Rule at src/isa/riscv64/lower.isle line 1562.
                                    return Some(v1452);
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I64X2 {
                                let v1413 = C::value_type(ctx, v1410);
                                let v1414 = C::ty_addr64(ctx, v1413);
                                if let Some(v1415) = v1414 {
                                    let v1448 = constructor_put_in_xreg(ctx, v1410);
                                    let v1449 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Zero,
                                        v1411,
                                        v1448,
                                        v1412,
                                    );
                                    let v1450 = constructor_output_vreg(ctx, v1449);
                                    // Rule at src/isa/riscv64/lower.isle line 1554.
                                    return Some(v1450);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I64X2 {
                                let v1413 = C::value_type(ctx, v1410);
                                let v1414 = C::ty_addr64(ctx, v1413);
                                if let Some(v1415) = v1414 {
                                    let v1448 = constructor_put_in_xreg(ctx, v1410);
                                    let v1451 = constructor_gen_load64_extend(
                                        ctx,
                                        v11,
                                        &ExtendOp::Signed,
                                        v1411,
                                        v1448,
                                        v1412,
                                    );
                                    let v1452 = constructor_output_vreg(ctx, v1451);
                                    // Rule at src/isa/riscv64/lower.isle line 1566.
                                    return Some(v1452);
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1125,
            arg: v1126,
            flags: v1127,
        } => {
            match v1125 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1128 = C::put_in_reg(ctx, v1126);
                        let v1575 = C::value_type(ctx, v1126);
                        let v3 = C::value_type(ctx, v2);
                        let v1576 = constructor_gen_bitcast(ctx, v1128, v1575, v3);
                        let v1577 = constructor_output_reg(ctx, v1576);
                        // Rule at src/isa/riscv64/lower.isle line 1680.
                        return Some(v1577);
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1082 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1083) = v1082 {
                            let v1128 = C::put_in_reg(ctx, v1126);
                            let v1129 = constructor_gen_atomic_load(ctx, v1128, v1083);
                            let v1130 = constructor_output_reg(ctx, v1129);
                            // Rule at src/isa/riscv64/lower.isle line 1162.
                            return Some(v1130);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1612,
            args: v1613,
        } => {
            if let &Opcode::Return = v1612 {
                let v1614 = C::value_list_slice(ctx, v1613);
                let v1615 = constructor_lower_return(ctx, v1614);
                // Rule at src/isa/riscv64/lower.isle line 1737.
                return Some(v1615);
            }
        }
        &InstructionData::NullAry { opcode: ref v30 } => {
            match v30 {
                &Opcode::Debugtrap => {
                    let v1400 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v1401 = constructor_side_effect(ctx, &v1400);
                    // Rule at src/isa/riscv64/lower.isle line 1464.
                    return Some(v1401);
                }
                &Opcode::GetFramePointer => {
                    let v1616 = C::fp_reg(ctx);
                    let v1617 = constructor_gen_mov_from_preg(ctx, v1616);
                    let v1618 = constructor_output_reg(ctx, v1617);
                    // Rule at src/isa/riscv64/lower.isle line 1742.
                    return Some(v1618);
                }
                &Opcode::GetStackPointer => {
                    let v1619 = C::sp_reg(ctx);
                    let v1620 = constructor_gen_mov_from_preg(ctx, v1619);
                    let v1621 = constructor_output_reg(ctx, v1620);
                    // Rule at src/isa/riscv64/lower.isle line 1745.
                    return Some(v1621);
                }
                &Opcode::GetReturnAddress => {
                    let v1622 = C::load_ra(ctx);
                    let v1623 = constructor_output_reg(ctx, v1622);
                    // Rule at src/isa/riscv64/lower.isle line 1748.
                    return Some(v1623);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = constructor_imm(ctx, v3, 0x0);
                        let v33 = constructor_output_reg(ctx, v32);
                        // Rule at src/isa/riscv64/lower.isle line 29.
                        return Some(v33);
                    }
                }
                &Opcode::Fence => {
                    let v1403 = MInst::Fence {
                        pred: 0xF,
                        succ: 0xF,
                    };
                    let v1404 = SideEffectNoResult::Inst { inst: v1403 };
                    let v1405 = constructor_side_effect(ctx, &v1404);
                    // Rule at src/isa/riscv64/lower.isle line 1469.
                    return Some(v1405);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1766,
            args: ref v1767,
            imm: v1768,
        } => {
            if let &Opcode::Shuffle = v1766 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v10 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v11) = v10 {
                        if v11 == I8X16 {
                            let v1772 = C::vconst_from_immediate(ctx, v1768);
                            if let Some(v1773) = v1772 {
                                let v1775 = C::i8_to_imm5(ctx, -0x10);
                                if let Some(v1776) = v1775 {
                                    let v1777 = constructor_gen_constant(ctx, v11, v1773);
                                    let v1769 = C::unpack_value_array_2(ctx, v1767);
                                    let v1778 = constructor_put_in_vreg(ctx, v1769.0);
                                    let v163 = &constructor_unmasked(ctx);
                                    let v164 = C::vstate_from_type(ctx, v11);
                                    let v1779 =
                                        constructor_rv_vrgather_vv(ctx, v1778, v1777, v163, v164);
                                    let v1780 =
                                        constructor_rv_vadd_vi(ctx, v1777, v1776, v163, v164);
                                    let v1781 = constructor_put_in_vreg(ctx, v1769.1);
                                    let v1782 =
                                        constructor_rv_vrgather_vv(ctx, v1781, v1780, v163, v164);
                                    let v1783 =
                                        constructor_rv_vor_vv(ctx, v1779, v1782, v163, v164);
                                    let v1784 = constructor_output_vreg(ctx, v1783);
                                    // Rule at src/isa/riscv64/lower.isle line 1951.
                                    return Some(v1784);
                                }
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1235,
            stack_slot: v1236,
            offset: v1237,
        } => {
            if let &Opcode::StackAddr = v1235 {
                let v1238 = C::gen_stack_addr(ctx, v1236, v1237);
                let v1239 = constructor_output_reg(ctx, v1238);
                // Rule at src/isa/riscv64/lower.isle line 1321.
                return Some(v1239);
            }
        }
        &InstructionData::Store {
            opcode: ref v1453,
            args: ref v1454,
            flags: v1455,
            offset: v1456,
        } => {
            match v1453 {
                &Opcode::Store => {
                    let v1457 = C::unpack_value_array_2(ctx, v1454);
                    let v1460 = C::value_type(ctx, v1457.1);
                    let v1461 = C::ty_addr64(ctx, v1460);
                    if let Some(v1462) = v1461 {
                        let v1471 = C::value_type(ctx, v1457.0);
                        let v1477 = C::ty_vec_fits_in_register(ctx, v1471);
                        if let Some(v1478) = v1477 {
                            let v1463 = C::put_in_reg(ctx, v1457.1);
                            let v1480 = C::gen_amode(ctx, v1463, v1456, I64);
                            let v1482 = constructor_put_in_vreg(ctx, v1457.0);
                            let v1479 = &constructor_element_width_from_type(ctx, v1478);
                            let v1481 = VecAMode::UnitStride { base: v1480 };
                            let v163 = &constructor_unmasked(ctx);
                            let v1483 = C::vstate_from_type(ctx, v1478);
                            let v1484 = constructor_vec_store(
                                ctx, v1479, &v1481, v1482, v1455, v163, v1483,
                            );
                            // Rule at src/isa/riscv64/lower.isle line 1593.
                            return Some(v1484);
                        }
                        if v1471 == I128 {
                            let v1463 = C::put_in_reg(ctx, v1457.1);
                            let v1475 = C::put_in_regs(ctx, v1457.0);
                            let v1476 = constructor_gen_store_128(ctx, v1463, v1456, v1455, v1475);
                            // Rule at src/isa/riscv64/lower.isle line 1589.
                            return Some(v1476);
                        }
                        let v1463 = C::put_in_reg(ctx, v1457.1);
                        let v1472 = &C::store_op(ctx, v1471);
                        let v1473 = C::put_in_reg(ctx, v1457.0);
                        let v1474 = constructor_gen_store(ctx, v1463, v1456, v1472, v1455, v1473);
                        // Rule at src/isa/riscv64/lower.isle line 1585.
                        return Some(v1474);
                    }
                }
                &Opcode::Istore8 => {
                    let v1457 = C::unpack_value_array_2(ctx, v1454);
                    let v1460 = C::value_type(ctx, v1457.1);
                    let v1461 = C::ty_addr64(ctx, v1460);
                    if let Some(v1462) = v1461 {
                        let v1463 = C::put_in_reg(ctx, v1457.1);
                        let v1465 = C::put_in_reg(ctx, v1457.0);
                        let v1466 =
                            constructor_gen_store(ctx, v1463, v1456, &StoreOP::Sb, v1455, v1465);
                        // Rule at src/isa/riscv64/lower.isle line 1571.
                        return Some(v1466);
                    }
                }
                &Opcode::Istore16 => {
                    let v1457 = C::unpack_value_array_2(ctx, v1454);
                    let v1460 = C::value_type(ctx, v1457.1);
                    let v1461 = C::ty_addr64(ctx, v1460);
                    if let Some(v1462) = v1461 {
                        let v1463 = C::put_in_reg(ctx, v1457.1);
                        let v1465 = C::put_in_reg(ctx, v1457.0);
                        let v1468 =
                            constructor_gen_store(ctx, v1463, v1456, &StoreOP::Sh, v1455, v1465);
                        // Rule at src/isa/riscv64/lower.isle line 1575.
                        return Some(v1468);
                    }
                }
                &Opcode::Istore32 => {
                    let v1457 = C::unpack_value_array_2(ctx, v1454);
                    let v1460 = C::value_type(ctx, v1457.1);
                    let v1461 = C::ty_addr64(ctx, v1460);
                    if let Some(v1462) = v1461 {
                        let v1463 = C::put_in_reg(ctx, v1457.1);
                        let v1465 = C::put_in_reg(ctx, v1457.0);
                        let v1470 =
                            constructor_gen_store(ctx, v1463, v1456, &StoreOP::Sw, v1455, v1465);
                        // Rule at src/isa/riscv64/lower.isle line 1580.
                        return Some(v1470);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1131,
            args: ref v1132,
            flags: v1133,
        } => {
            if let &Opcode::AtomicStore = v1131 {
                let v1134 = C::unpack_value_array_2(ctx, v1132);
                let v1137 = C::value_type(ctx, v1134.0);
                let v1138 = C::valid_atomic_transaction(ctx, v1137);
                if let Some(v1139) = v1138 {
                    let v1140 = C::put_in_reg(ctx, v1134.1);
                    let v1141 = C::put_in_reg(ctx, v1134.0);
                    let v1142 = constructor_gen_atomic_store(ctx, v1140, v1139, v1141);
                    // Rule at src/isa/riscv64/lower.isle line 1168.
                    return Some(v1142);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v1029,
            args: ref v1030,
        } => {
            match v1029 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v1031 = C::unpack_value_array_3(ctx, v1030);
                            let v1045 = C::def_inst(ctx, v1031.0);
                            if let Some(v1046) = v1045 {
                                let v1047 = &C::inst_data(ctx, v1046);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1256,
                                    args: ref v1257,
                                    cond: ref v1258,
                                } = v1047
                                {
                                    if let &Opcode::Icmp = v1256 {
                                        let v1259 = C::unpack_value_array_2(ctx, v1257);
                                        let v1262 = C::value_type(ctx, v1259.1);
                                        let v1263 = C::fits_in_64(ctx, v1262);
                                        if let Some(v1264) = v1263 {
                                            let v1265 = C::put_in_regs(ctx, v1259.0);
                                            let v1266 = &C::intcc_to_extend_op(ctx, v1258);
                                            let v1267 = constructor_normalize_cmp_value(
                                                ctx, v1264, v1265, v1266,
                                            );
                                            let v1268 =
                                                constructor_truthy_to_reg(ctx, v1264, v1267);
                                            let v1269 = C::put_in_regs(ctx, v1259.1);
                                            let v1270 = &C::intcc_to_extend_op(ctx, v1258);
                                            let v1271 = constructor_normalize_cmp_value(
                                                ctx, v1264, v1269, v1270,
                                            );
                                            let v1272 =
                                                constructor_truthy_to_reg(ctx, v1264, v1271);
                                            let v1273 = C::put_in_reg(ctx, v1031.1);
                                            let v1274 = C::put_in_reg(ctx, v1031.2);
                                            let v1275 = C::gen_select_reg(
                                                ctx, v1258, v1268, v1272, v1273, v1274,
                                            );
                                            let v1276 = constructor_output_reg(ctx, v1275);
                                            // Rule at src/isa/riscv64/lower.isle line 1341.
                                            return Some(v1276);
                                        }
                                    }
                                }
                            }
                        }
                        let v1031 = C::unpack_value_array_3(ctx, v1030);
                        let v1248 = C::put_in_regs(ctx, v1031.0);
                        let v1247 = C::value_type(ctx, v1031.0);
                        let v1249 =
                            constructor_normalize_cmp_value(ctx, v1247, v1248, &ExtendOp::Zero);
                        let v1250 = constructor_truthy_to_reg(ctx, v1247, v1249);
                        let v1252 = C::put_in_regs(ctx, v1031.1);
                        let v1253 = C::put_in_regs(ctx, v1031.2);
                        let v1251 = C::xreg_to_reg(ctx, v1250);
                        let v1254 = constructor_gen_select(ctx, v3, v1251, v1252, v1253);
                        let v1255 = C::output(ctx, v1254);
                        // Rule at src/isa/riscv64/lower.isle line 1338.
                        return Some(v1255);
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1031 = C::unpack_value_array_3(ctx, v1030);
                        let v1248 = C::put_in_regs(ctx, v1031.0);
                        let v1602 = C::value_type(ctx, v1031.1);
                        let v1247 = C::value_type(ctx, v1031.0);
                        let v1603 = constructor_lower_bmask(ctx, v1602, v1247, v1248);
                        let v1604 = C::put_in_regs(ctx, v1031.1);
                        let v1605 = constructor_gen_and(ctx, v1602, v1604, v1603);
                        let v1253 = C::put_in_regs(ctx, v1031.2);
                        let v1606 = constructor_gen_bnot(ctx, v1602, v1603);
                        let v1607 = constructor_gen_and(ctx, v1602, v1253, v1606);
                        let v1608 = constructor_gen_or(ctx, v1602, v1605, v1607);
                        let v1609 = C::output(ctx, v1608);
                        // Rule at src/isa/riscv64/lower.isle line 1719.
                        return Some(v1609);
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1031 = C::unpack_value_array_3(ctx, v1030);
                            let v1045 = C::def_inst(ctx, v1031.0);
                            if let Some(v1046) = v1045 {
                                let v1047 = &C::inst_data(ctx, v1046);
                                match v1047 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1302,
                                        args: ref v1303,
                                        cond: ref v1304,
                                    } => {
                                        if let &Opcode::Fcmp = v1302 {
                                            let v1305 = C::unpack_value_array_2(ctx, v1303);
                                            let v1308 = C::value_type(ctx, v1305.0);
                                            let v1309 = C::ty_vec_fits_in_register(ctx, v1308);
                                            if let Some(v1310) = v1309 {
                                                let v1311 = constructor_gen_fcmp_mask(
                                                    ctx, v1310, v1304, v1305.0, v1305.1,
                                                );
                                                let v1298 = constructor_put_in_vreg(ctx, v1031.2);
                                                let v1299 = constructor_put_in_vreg(ctx, v1031.1);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1312 = constructor_rv_vmerge_vvm(
                                                    ctx, v1298, v1299, v1311, v164,
                                                );
                                                let v1313 = constructor_output_vreg(ctx, v1312);
                                                // Rule at src/isa/riscv64/lower.isle line 1375.
                                                return Some(v1313);
                                            }
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1256,
                                        args: ref v1257,
                                        cond: ref v1258,
                                    } => {
                                        if let &Opcode::Icmp = v1256 {
                                            let v1259 = C::unpack_value_array_2(ctx, v1257);
                                            let v1294 = C::value_type(ctx, v1259.0);
                                            let v1295 = C::ty_vec_fits_in_register(ctx, v1294);
                                            if let Some(v1296) = v1295 {
                                                let v1297 = constructor_gen_icmp_mask(
                                                    ctx, v1296, v1258, v1259.0, v1259.1,
                                                );
                                                let v1298 = constructor_put_in_vreg(ctx, v1031.2);
                                                let v1299 = constructor_put_in_vreg(ctx, v1031.1);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1300 = constructor_rv_vmerge_vvm(
                                                    ctx, v1298, v1299, v1297, v164,
                                                );
                                                let v1301 = constructor_output_vreg(ctx, v1300);
                                                // Rule at src/isa/riscv64/lower.isle line 1371.
                                                return Some(v1301);
                                            }
                                        }
                                    }
                                    &InstructionData::LoadNoOffset {
                                        opcode: ref v1314,
                                        arg: v1315,
                                        flags: v1316,
                                    } => {
                                        if let &Opcode::Bitcast = v1314 {
                                            let v1317 = C::def_inst(ctx, v1315);
                                            if let Some(v1318) = v1317 {
                                                let v1319 = &C::inst_data(ctx, v1318);
                                                match v1319 {
                                                    &InstructionData::FloatCompare {
                                                        opcode: ref v1320,
                                                        args: ref v1321,
                                                        cond: ref v1322,
                                                    } => {
                                                        if let &Opcode::Fcmp = v1320 {
                                                            let v1323 =
                                                                C::unpack_value_array_2(ctx, v1321);
                                                            let v1326 = C::value_type(ctx, v1323.0);
                                                            let v1327 = C::ty_vec_fits_in_register(
                                                                ctx, v1326,
                                                            );
                                                            if let Some(v1328) = v1327 {
                                                                let v1329 =
                                                                    constructor_gen_fcmp_mask(
                                                                        ctx, v1328, v1322, v1323.0,
                                                                        v1323.1,
                                                                    );
                                                                let v1298 = constructor_put_in_vreg(
                                                                    ctx, v1031.2,
                                                                );
                                                                let v1299 = constructor_put_in_vreg(
                                                                    ctx, v1031.1,
                                                                );
                                                                let v164 =
                                                                    C::vstate_from_type(ctx, v11);
                                                                let v1330 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1298, v1299, v1329,
                                                                        v164,
                                                                    );
                                                                let v1331 = constructor_output_vreg(
                                                                    ctx, v1330,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 1379.
                                                                return Some(v1331);
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::IntCompare {
                                                        opcode: ref v1332,
                                                        args: ref v1333,
                                                        cond: ref v1334,
                                                    } => {
                                                        if let &Opcode::Icmp = v1332 {
                                                            let v1335 =
                                                                C::unpack_value_array_2(ctx, v1333);
                                                            let v1338 = C::value_type(ctx, v1335.0);
                                                            let v1339 = C::ty_vec_fits_in_register(
                                                                ctx, v1338,
                                                            );
                                                            if let Some(v1340) = v1339 {
                                                                let v1341 =
                                                                    constructor_gen_icmp_mask(
                                                                        ctx, v1340, v1334, v1335.0,
                                                                        v1335.1,
                                                                    );
                                                                let v1298 = constructor_put_in_vreg(
                                                                    ctx, v1031.2,
                                                                );
                                                                let v1299 = constructor_put_in_vreg(
                                                                    ctx, v1031.1,
                                                                );
                                                                let v164 =
                                                                    C::vstate_from_type(ctx, v11);
                                                                let v1342 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1298, v1299, v1341,
                                                                        v164,
                                                                    );
                                                                let v1343 = constructor_output_vreg(
                                                                    ctx, v1342,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 1383.
                                                                return Some(v1343);
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v1286 = constructor_put_in_vreg(ctx, v1031.0);
                            let v1041 = constructor_put_in_vreg(ctx, v1031.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1287 = constructor_rv_vand_vv(ctx, v1286, v1041, v163, v164);
                            let v1288 = constructor_put_in_vreg(ctx, v1031.0);
                            let v1289 = constructor_rv_vnot_v(ctx, v1288, v163, v164);
                            let v1290 = constructor_put_in_vreg(ctx, v1031.2);
                            let v1291 = constructor_rv_vand_vv(ctx, v1289, v1290, v163, v164);
                            let v1292 = constructor_rv_vor_vv(ctx, v1287, v1291, v163, v164);
                            let v1293 = constructor_output_vreg(ctx, v1292);
                            // Rule at src/isa/riscv64/lower.isle line 1361.
                            return Some(v1293);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v1031 = C::unpack_value_array_3(ctx, v1030);
                            let v1277 = constructor_put_in_xreg(ctx, v1031.0);
                            let v1278 = constructor_put_in_xreg(ctx, v1031.1);
                            let v1279 = constructor_rv_and(ctx, v1277, v1278);
                            let v1280 = constructor_put_in_xreg(ctx, v1031.0);
                            let v1281 = constructor_rv_not(ctx, v1280);
                            let v1282 = constructor_put_in_xreg(ctx, v1031.2);
                            let v1283 = constructor_rv_and(ctx, v1281, v1282);
                            let v1284 = constructor_rv_or(ctx, v1279, v1283);
                            let v1285 = constructor_output_xreg(ctx, v1284);
                            // Rule at src/isa/riscv64/lower.isle line 1350.
                            return Some(v1285);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1031 = C::unpack_value_array_3(ctx, v1030);
                            let v1045 = C::def_inst(ctx, v1031.0);
                            if let Some(v1046) = v1045 {
                                let v1047 = &C::inst_data(ctx, v1046);
                                if let &InstructionData::Unary {
                                    opcode: ref v1048,
                                    arg: v1049,
                                } = v1047
                                {
                                    match v1048 {
                                        &Opcode::Splat => {
                                            let v1053 = C::def_inst(ctx, v1031.2);
                                            if let Some(v1054) = v1053 {
                                                let v1055 = &C::inst_data(ctx, v1054);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1056,
                                                    arg: v1057,
                                                } = v1055
                                                {
                                                    if let &Opcode::Fneg = v1056 {
                                                        let v1058 =
                                                            constructor_put_in_vreg(ctx, v1057);
                                                        let v1041 =
                                                            constructor_put_in_vreg(ctx, v1031.1);
                                                        let v1050 =
                                                            constructor_put_in_freg(ctx, v1049);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1061 = constructor_rv_vfmsac_vf(
                                                            ctx, v1058, v1041, v1050, v163, v164,
                                                        );
                                                        let v1062 =
                                                            constructor_output_vreg(ctx, v1061);
                                                        // Rule at src/isa/riscv64/lower.isle line 1078.
                                                        return Some(v1062);
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Fneg => {
                                            let v1066 = C::def_inst(ctx, v1049);
                                            if let Some(v1067) = v1066 {
                                                let v1068 = &C::inst_data(ctx, v1067);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1069,
                                                    arg: v1070,
                                                } = v1068
                                                {
                                                    if let &Opcode::Splat = v1069 {
                                                        let v1053 = C::def_inst(ctx, v1031.2);
                                                        if let Some(v1054) = v1053 {
                                                            let v1055 = &C::inst_data(ctx, v1054);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v1056,
                                                                arg: v1057,
                                                            } = v1055
                                                            {
                                                                if let &Opcode::Fneg = v1056 {
                                                                    let v1058 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v1057,
                                                                        );
                                                                    let v1041 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v1031.1,
                                                                        );
                                                                    let v1071 =
                                                                        constructor_put_in_freg(
                                                                            ctx, v1070,
                                                                        );
                                                                    let v163 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v164 = C::vstate_from_type(
                                                                        ctx, v11,
                                                                    );
                                                                    let v1072 =
                                                                        constructor_rv_vfnmacc_vf(
                                                                            ctx, v1058, v1041,
                                                                            v1071, v163, v164,
                                                                        );
                                                                    let v1073 =
                                                                        constructor_output_vreg(
                                                                            ctx, v1072,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 1086.
                                                                    return Some(v1073);
                                                                }
                                                            }
                                                        }
                                                        let v1040 =
                                                            constructor_put_in_vreg(ctx, v1031.2);
                                                        let v1041 =
                                                            constructor_put_in_vreg(ctx, v1031.1);
                                                        let v1071 =
                                                            constructor_put_in_freg(ctx, v1070);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1076 = constructor_rv_vfnmsac_vf(
                                                            ctx, v1040, v1041, v1071, v163, v164,
                                                        );
                                                        let v1077 =
                                                            constructor_output_vreg(ctx, v1076);
                                                        // Rule at src/isa/riscv64/lower.isle line 1094.
                                                        return Some(v1077);
                                                    }
                                                }
                                            }
                                            let v1053 = C::def_inst(ctx, v1031.2);
                                            if let Some(v1054) = v1053 {
                                                let v1055 = &C::inst_data(ctx, v1054);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1056,
                                                    arg: v1057,
                                                } = v1055
                                                {
                                                    if let &Opcode::Fneg = v1056 {
                                                        let v1058 =
                                                            constructor_put_in_vreg(ctx, v1057);
                                                        let v1041 =
                                                            constructor_put_in_vreg(ctx, v1031.1);
                                                        let v1063 =
                                                            constructor_put_in_vreg(ctx, v1049);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1064 = constructor_rv_vfnmacc_vv(
                                                            ctx, v1058, v1041, v1063, v163, v164,
                                                        );
                                                        let v1065 =
                                                            constructor_output_vreg(ctx, v1064);
                                                        // Rule at src/isa/riscv64/lower.isle line 1083.
                                                        return Some(v1065);
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v1053 = C::def_inst(ctx, v1031.2);
                            if let Some(v1054) = v1053 {
                                let v1055 = &C::inst_data(ctx, v1054);
                                if let &InstructionData::Unary {
                                    opcode: ref v1056,
                                    arg: v1057,
                                } = v1055
                                {
                                    if let &Opcode::Fneg = v1056 {
                                        let v1058 = constructor_put_in_vreg(ctx, v1057);
                                        let v1041 = constructor_put_in_vreg(ctx, v1031.1);
                                        let v1042 = constructor_put_in_vreg(ctx, v1031.0);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1059 = constructor_rv_vfmsac_vv(
                                            ctx, v1058, v1041, v1042, v163, v164,
                                        );
                                        let v1060 = constructor_output_vreg(ctx, v1059);
                                        // Rule at src/isa/riscv64/lower.isle line 1075.
                                        return Some(v1060);
                                    }
                                }
                            }
                            if let Some(v1046) = v1045 {
                                let v1047 = &C::inst_data(ctx, v1046);
                                if let &InstructionData::Unary {
                                    opcode: ref v1048,
                                    arg: v1049,
                                } = v1047
                                {
                                    match v1048 {
                                        &Opcode::Splat => {
                                            let v1040 = constructor_put_in_vreg(ctx, v1031.2);
                                            let v1041 = constructor_put_in_vreg(ctx, v1031.1);
                                            let v1050 = constructor_put_in_freg(ctx, v1049);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v1051 = constructor_rv_vfmacc_vf(
                                                ctx, v1040, v1041, v1050, v163, v164,
                                            );
                                            let v1052 = constructor_output_vreg(ctx, v1051);
                                            // Rule at src/isa/riscv64/lower.isle line 1070.
                                            return Some(v1052);
                                        }
                                        &Opcode::Fneg => {
                                            let v1040 = constructor_put_in_vreg(ctx, v1031.2);
                                            let v1041 = constructor_put_in_vreg(ctx, v1031.1);
                                            let v1063 = constructor_put_in_vreg(ctx, v1049);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v1074 = constructor_rv_vfnmsac_vv(
                                                ctx, v1040, v1041, v1063, v163, v164,
                                            );
                                            let v1075 = constructor_output_vreg(ctx, v1074);
                                            // Rule at src/isa/riscv64/lower.isle line 1091.
                                            return Some(v1075);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v1040 = constructor_put_in_vreg(ctx, v1031.2);
                            let v1041 = constructor_put_in_vreg(ctx, v1031.1);
                            let v1042 = constructor_put_in_vreg(ctx, v1031.0);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1043 =
                                constructor_rv_vfmacc_vv(ctx, v1040, v1041, v1042, v163, v164);
                            let v1044 = constructor_output_vreg(ctx, v1043);
                            // Rule at src/isa/riscv64/lower.isle line 1067.
                            return Some(v1044);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v1031 = C::unpack_value_array_3(ctx, v1030);
                            let v1035 = constructor_put_in_freg(ctx, v1031.0);
                            let v1036 = constructor_put_in_freg(ctx, v1031.1);
                            let v1037 = constructor_put_in_freg(ctx, v1031.2);
                            let v1038 = constructor_rv_fmadd(ctx, v560, v1035, v1036, v1037);
                            let v1039 = constructor_output_freg(ctx, v1038);
                            // Rule at src/isa/riscv64/lower.isle line 1060.
                            return Some(v1039);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1658,
            args: ref v1659,
            imm: v1660,
        } => {
            if let &Opcode::Insertlane = v1658 {
                let v1661 = C::unpack_value_array_2(ctx, v1659);
                let v1664 = C::value_type(ctx, v1661.0);
                let v1665 = C::ty_vec_fits_in_register(ctx, v1664);
                if let Some(v1666) = v1665 {
                    let v1684 = C::i64_from_iconst(ctx, v1661.1);
                    if let Some(v1685) = v1684 {
                        let v1686 = C::imm5_from_i64(ctx, v1685);
                        if let Some(v1687) = v1686 {
                            let v1670 = C::u8_from_uimm8(ctx, v1660);
                            let v1671 = C::u8_as_u64(ctx, v1670);
                            let v1672 = C::u64_shl(ctx, 0x1, v1671);
                            let v1673 = constructor_gen_vec_mask(ctx, v1672);
                            let v1674 = constructor_put_in_vreg(ctx, v1661.0);
                            let v1676 = C::vstate_from_type(ctx, v1666);
                            let v1688 = constructor_rv_vmerge_vim(ctx, v1674, v1687, v1673, v1676);
                            let v1689 = constructor_output_vreg(ctx, v1688);
                            // Rule at src/isa/riscv64/lower.isle line 1812.
                            return Some(v1689);
                        }
                    }
                    let v1667 = C::value_type(ctx, v1661.1);
                    let v1679 = C::ty_scalar_float(ctx, v1667);
                    if let Some(v1680) = v1679 {
                        let v1670 = C::u8_from_uimm8(ctx, v1660);
                        let v1671 = C::u8_as_u64(ctx, v1670);
                        let v1672 = C::u64_shl(ctx, 0x1, v1671);
                        let v1673 = constructor_gen_vec_mask(ctx, v1672);
                        let v1674 = constructor_put_in_vreg(ctx, v1661.0);
                        let v1681 = constructor_put_in_freg(ctx, v1661.1);
                        let v1676 = C::vstate_from_type(ctx, v1666);
                        let v1682 = constructor_rv_vfmerge_vfm(ctx, v1674, v1681, v1673, v1676);
                        let v1683 = constructor_output_vreg(ctx, v1682);
                        // Rule at src/isa/riscv64/lower.isle line 1804.
                        return Some(v1683);
                    }
                    let v1668 = C::ty_int(ctx, v1667);
                    if let Some(v1669) = v1668 {
                        let v1670 = C::u8_from_uimm8(ctx, v1660);
                        let v1671 = C::u8_as_u64(ctx, v1670);
                        let v1672 = C::u64_shl(ctx, 0x1, v1671);
                        let v1673 = constructor_gen_vec_mask(ctx, v1672);
                        let v1674 = constructor_put_in_vreg(ctx, v1661.0);
                        let v1675 = constructor_put_in_xreg(ctx, v1661.1);
                        let v1676 = C::vstate_from_type(ctx, v1666);
                        let v1677 = constructor_rv_vmerge_vxm(ctx, v1674, v1675, v1673, v1676);
                        let v1678 = constructor_output_vreg(ctx, v1677);
                        // Rule at src/isa/riscv64/lower.isle line 1797.
                        return Some(v1678);
                    }
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1406,
            code: ref v1407,
        } => {
            match v1406 {
                &Opcode::Trap => {
                    let v1408 = constructor_udf(ctx, v1407);
                    // Rule at src/isa/riscv64/lower.isle line 1474.
                    return Some(v1408);
                }
                &Opcode::ResumableTrap => {
                    let v1408 = constructor_udf(ctx, v1407);
                    // Rule at src/isa/riscv64/lower.isle line 1479.
                    return Some(v1408);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v445,
            arg: v446,
        } => {
            match v445 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v723 = C::def_inst(ctx, v446);
                        if let Some(v724) = v723 {
                            let v728 = &C::inst_data(ctx, v724);
                            if let &InstructionData::UnaryImm {
                                opcode: ref v1697,
                                imm: v1698,
                            } = v728
                            {
                                if let &Opcode::Iconst = v1697 {
                                    let v1699 = C::u64_from_imm64(ctx, v1698);
                                    let v1700 = C::imm5_from_u64(ctx, v1699);
                                    if let Some(v1701) = v1700 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1690 = C::vstate_from_type(ctx, v3);
                                        let v1702 = constructor_rv_vmv_vi(ctx, v1701, v1690);
                                        let v1703 = constructor_output_vreg(ctx, v1702);
                                        // Rule at src/isa/riscv64/lower.isle line 1826.
                                        return Some(v1703);
                                    }
                                }
                            }
                        }
                        let v716 = C::value_type(ctx, v446);
                        let v1693 = C::ty_int_ref_scalar_64_extract(ctx, v716);
                        if let Some(v1694) = v1693 {
                            let v690 = constructor_put_in_xreg(ctx, v446);
                            let v3 = C::value_type(ctx, v2);
                            let v1690 = C::vstate_from_type(ctx, v3);
                            let v1695 = constructor_rv_vmv_vx(ctx, v690, v1690);
                            let v1696 = constructor_output_vreg(ctx, v1695);
                            // Rule at src/isa/riscv64/lower.isle line 1823.
                            return Some(v1696);
                        }
                        let v1533 = C::ty_scalar_float(ctx, v716);
                        if let Some(v1534) = v1533 {
                            let v1013 = constructor_put_in_freg(ctx, v446);
                            let v3 = C::value_type(ctx, v2);
                            let v1690 = C::vstate_from_type(ctx, v3);
                            let v1691 = constructor_rv_vfmv_vf(ctx, v1013, v1690);
                            let v1692 = constructor_output_vreg(ctx, v1691);
                            // Rule at src/isa/riscv64/lower.isle line 1820.
                            return Some(v1692);
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v716 = C::value_type(ctx, v446);
                    let v1732 = C::ty_vec_fits_in_register(ctx, v716);
                    if let Some(v1733) = v1732 {
                        let v450 = constructor_put_in_vreg(ctx, v446);
                        let v1539 = constructor_put_in_vreg(ctx, v446);
                        let v163 = &constructor_unmasked(ctx);
                        let v1737 = C::vstate_from_type(ctx, v1733);
                        let v1742 = constructor_rv_vredmaxu_vs(ctx, v450, v1539, v163, v1737);
                        let v1743 = constructor_rv_vmv_xs(ctx, v1742, v1737);
                        let v1744 = constructor_rv_snez(ctx, v1743);
                        let v1745 = constructor_output_xreg(ctx, v1744);
                        // Rule at src/isa/riscv64/lower.isle line 1907.
                        return Some(v1745);
                    }
                }
                &Opcode::VallTrue => {
                    let v716 = C::value_type(ctx, v446);
                    let v1732 = C::ty_vec_fits_in_register(ctx, v716);
                    if let Some(v1733) = v1732 {
                        let v1735 = C::i8_to_imm5(ctx, 0x1);
                        if let Some(v1736) = v1735 {
                            let v1737 = C::vstate_from_type(ctx, v1733);
                            let v1738 = constructor_rv_vmv_vi(ctx, v1736, v1737);
                            let v1539 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v1739 = constructor_rv_vredminu_vs(ctx, v1539, v1738, v163, v1737);
                            let v1740 = constructor_rv_vmv_xs(ctx, v1739, v1737);
                            let v1741 = constructor_output_xreg(ctx, v1740);
                            // Rule at src/isa/riscv64/lower.isle line 1893.
                            return Some(v1741);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v716 = C::value_type(ctx, v446);
                    let v1732 = C::ty_vec_fits_in_register(ctx, v716);
                    if let Some(v1733) = v1732 {
                        let v450 = constructor_put_in_vreg(ctx, v446);
                        let v1746 = C::zero_reg(ctx);
                        let v1747 = C::xreg_new(ctx, v1746);
                        let v163 = &constructor_unmasked(ctx);
                        let v1737 = C::vstate_from_type(ctx, v1733);
                        let v1748 = constructor_rv_vmslt_vx(ctx, v450, v1747, v163, v1737);
                        let v1750 = C::vstate_from_type(ctx, I64X2);
                        let v1751 = constructor_rv_vmv_xs(ctx, v1748, v1750);
                        let v1752 = C::ty_lane_mask(ctx, v1733);
                        let v1753 = constructor_gen_andi(ctx, v1751, v1752);
                        let v1754 = constructor_output_xreg(ctx, v1753);
                        // Rule at src/isa/riscv64/lower.isle line 1923.
                        return Some(v1754);
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v451 = constructor_rv_vneg_v(ctx, v450, v163, v164);
                            let v452 = constructor_output_vreg(ctx, v451);
                            // Rule at src/isa/riscv64/lower.isle line 424.
                            return Some(v452);
                        }
                        let v443 = C::ty_int(ctx, v3);
                        if let Some(v444) = v443 {
                            let v447 = C::put_in_regs(ctx, v446);
                            let v448 = constructor_neg(ctx, v444, v447);
                            let v449 = C::output(ctx, v448);
                            // Rule at src/isa/riscv64/lower.isle line 421.
                            return Some(v449);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v451 = constructor_rv_vneg_v(ctx, v450, v163, v164);
                            let v787 = constructor_put_in_vreg(ctx, v446);
                            let v1628 = constructor_rv_vmax_vv(ctx, v787, v451, v163, v164);
                            let v1629 = constructor_output_vreg(ctx, v1628);
                            // Rule at src/isa/riscv64/lower.isle line 1766.
                            return Some(v1629);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v690 = constructor_put_in_xreg(ctx, v446);
                            let v1624 = constructor_sext(ctx, v690, v35, I64);
                            let v1625 = constructor_rv_neg(ctx, v1624);
                            let v1626 = constructor_max(ctx, I64, v1624, v1625);
                            let v1627 = constructor_output_xreg(ctx, v1626);
                            // Rule at src/isa/riscv64/lower.isle line 1758.
                            return Some(v1627);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v675 = constructor_rv_vnot_v(ctx, v450, v163, v164);
                            let v676 = constructor_output_vreg(ctx, v675);
                            // Rule at src/isa/riscv64/lower.isle line 712.
                            return Some(v676);
                        }
                        let v671 = C::ty_scalar(ctx, v3);
                        if let Some(v672) = v671 {
                            let v447 = C::put_in_regs(ctx, v446);
                            let v673 = constructor_gen_bnot(ctx, v672, v447);
                            let v674 = C::output(ctx, v673);
                            // Rule at src/isa/riscv64/lower.isle line 709.
                            return Some(v674);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v447 = C::put_in_regs(ctx, v446);
                            let v680 = C::value_regs_get(ctx, v447, 0x0);
                            let v681 = constructor_lower_bit_reverse(ctx, v680, I64);
                            let v682 = C::xreg_new(ctx, v681);
                            let v683 = C::value_regs_get(ctx, v447, 0x1);
                            let v684 = constructor_lower_bit_reverse(ctx, v683, I64);
                            let v685 = C::xreg_new(ctx, v684);
                            let v686 = C::xreg_to_reg(ctx, v685);
                            let v687 = C::xreg_to_reg(ctx, v682);
                            let v688 = C::value_regs(ctx, v686, v687);
                            let v689 = C::output(ctx, v688);
                            // Rule at src/isa/riscv64/lower.isle line 719.
                            return Some(v689);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v553 = C::ty_int(ctx, v373);
                            if let Some(v554) = v553 {
                                let v677 = C::put_in_reg(ctx, v446);
                                let v678 = constructor_lower_bit_reverse(ctx, v677, v554);
                                let v679 = constructor_output_reg(ctx, v678);
                                // Rule at src/isa/riscv64/lower.isle line 716.
                                return Some(v679);
                            }
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v447 = C::put_in_regs(ctx, v446);
                            let v710 = constructor_lower_clz_i128(ctx, v447);
                            let v711 = C::output(ctx, v710);
                            // Rule at src/isa/riscv64/lower.isle line 746.
                            return Some(v711);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v690 = constructor_put_in_xreg(ctx, v446);
                            let v708 = constructor_lower_clz(ctx, v373, v690);
                            let v709 = constructor_output_xreg(ctx, v708);
                            // Rule at src/isa/riscv64/lower.isle line 743.
                            return Some(v709);
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v447 = C::put_in_regs(ctx, v446);
                            let v714 = constructor_lower_cls_i128(ctx, v447);
                            let v715 = C::output(ctx, v714);
                            // Rule at src/isa/riscv64/lower.isle line 753.
                            return Some(v715);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v690 = constructor_put_in_xreg(ctx, v446);
                            let v712 = constructor_lower_cls(ctx, v373, v690);
                            let v713 = constructor_output_xreg(ctx, v712);
                            // Rule at src/isa/riscv64/lower.isle line 750.
                            return Some(v713);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v447 = C::put_in_regs(ctx, v446);
                            let v706 = constructor_lower_ctz_128(ctx, v447);
                            let v707 = C::output(ctx, v706);
                            // Rule at src/isa/riscv64/lower.isle line 739.
                            return Some(v707);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v677 = C::put_in_reg(ctx, v446);
                            let v704 = constructor_lower_ctz(ctx, v373, v677);
                            let v705 = constructor_output_reg(ctx, v704);
                            // Rule at src/isa/riscv64/lower.isle line 736.
                            return Some(v705);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v447 = C::put_in_regs(ctx, v446);
                            let v693 = C::value_regs_get(ctx, v447, 0x1);
                            let v694 = C::xreg_new(ctx, v693);
                            let v695 = constructor_gen_bswap(ctx, I64, v694);
                            let v697 = C::put_in_regs(ctx, v446);
                            let v698 = C::value_regs_get(ctx, v697, 0x0);
                            let v699 = C::xreg_new(ctx, v698);
                            let v700 = constructor_gen_bswap(ctx, I64, v699);
                            let v696 = C::xreg_to_reg(ctx, v695);
                            let v701 = C::xreg_to_reg(ctx, v700);
                            let v702 = C::value_regs(ctx, v696, v701);
                            let v703 = C::output(ctx, v702);
                            // Rule at src/isa/riscv64/lower.isle line 729.
                            return Some(v703);
                        }
                        let v372 = C::fits_in_64(ctx, v3);
                        if let Some(v373) = v372 {
                            let v553 = C::ty_int(ctx, v373);
                            if let Some(v554) = v553 {
                                let v690 = constructor_put_in_xreg(ctx, v446);
                                let v691 = constructor_gen_bswap(ctx, v554, v690);
                                let v692 = constructor_output_xreg(ctx, v691);
                                // Rule at src/isa/riscv64/lower.isle line 726.
                                return Some(v692);
                            }
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v773 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v774) = v773 {
                                let v776 = constructor_u64_to_uimm5(ctx, 0x2);
                                if let Some(v777) = v776 {
                                    let v779 = constructor_u64_to_uimm5(ctx, 0x4);
                                    if let Some(v780) = v779 {
                                        let v781 = C::lane_type(ctx, v11);
                                        let v783 = C::ty_mask(ctx, v781);
                                        let v784 = C::u64_and(ctx, 0x5555555555555555, v783);
                                        let v785 = constructor_imm(ctx, v781, v784);
                                        let v786 = C::xreg_new(ctx, v785);
                                        let v787 = constructor_put_in_vreg(ctx, v446);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v788 =
                                            constructor_rv_vsrl_vi(ctx, v787, v774, v163, v164);
                                        let v789 =
                                            constructor_rv_vand_vx(ctx, v788, v786, v163, v164);
                                        let v790 = constructor_put_in_vreg(ctx, v446);
                                        let v791 =
                                            constructor_rv_vsub_vv(ctx, v790, v789, v163, v164);
                                        let v793 = C::u64_and(ctx, 0x3333333333333333, v783);
                                        let v794 = constructor_imm(ctx, v781, v793);
                                        let v795 = C::xreg_new(ctx, v794);
                                        let v796 =
                                            constructor_rv_vsrl_vi(ctx, v791, v777, v163, v164);
                                        let v797 =
                                            constructor_rv_vand_vx(ctx, v796, v795, v163, v164);
                                        let v798 =
                                            constructor_rv_vand_vx(ctx, v791, v795, v163, v164);
                                        let v799 =
                                            constructor_rv_vadd_vv(ctx, v798, v797, v163, v164);
                                        let v801 = C::u64_and(ctx, 0xF0F0F0F0F0F0F0F, v783);
                                        let v802 = constructor_imm(ctx, v781, v801);
                                        let v803 = C::xreg_new(ctx, v802);
                                        let v804 =
                                            constructor_rv_vsrl_vi(ctx, v799, v780, v163, v164);
                                        let v805 =
                                            constructor_rv_vadd_vv(ctx, v799, v804, v163, v164);
                                        let v806 =
                                            constructor_rv_vand_vx(ctx, v805, v803, v163, v164);
                                        let v808 = C::u64_and(ctx, 0x101010101010101, v783);
                                        let v809 = constructor_imm(ctx, v781, v808);
                                        let v810 = C::xreg_new(ctx, v809);
                                        let v811 =
                                            constructor_rv_vmul_vx(ctx, v806, v810, v163, v164);
                                        let v812 = C::ty_bits(ctx, v781);
                                        let v813 = C::u8_as_u64(ctx, v812);
                                        let v815 = C::u64_sub(ctx, v813, 0x8);
                                        let v816 = constructor_imm(ctx, I64, v815);
                                        let v817 = C::xreg_new(ctx, v816);
                                        let v818 =
                                            constructor_rv_vsrl_vx(ctx, v811, v817, v163, v164);
                                        let v819 = constructor_output_vreg(ctx, v818);
                                        // Rule at src/isa/riscv64/lower.isle line 817.
                                        return Some(v819);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v447 = C::put_in_regs(ctx, v446);
                            let v770 = constructor_lower_popcnt_i128(ctx, v447);
                            let v771 = C::output(ctx, v770);
                            // Rule at src/isa/riscv64/lower.isle line 802.
                            return Some(v771);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v690 = constructor_put_in_xreg(ctx, v446);
                            let v768 = constructor_lower_popcnt(ctx, v690, v35);
                            let v769 = constructor_output_xreg(ctx, v768);
                            // Rule at src/isa/riscv64/lower.isle line 799.
                            return Some(v769);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1080 = constructor_rv_vfsqrt_v(ctx, v450, v163, v164);
                            let v1081 = constructor_output_vreg(ctx, v1080);
                            // Rule at src/isa/riscv64/lower.isle line 1102.
                            return Some(v1081);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v1013 = constructor_put_in_freg(ctx, v446);
                            let v1078 = constructor_rv_fsqrt(ctx, v560, v1013);
                            let v1079 = constructor_output_freg(ctx, v1078);
                            // Rule at src/isa/riscv64/lower.isle line 1099.
                            return Some(v1079);
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1020 = constructor_rv_vfneg_v(ctx, v450, v163, v164);
                            let v1021 = constructor_output_vreg(ctx, v1020);
                            // Rule at src/isa/riscv64/lower.isle line 1046.
                            return Some(v1021);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v1013 = constructor_put_in_freg(ctx, v446);
                            let v1018 = constructor_rv_fneg(ctx, v560, v1013);
                            let v1019 = constructor_output_freg(ctx, v1018);
                            // Rule at src/isa/riscv64/lower.isle line 1043.
                            return Some(v1019);
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1016 = constructor_rv_vfabs_v(ctx, v450, v163, v164);
                            let v1017 = constructor_output_vreg(ctx, v1016);
                            // Rule at src/isa/riscv64/lower.isle line 1039.
                            return Some(v1017);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v1013 = constructor_put_in_freg(ctx, v446);
                            let v1014 = constructor_rv_fabs(ctx, v560, v1013);
                            let v1015 = constructor_output_freg(ctx, v1014);
                            // Rule at src/isa/riscv64/lower.isle line 1036.
                            return Some(v1015);
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v1582 = constructor_gen_vec_round(ctx, v450, &FRM::RUP, v11);
                            let v1583 = constructor_output_vreg(ctx, v1582);
                            // Rule at src/isa/riscv64/lower.isle line 1687.
                            return Some(v1583);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v677 = C::put_in_reg(ctx, v446);
                            let v1579 =
                                constructor_gen_float_round(ctx, &FloatRoundOP::Ceil, v677, v560);
                            let v1580 = constructor_output_reg(ctx, v1579);
                            // Rule at src/isa/riscv64/lower.isle line 1684.
                            return Some(v1580);
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v1588 = constructor_gen_vec_round(ctx, v450, &FRM::RDN, v11);
                            let v1589 = constructor_output_vreg(ctx, v1588);
                            // Rule at src/isa/riscv64/lower.isle line 1694.
                            return Some(v1589);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v677 = C::put_in_reg(ctx, v446);
                            let v1585 =
                                constructor_gen_float_round(ctx, &FloatRoundOP::Floor, v677, v560);
                            let v1586 = constructor_output_reg(ctx, v1585);
                            // Rule at src/isa/riscv64/lower.isle line 1691.
                            return Some(v1586);
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v1594 = constructor_gen_vec_round(ctx, v450, &FRM::RTZ, v11);
                            let v1595 = constructor_output_vreg(ctx, v1594);
                            // Rule at src/isa/riscv64/lower.isle line 1701.
                            return Some(v1595);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v677 = C::put_in_reg(ctx, v446);
                            let v1591 =
                                constructor_gen_float_round(ctx, &FloatRoundOP::Trunc, v677, v560);
                            let v1592 = constructor_output_reg(ctx, v1591);
                            // Rule at src/isa/riscv64/lower.isle line 1698.
                            return Some(v1592);
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v1600 = constructor_gen_vec_round(ctx, v450, &FRM::RNE, v11);
                            let v1601 = constructor_output_vreg(ctx, v1600);
                            // Rule at src/isa/riscv64/lower.isle line 1708.
                            return Some(v1601);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v677 = C::put_in_reg(ctx, v446);
                            let v1597 = constructor_gen_float_round(
                                ctx,
                                &FloatRoundOP::Nearest,
                                v677,
                                v560,
                            );
                            let v1598 = constructor_output_reg(ctx, v1597);
                            // Rule at src/isa/riscv64/lower.isle line 1705.
                            return Some(v1598);
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v690 = constructor_put_in_xreg(ctx, v446);
                    let v1240 = constructor_rv_seqz(ctx, v690);
                    let v1241 = constructor_output_xreg(ctx, v1240);
                    // Rule at src/isa/riscv64/lower.isle line 1327.
                    return Some(v1241);
                }
                &Opcode::IsInvalid => {
                    let v690 = constructor_put_in_xreg(ctx, v446);
                    let v1243 = C::imm12_const(ctx, 0x1);
                    let v1244 = constructor_rv_addi(ctx, v690, v1243);
                    let v1245 = constructor_rv_seqz(ctx, v1244);
                    let v1246 = constructor_output_xreg(ctx, v1245);
                    // Rule at src/isa/riscv64/lower.isle line 1333.
                    return Some(v1246);
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v605 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v606) = v605 {
                                let v1859 = C::zero_reg(ctx);
                                let v1860 = C::xreg_new(ctx, v1859);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v1861 = constructor_rv_vmv_vx(ctx, v1860, v164);
                                let v1862 = constructor_gen_vec_mask(ctx, 0x1);
                                let v1863 = constructor_put_in_xreg(ctx, v446);
                                let v1864 =
                                    constructor_rv_vmerge_vxm(ctx, v1861, v1863, v1862, v164);
                                let v1865 = constructor_output_vreg(ctx, v1864);
                                // Rule at src/isa/riscv64/lower.isle line 2064.
                                return Some(v1865);
                            }
                            let v1866 = C::ty_vector_float(ctx, v11);
                            if let Some(v1867) = v1866 {
                                let v1859 = C::zero_reg(ctx);
                                let v1860 = C::xreg_new(ctx, v1859);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v1861 = constructor_rv_vmv_vx(ctx, v1860, v164);
                                let v1868 = constructor_put_in_freg(ctx, v446);
                                let v1869 = constructor_rv_vfmv_sf(ctx, v1868, v164);
                                let v1870 = constructor_gen_vec_mask(ctx, 0x1);
                                let v1871 =
                                    constructor_rv_vmerge_vvm(ctx, v1861, v1869, v1870, v164);
                                let v1872 = constructor_output_vreg(ctx, v1871);
                                // Rule at src/isa/riscv64/lower.isle line 2070.
                                return Some(v1872);
                            }
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v447 = C::put_in_regs(ctx, v446);
                        let v3 = C::value_type(ctx, v2);
                        let v716 = C::value_type(ctx, v446);
                        let v1610 = constructor_lower_bmask(ctx, v3, v716, v447);
                        let v1611 = C::output(ctx, v1610);
                        // Rule at src/isa/riscv64/lower.isle line 1733.
                        return Some(v1611);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v447 = C::put_in_regs(ctx, v446);
                        let v680 = C::value_regs_get(ctx, v447, 0x0);
                        let v1165 = constructor_output_reg(ctx, v680);
                        // Rule at src/isa/riscv64/lower.isle line 1197.
                        return Some(v1165);
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v723 = C::def_inst(ctx, v446);
                            if let Some(v724) = v723 {
                                let v728 = &C::inst_data(ctx, v724);
                                if let &InstructionData::Unary {
                                    opcode: ref v1788,
                                    arg: v1789,
                                } = v728
                                {
                                    if let &Opcode::SwidenLow = v1788 {
                                        let v1801 = C::def_inst(ctx, v1789);
                                        if let Some(v1802) = v1801 {
                                            let v1803 = &C::inst_data(ctx, v1802);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1804,
                                                arg: v1805,
                                            } = v1803
                                            {
                                                if let &Opcode::SwidenLow = v1804 {
                                                    let v1811 = constructor_put_in_vreg(ctx, v1805);
                                                    let v163 = &constructor_unmasked(ctx);
                                                    let v164 = C::vstate_from_type(ctx, v11);
                                                    let v1826 = constructor_rv_vsext_vf8(
                                                        ctx, v1811, v163, v164,
                                                    );
                                                    let v1827 = constructor_output_vreg(ctx, v1826);
                                                    // Rule at src/isa/riscv64/lower.isle line 1995.
                                                    return Some(v1827);
                                                }
                                            }
                                        }
                                        let v1796 = constructor_put_in_vreg(ctx, v1789);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1824 =
                                            constructor_rv_vsext_vf4(ctx, v1796, v163, v164);
                                        let v1825 = constructor_output_vreg(ctx, v1824);
                                        // Rule at src/isa/riscv64/lower.isle line 1992.
                                        return Some(v1825);
                                    }
                                }
                            }
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1822 = constructor_rv_vsext_vf2(ctx, v450, v163, v164);
                            let v1823 = constructor_output_vreg(ctx, v1822);
                            // Rule at src/isa/riscv64/lower.isle line 1989.
                            return Some(v1823);
                        }
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v723 = C::def_inst(ctx, v446);
                            if let Some(v724) = v723 {
                                let v728 = &C::inst_data(ctx, v724);
                                if let &InstructionData::Unary {
                                    opcode: ref v1788,
                                    arg: v1789,
                                } = v728
                                {
                                    if let &Opcode::SwidenHigh = v1788 {
                                        let v1801 = C::def_inst(ctx, v1789);
                                        if let Some(v1802) = v1801 {
                                            let v1803 = &C::inst_data(ctx, v1802);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1804,
                                                arg: v1805,
                                            } = v1803
                                            {
                                                if let &Opcode::SwidenHigh = v1804 {
                                                    let v1806 = C::value_type(ctx, v1805);
                                                    let v1807 = C::ty_lane_count(ctx, v1806);
                                                    let v1792 = C::ty_lane_count(ctx, v11);
                                                    let v1808 = C::u64_sub(ctx, v1807, v1792);
                                                    let v1809 = C::uimm5_from_u64(ctx, v1808);
                                                    if let Some(v1810) = v1809 {
                                                        let v1811 =
                                                            constructor_put_in_vreg(ctx, v1805);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v1812 = C::vstate_from_type(ctx, v1806);
                                                        let v1813 = constructor_rv_vslidedown_vi(
                                                            ctx, v1811, v1810, v163, v1812,
                                                        );
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1814 = constructor_rv_vsext_vf8(
                                                            ctx, v1813, v163, v164,
                                                        );
                                                        let v1815 =
                                                            constructor_output_vreg(ctx, v1814);
                                                        // Rule at src/isa/riscv64/lower.isle line 1969.
                                                        return Some(v1815);
                                                    }
                                                }
                                            }
                                        }
                                        let v1790 = C::value_type(ctx, v1789);
                                        let v1791 = C::ty_lane_count(ctx, v1790);
                                        let v1792 = C::ty_lane_count(ctx, v11);
                                        let v1793 = C::u64_sub(ctx, v1791, v1792);
                                        let v1794 = C::uimm5_from_u64(ctx, v1793);
                                        if let Some(v1795) = v1794 {
                                            let v1796 = constructor_put_in_vreg(ctx, v1789);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v1797 = C::vstate_from_type(ctx, v1790);
                                            let v1798 = constructor_rv_vslidedown_vi(
                                                ctx, v1796, v1795, v163, v1797,
                                            );
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v1799 =
                                                constructor_rv_vsext_vf4(ctx, v1798, v163, v164);
                                            let v1800 = constructor_output_vreg(ctx, v1799);
                                            // Rule at src/isa/riscv64/lower.isle line 1965.
                                            return Some(v1800);
                                        }
                                    }
                                }
                            }
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v716 = C::value_type(ctx, v446);
                            let v1785 = constructor_gen_slidedown_half(ctx, v716, v450);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1786 = constructor_rv_vsext_vf2(ctx, v1785, v163, v164);
                            let v1787 = constructor_output_vreg(ctx, v1786);
                            // Rule at src/isa/riscv64/lower.isle line 1962.
                            return Some(v1787);
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v723 = C::def_inst(ctx, v446);
                            if let Some(v724) = v723 {
                                let v728 = &C::inst_data(ctx, v724);
                                if let &InstructionData::Unary {
                                    opcode: ref v1788,
                                    arg: v1789,
                                } = v728
                                {
                                    if let &Opcode::UwidenLow = v1788 {
                                        let v1801 = C::def_inst(ctx, v1789);
                                        if let Some(v1802) = v1801 {
                                            let v1803 = &C::inst_data(ctx, v1802);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1804,
                                                arg: v1805,
                                            } = v1803
                                            {
                                                if let &Opcode::UwidenLow = v1804 {
                                                    let v1811 = constructor_put_in_vreg(ctx, v1805);
                                                    let v163 = &constructor_unmasked(ctx);
                                                    let v164 = C::vstate_from_type(ctx, v11);
                                                    let v1832 = constructor_rv_vzext_vf8(
                                                        ctx, v1811, v163, v164,
                                                    );
                                                    let v1833 = constructor_output_vreg(ctx, v1832);
                                                    // Rule at src/isa/riscv64/lower.isle line 2006.
                                                    return Some(v1833);
                                                }
                                            }
                                        }
                                        let v1796 = constructor_put_in_vreg(ctx, v1789);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1830 =
                                            constructor_rv_vzext_vf4(ctx, v1796, v163, v164);
                                        let v1831 = constructor_output_vreg(ctx, v1830);
                                        // Rule at src/isa/riscv64/lower.isle line 2003.
                                        return Some(v1831);
                                    }
                                }
                            }
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1828 = constructor_rv_vzext_vf2(ctx, v450, v163, v164);
                            let v1829 = constructor_output_vreg(ctx, v1828);
                            // Rule at src/isa/riscv64/lower.isle line 2000.
                            return Some(v1829);
                        }
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v723 = C::def_inst(ctx, v446);
                            if let Some(v724) = v723 {
                                let v728 = &C::inst_data(ctx, v724);
                                if let &InstructionData::Unary {
                                    opcode: ref v1788,
                                    arg: v1789,
                                } = v728
                                {
                                    if let &Opcode::UwidenHigh = v1788 {
                                        let v1801 = C::def_inst(ctx, v1789);
                                        if let Some(v1802) = v1801 {
                                            let v1803 = &C::inst_data(ctx, v1802);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1804,
                                                arg: v1805,
                                            } = v1803
                                            {
                                                if let &Opcode::UwidenHigh = v1804 {
                                                    let v1806 = C::value_type(ctx, v1805);
                                                    let v1807 = C::ty_lane_count(ctx, v1806);
                                                    let v1792 = C::ty_lane_count(ctx, v11);
                                                    let v1808 = C::u64_sub(ctx, v1807, v1792);
                                                    let v1809 = C::uimm5_from_u64(ctx, v1808);
                                                    if let Some(v1810) = v1809 {
                                                        let v1811 =
                                                            constructor_put_in_vreg(ctx, v1805);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v1812 = C::vstate_from_type(ctx, v1806);
                                                        let v1813 = constructor_rv_vslidedown_vi(
                                                            ctx, v1811, v1810, v163, v1812,
                                                        );
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1820 = constructor_rv_vzext_vf8(
                                                            ctx, v1813, v163, v164,
                                                        );
                                                        let v1821 =
                                                            constructor_output_vreg(ctx, v1820);
                                                        // Rule at src/isa/riscv64/lower.isle line 1983.
                                                        return Some(v1821);
                                                    }
                                                }
                                            }
                                        }
                                        let v1790 = C::value_type(ctx, v1789);
                                        let v1791 = C::ty_lane_count(ctx, v1790);
                                        let v1792 = C::ty_lane_count(ctx, v11);
                                        let v1793 = C::u64_sub(ctx, v1791, v1792);
                                        let v1794 = C::uimm5_from_u64(ctx, v1793);
                                        if let Some(v1795) = v1794 {
                                            let v1796 = constructor_put_in_vreg(ctx, v1789);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v1797 = C::vstate_from_type(ctx, v1790);
                                            let v1798 = constructor_rv_vslidedown_vi(
                                                ctx, v1796, v1795, v163, v1797,
                                            );
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v1818 =
                                                constructor_rv_vzext_vf4(ctx, v1798, v163, v164);
                                            let v1819 = constructor_output_vreg(ctx, v1818);
                                            // Rule at src/isa/riscv64/lower.isle line 1979.
                                            return Some(v1819);
                                        }
                                    }
                                }
                            }
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v716 = C::value_type(ctx, v446);
                            let v1785 = constructor_gen_slidedown_half(ctx, v716, v450);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1816 = constructor_rv_vzext_vf2(ctx, v1785, v163, v164);
                            let v1817 = constructor_output_vreg(ctx, v1816);
                            // Rule at src/isa/riscv64/lower.isle line 1976.
                            return Some(v1817);
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v447 = C::put_in_regs(ctx, v446);
                        let v716 = C::value_type(ctx, v446);
                        let v3 = C::value_type(ctx, v2);
                        let v718 = constructor_extend(ctx, v447, &ExtendOp::Zero, v716, v3);
                        let v719 = C::output(ctx, v718);
                        // Rule at src/isa/riscv64/lower.isle line 757.
                        return Some(v719);
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v723 = C::def_inst(ctx, v446);
                            if let Some(v724) = v723 {
                                let v725 = C::first_result(ctx, v724);
                                if let Some(v726) = v725 {
                                    let v727 = C::value_type(ctx, v726);
                                    if v727 == I32 {
                                        let v728 = &C::inst_data(ctx, v724);
                                        if let &InstructionData::Binary {
                                            opcode: ref v729,
                                            args: ref v730,
                                        } = v728
                                        {
                                            match v729 {
                                                &Opcode::Iadd => {
                                                    let v731 = C::unpack_value_array_2(ctx, v730);
                                                    let v755 = C::i64_from_iconst(ctx, v731.0);
                                                    if let Some(v756) = v755 {
                                                        let v757 = C::imm12_from_i64(ctx, v756);
                                                        if let Some(v758) = v757 {
                                                            let v759 = constructor_put_in_xreg(
                                                                ctx, v731.1,
                                                            );
                                                            let v760 = constructor_rv_addiw(
                                                                ctx, v759, v758,
                                                            );
                                                            let v761 =
                                                                constructor_output_xreg(ctx, v760);
                                                            // Rule at src/isa/riscv64/lower.isle line 785.
                                                            return Some(v761);
                                                        }
                                                    }
                                                    let v749 = C::i64_from_iconst(ctx, v731.1);
                                                    if let Some(v750) = v749 {
                                                        let v751 = C::imm12_from_i64(ctx, v750);
                                                        if let Some(v752) = v751 {
                                                            let v734 = constructor_put_in_xreg(
                                                                ctx, v731.0,
                                                            );
                                                            let v753 = constructor_rv_addiw(
                                                                ctx, v734, v752,
                                                            );
                                                            let v754 =
                                                                constructor_output_xreg(ctx, v753);
                                                            // Rule at src/isa/riscv64/lower.isle line 782.
                                                            return Some(v754);
                                                        }
                                                    }
                                                    let v734 = constructor_put_in_xreg(ctx, v731.0);
                                                    let v735 = constructor_put_in_xreg(ctx, v731.1);
                                                    let v736 = constructor_rv_addw(ctx, v734, v735);
                                                    let v737 = constructor_output_xreg(ctx, v736);
                                                    // Rule at src/isa/riscv64/lower.isle line 766.
                                                    return Some(v737);
                                                }
                                                &Opcode::Isub => {
                                                    let v731 = C::unpack_value_array_2(ctx, v730);
                                                    let v734 = constructor_put_in_xreg(ctx, v731.0);
                                                    let v735 = constructor_put_in_xreg(ctx, v731.1);
                                                    let v738 = constructor_rv_subw(ctx, v734, v735);
                                                    let v739 = constructor_output_xreg(ctx, v738);
                                                    // Rule at src/isa/riscv64/lower.isle line 769.
                                                    return Some(v739);
                                                }
                                                &Opcode::Ishl => {
                                                    let v731 = C::unpack_value_array_2(ctx, v730);
                                                    let v749 = C::i64_from_iconst(ctx, v731.1);
                                                    if let Some(v750) = v749 {
                                                        let v751 = C::imm12_from_i64(ctx, v750);
                                                        if let Some(v752) = v751 {
                                                            let v734 = constructor_put_in_xreg(
                                                                ctx, v731.0,
                                                            );
                                                            let v762 = constructor_rv_slliw(
                                                                ctx, v734, v752,
                                                            );
                                                            let v763 =
                                                                constructor_output_xreg(ctx, v762);
                                                            // Rule at src/isa/riscv64/lower.isle line 788.
                                                            return Some(v763);
                                                        }
                                                    }
                                                    let v734 = constructor_put_in_xreg(ctx, v731.0);
                                                    let v740 = C::put_in_regs(ctx, v731.1);
                                                    let v741 = C::value_regs_get(ctx, v740, 0x0);
                                                    let v742 = C::xreg_new(ctx, v741);
                                                    let v743 = constructor_rv_sllw(ctx, v734, v742);
                                                    let v744 = constructor_output_xreg(ctx, v743);
                                                    // Rule at src/isa/riscv64/lower.isle line 772.
                                                    return Some(v744);
                                                }
                                                &Opcode::Ushr => {
                                                    let v731 = C::unpack_value_array_2(ctx, v730);
                                                    let v749 = C::i64_from_iconst(ctx, v731.1);
                                                    if let Some(v750) = v749 {
                                                        let v751 = C::imm12_from_i64(ctx, v750);
                                                        if let Some(v752) = v751 {
                                                            let v734 = constructor_put_in_xreg(
                                                                ctx, v731.0,
                                                            );
                                                            let v764 = constructor_rv_srliw(
                                                                ctx, v734, v752,
                                                            );
                                                            let v765 =
                                                                constructor_output_xreg(ctx, v764);
                                                            // Rule at src/isa/riscv64/lower.isle line 791.
                                                            return Some(v765);
                                                        }
                                                    }
                                                    let v734 = constructor_put_in_xreg(ctx, v731.0);
                                                    let v740 = C::put_in_regs(ctx, v731.1);
                                                    let v741 = C::value_regs_get(ctx, v740, 0x0);
                                                    let v742 = C::xreg_new(ctx, v741);
                                                    let v745 = constructor_rv_srlw(ctx, v734, v742);
                                                    let v746 = constructor_output_xreg(ctx, v745);
                                                    // Rule at src/isa/riscv64/lower.isle line 775.
                                                    return Some(v746);
                                                }
                                                &Opcode::Sshr => {
                                                    let v731 = C::unpack_value_array_2(ctx, v730);
                                                    let v749 = C::i64_from_iconst(ctx, v731.1);
                                                    if let Some(v750) = v749 {
                                                        let v751 = C::imm12_from_i64(ctx, v750);
                                                        if let Some(v752) = v751 {
                                                            let v734 = constructor_put_in_xreg(
                                                                ctx, v731.0,
                                                            );
                                                            let v766 = constructor_rv_sraiw(
                                                                ctx, v734, v752,
                                                            );
                                                            let v767 =
                                                                constructor_output_xreg(ctx, v766);
                                                            // Rule at src/isa/riscv64/lower.isle line 794.
                                                            return Some(v767);
                                                        }
                                                    }
                                                    let v734 = constructor_put_in_xreg(ctx, v731.0);
                                                    let v740 = C::put_in_regs(ctx, v731.1);
                                                    let v741 = C::value_regs_get(ctx, v740, 0x0);
                                                    let v742 = C::xreg_new(ctx, v741);
                                                    let v747 = constructor_rv_sraw(ctx, v734, v742);
                                                    let v748 = constructor_output_xreg(ctx, v747);
                                                    // Rule at src/isa/riscv64/lower.isle line 778.
                                                    return Some(v748);
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v447 = C::put_in_regs(ctx, v446);
                        let v716 = C::value_type(ctx, v446);
                        let v721 = constructor_extend(ctx, v447, &ExtendOp::Signed, v716, v3);
                        let v722 = C::output(ctx, v721);
                        // Rule at src/isa/riscv64/lower.isle line 761.
                        return Some(v722);
                    }
                }
                &Opcode::Fpromote => {
                    let v1013 = constructor_put_in_freg(ctx, v446);
                    let v1166 = constructor_rv_fcvtds(ctx, v1013);
                    let v1167 = constructor_output_freg(ctx, v1166);
                    // Rule at src/isa/riscv64/lower.isle line 1201.
                    return Some(v1167);
                }
                &Opcode::Fdemote => {
                    let v1013 = constructor_put_in_freg(ctx, v446);
                    let v1170 = constructor_rv_fcvtsd(ctx, v1013);
                    let v1171 = constructor_output_freg(ctx, v1170);
                    // Rule at src/isa/riscv64/lower.isle line 1211.
                    return Some(v1171);
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == F32X4 {
                                let v1173 = C::i8_to_imm5(ctx, 0x0);
                                if let Some(v1174) = v1173 {
                                    let v450 = constructor_put_in_vreg(ctx, v446);
                                    let v163 = &constructor_unmasked(ctx);
                                    let v164 = C::vstate_from_type(ctx, v11);
                                    let v1175 = C::vstate_mf2(ctx, v164);
                                    let v1176 = constructor_rv_vfncvt_f_f_w(ctx, v450, v163, v1175);
                                    let v1178 = constructor_gen_vec_mask(ctx, 0xC);
                                    let v1179 =
                                        constructor_rv_vmerge_vim(ctx, v1176, v1174, v1178, v164);
                                    let v1180 = constructor_output_vreg(ctx, v1179);
                                    // Rule at src/isa/riscv64/lower.isle line 1218.
                                    return Some(v1180);
                                }
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v176 = C::ty_half_width(ctx, v11);
                            if let Some(v177) = v176 {
                                let v450 = constructor_put_in_vreg(ctx, v446);
                                let v163 = &constructor_unmasked(ctx);
                                let v181 = C::vstate_from_type(ctx, v177);
                                let v182 = C::vstate_mf2(ctx, v181);
                                let v1168 = constructor_rv_vfwcvt_f_f_v(ctx, v450, v163, v182);
                                let v1169 = constructor_output_vreg(ctx, v1168);
                                // Rule at src/isa/riscv64/lower.isle line 1206.
                                return Some(v1169);
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1013 = constructor_put_in_freg(ctx, v446);
                        let v716 = C::value_type(ctx, v446);
                        let v3 = C::value_type(ctx, v2);
                        let v1531 = constructor_gen_fcvt_int(ctx, false, v1013, false, v716, v3);
                        let v1532 = constructor_output_xreg(ctx, v1531);
                        // Rule at src/isa/riscv64/lower.isle line 1628.
                        return Some(v1532);
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v716 = C::value_type(ctx, v446);
                        let v1533 = C::ty_scalar_float(ctx, v716);
                        if let Some(v1534) = v1533 {
                            let v1013 = constructor_put_in_freg(ctx, v446);
                            let v3 = C::value_type(ctx, v2);
                            let v1535 =
                                constructor_gen_fcvt_int(ctx, false, v1013, true, v1534, v3);
                            let v1536 = constructor_output_xreg(ctx, v1535);
                            // Rule at src/isa/riscv64/lower.isle line 1632.
                            return Some(v1536);
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1173 = C::i8_to_imm5(ctx, 0x0);
                            if let Some(v1174) = v1173 {
                                let v450 = constructor_put_in_vreg(ctx, v446);
                                let v1539 = constructor_put_in_vreg(ctx, v446);
                                let v163 = &constructor_unmasked(ctx);
                                let v716 = C::value_type(ctx, v446);
                                let v1540 = C::vstate_from_type(ctx, v716);
                                let v1541 = constructor_rv_vmfne_vv(ctx, v450, v1539, v163, v1540);
                                let v1542 = constructor_put_in_vreg(ctx, v446);
                                let v1548 =
                                    constructor_rv_vfcvt_rtz_xu_f_v(ctx, v1542, v163, v1540);
                                let v1549 =
                                    constructor_rv_vmerge_vim(ctx, v1548, v1174, v1541, v1540);
                                let v1550 = constructor_output_vreg(ctx, v1549);
                                // Rule at src/isa/riscv64/lower.isle line 1649.
                                return Some(v1550);
                            }
                        }
                        let v716 = C::value_type(ctx, v446);
                        let v1533 = C::ty_scalar_float(ctx, v716);
                        if let Some(v1534) = v1533 {
                            let v1013 = constructor_put_in_freg(ctx, v446);
                            let v1546 =
                                constructor_gen_fcvt_int(ctx, true, v1013, false, v1534, v3);
                            let v1547 = constructor_output_xreg(ctx, v1546);
                            // Rule at src/isa/riscv64/lower.isle line 1646.
                            return Some(v1547);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1173 = C::i8_to_imm5(ctx, 0x0);
                            if let Some(v1174) = v1173 {
                                let v450 = constructor_put_in_vreg(ctx, v446);
                                let v1539 = constructor_put_in_vreg(ctx, v446);
                                let v163 = &constructor_unmasked(ctx);
                                let v716 = C::value_type(ctx, v446);
                                let v1540 = C::vstate_from_type(ctx, v716);
                                let v1541 = constructor_rv_vmfne_vv(ctx, v450, v1539, v163, v1540);
                                let v1542 = constructor_put_in_vreg(ctx, v446);
                                let v1543 = constructor_rv_vfcvt_rtz_x_f_v(ctx, v1542, v163, v1540);
                                let v1544 =
                                    constructor_rv_vmerge_vim(ctx, v1543, v1174, v1541, v1540);
                                let v1545 = constructor_output_vreg(ctx, v1544);
                                // Rule at src/isa/riscv64/lower.isle line 1639.
                                return Some(v1545);
                            }
                        }
                        let v716 = C::value_type(ctx, v446);
                        let v1533 = C::ty_scalar_float(ctx, v716);
                        if let Some(v1534) = v1533 {
                            let v1013 = constructor_put_in_freg(ctx, v446);
                            let v1537 = constructor_gen_fcvt_int(ctx, true, v1013, true, v1534, v3);
                            let v1538 = constructor_output_xreg(ctx, v1537);
                            // Rule at src/isa/riscv64/lower.isle line 1636.
                            return Some(v1538);
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v716 = C::value_type(ctx, v446);
                            let v1540 = C::vstate_from_type(ctx, v716);
                            let v1564 = constructor_rv_vfcvt_f_xu_v(ctx, v450, v163, v1540);
                            let v1565 = constructor_output_vreg(ctx, v1564);
                            // Rule at src/isa/riscv64/lower.isle line 1670.
                            return Some(v1565);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v716 = C::value_type(ctx, v446);
                            let v1559 = &C::int_convert_2_float_op(ctx, v716, false, v560);
                            let v1552 = constructor_put_in_xreg(ctx, v446);
                            let v1560 = constructor_normalize_fcvt_from_int(
                                ctx,
                                v1552,
                                v716,
                                &ExtendOp::Zero,
                            );
                            let v1561 = C::xreg_to_reg(ctx, v1560);
                            let v1562 = constructor_fpu_rr(ctx, v1559, v560, v1561);
                            let v1563 = constructor_output_reg(ctx, v1562);
                            // Rule at src/isa/riscv64/lower.isle line 1665.
                            return Some(v1563);
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v450 = constructor_put_in_vreg(ctx, v446);
                            let v163 = &constructor_unmasked(ctx);
                            let v716 = C::value_type(ctx, v446);
                            let v1540 = C::vstate_from_type(ctx, v716);
                            let v1557 = constructor_rv_vfcvt_f_x_v(ctx, v450, v163, v1540);
                            let v1558 = constructor_output_vreg(ctx, v1557);
                            // Rule at src/isa/riscv64/lower.isle line 1661.
                            return Some(v1558);
                        }
                        let v559 = C::ty_scalar_float(ctx, v3);
                        if let Some(v560) = v559 {
                            let v716 = C::value_type(ctx, v446);
                            let v1551 = &C::int_convert_2_float_op(ctx, v716, true, v560);
                            let v1552 = constructor_put_in_xreg(ctx, v446);
                            let v1553 = constructor_normalize_fcvt_from_int(
                                ctx,
                                v1552,
                                v716,
                                &ExtendOp::Signed,
                            );
                            let v1554 = C::xreg_to_reg(ctx, v1553);
                            let v1555 = constructor_fpu_rr(ctx, v1551, v560, v1554);
                            let v1556 = constructor_output_reg(ctx, v1555);
                            // Rule at src/isa/riscv64/lower.isle line 1656.
                            return Some(v1556);
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v447 = C::put_in_regs(ctx, v446);
                    let v680 = C::value_regs_get(ctx, v447, 0x0);
                    let v1344 = C::xreg_new(ctx, v680);
                    let v1345 = C::put_in_regs(ctx, v446);
                    let v1346 = C::value_regs_get(ctx, v1345, 0x1);
                    let v1347 = C::xreg_new(ctx, v1346);
                    let v1348 = C::xreg_to_reg(ctx, v1344);
                    let v1349 = C::value_reg(ctx, v1348);
                    let v1350 = C::xreg_to_reg(ctx, v1347);
                    let v1351 = C::value_reg(ctx, v1350);
                    let v1352 = C::output_pair(ctx, v1349, v1351);
                    // Rule at src/isa/riscv64/lower.isle line 1390.
                    return Some(v1352);
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v12,
            constant_handle: v13,
        } => {
            if let &Opcode::Vconst = v12 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v10 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v11) = v10 {
                        let v14 = C::const_to_vconst(ctx, v13);
                        let v15 = constructor_gen_constant(ctx, v11, v14);
                        let v16 = constructor_output_vreg(ctx, v15);
                        // Rule at src/isa/riscv64/lower.isle line 14.
                        return Some(v16);
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1566,
            global_value: v1567,
        } => {
            if let &Opcode::SymbolValue = v1566 {
                let v1568 = C::symbol_value_data(ctx, v1567);
                if let Some(v1569) = v1568 {
                    let v1573 = C::load_ext_name(ctx, v1569.0, v1569.2);
                    let v1574 = constructor_output_reg(ctx, v1573);
                    // Rule at src/isa/riscv64/lower.isle line 1675.
                    return Some(v1574);
                }
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v17,
            imm: v18,
        } => {
            if let &Opcode::F32const = v17 {
                let v19 = C::u32_from_ieee32(ctx, v18);
                let v21 = C::u32_as_u64(ctx, v19);
                let v22 = constructor_imm(ctx, F32, v21);
                let v23 = constructor_output_reg(ctx, v22);
                // Rule at src/isa/riscv64/lower.isle line 19.
                return Some(v23);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v24,
            imm: v25,
        } => {
            if let &Opcode::F64const = v24 {
                let v26 = C::u64_from_ieee64(ctx, v25);
                let v28 = constructor_imm(ctx, F64, v26);
                let v29 = constructor_output_reg(ctx, v28);
                // Rule at src/isa/riscv64/lower.isle line 24.
                return Some(v29);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/riscv64/lower.isle line 9.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd.
pub fn constructor_match_shnadd<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 58.
            return Some(AluOPRRR::Sh1add);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 59.
            return Some(AluOPRRR::Sh2add);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 60.
            return Some(AluOPRRR::Sh3add);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd_uw.
pub fn constructor_match_shnadd_uw<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 80.
            return Some(AluOPRRR::Sh1adduw);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 81.
            return Some(AluOPRRR::Sh2adduw);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 82.
            return Some(AluOPRRR::Sh3adduw);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: XReg,
    arg3: XReg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v9 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v7 = C::xreg_to_reg(ctx, v6);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, arg3);
    let v12 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v13 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v8,
        ty: arg1,
        p: v10,
        x: v11,
        t0: v12,
    };
    let v14 = C::emit(ctx, &v13);
    let v15 = C::writable_reg_to_reg(ctx, v8);
    let v16 = C::xreg_new(ctx, v15);
    // Rule at src/isa/riscv64/lower.isle line 1144.
    return v16;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, 0x3);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        let v7 = constructor_rv_slli(ctx, v6, v5);
        // Rule at src/isa/riscv64/lower.isle line 1172.
        return v7;
    }
    let v8 = C::zero_reg(ctx);
    let v9 = C::xreg_new(ctx, v8);
    // Rule at src/isa/riscv64/lower.isle line 1175.
    return v9;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, -0x4);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        // Rule at src/isa/riscv64/lower.isle line 1179.
        return v6;
    }
    // Rule at src/isa/riscv64/lower.isle line 1182.
    return arg0;
}

// Generated as internal constructor for term gen_load64_extend.
pub fn constructor_gen_load64_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ExtendOp,
    arg2: MemFlags,
    arg3: XReg,
    arg4: Offset32,
) -> VReg {
    match arg1 {
        &ExtendOp::Zero => {
            let v8 = C::xreg_to_reg(ctx, arg3);
            let v9 = C::gen_amode(ctx, v8, arg4, I64);
            let v6 = &constructor_element_width_from_type(ctx, I64);
            let v10 = VecAMode::UnitStride { base: v9 };
            let v11 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, I64);
            let v12 = constructor_vec_load(ctx, v6, &v10, arg2, v11, v7);
            let v13 = C::vreg_new(ctx, v12);
            let v14 = C::vstate_from_type(ctx, arg0);
            let v16 = constructor_rv_vzext_vf2(ctx, v13, v11, v14);
            // Rule at src/isa/riscv64/lower.isle line 1539.
            return v16;
        }
        &ExtendOp::Signed => {
            let v8 = C::xreg_to_reg(ctx, arg3);
            let v9 = C::gen_amode(ctx, v8, arg4, I64);
            let v6 = &constructor_element_width_from_type(ctx, I64);
            let v10 = VecAMode::UnitStride { base: v9 };
            let v11 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, I64);
            let v12 = constructor_vec_load(ctx, v6, &v10, arg2, v11, v7);
            let v13 = C::vreg_new(ctx, v12);
            let v14 = C::vstate_from_type(ctx, arg0);
            let v15 = constructor_rv_vsext_vf2(ctx, v13, v11, v14);
            // Rule at src/isa/riscv64/lower.isle line 1533.
            return v15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_load64_extend", "src/isa/riscv64/lower.isle line 1531"
    )
}

// Generated as internal constructor for term gen_icmp.
pub fn constructor_gen_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Icmp {
        cc: arg0.clone(),
        rd: v5,
        a: arg1,
        b: arg2,
        ty: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xreg_to_xreg(ctx, v4);
    // Rule at src/isa/riscv64/lower.isle line 1600.
    return v8;
}
