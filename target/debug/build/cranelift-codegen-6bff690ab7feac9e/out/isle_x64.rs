// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/x64/inst.isle
// - src/isa/x64/lower.isle
// - /Users/kirillmadorin/Projects/filecoin-data-economy-hack/hammster-fluence/target/debug/build/cranelift-codegen-6bff690ab7feac9e/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<i32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn operand_size_of_type_32_64(&mut self, arg0: Type) -> OperandSize;
    fn raw_operand_size_of_type(&mut self, arg0: Type) -> OperandSize;
    fn put_in_reg_mem_imm(&mut self, arg0: Value) -> RegMemImm;
    fn put_in_reg_mem(&mut self, arg0: Value) -> RegMem;
    fn synthetic_amode_to_reg_mem(&mut self, arg0: &SyntheticAmode) -> RegMem;
    fn amode_to_synthetic_amode(&mut self, arg0: &Amode) -> SyntheticAmode;
    fn sum_extend_fits_in_32_bits(
        &mut self,
        arg0: Type,
        arg1: Imm64,
        arg2: Offset32,
    ) -> Option<u32>;
    fn amode_offset(&mut self, arg0: &Amode, arg1: i32) -> Amode;
    fn zero_offset(&mut self) -> Offset32;
    fn intcc_to_cc(&mut self, arg0: &IntCC) -> CC;
    fn cc_invert(&mut self, arg0: &CC) -> CC;
    fn cc_nz_or_z(&mut self, arg0: &CC) -> Option<CC>;
    fn encode_fcmp_imm(&mut self, arg0: &FcmpImm) -> u8;
    fn encode_round_imm(&mut self, arg0: &RoundImm) -> u8;
    fn imm8_reg_to_imm8_gpr(&mut self, arg0: &Imm8Reg) -> Imm8Gpr;
    fn writable_gpr_to_reg(&mut self, arg0: WritableGpr) -> WritableReg;
    fn writable_xmm_to_reg(&mut self, arg0: WritableXmm) -> WritableReg;
    fn writable_reg_to_xmm(&mut self, arg0: WritableReg) -> WritableXmm;
    fn writable_xmm_to_xmm(&mut self, arg0: WritableXmm) -> Xmm;
    fn writable_gpr_to_gpr(&mut self, arg0: WritableGpr) -> Gpr;
    fn gpr_to_reg(&mut self, arg0: Gpr) -> Reg;
    fn gpr_to_gpr_mem(&mut self, arg0: Gpr) -> GprMem;
    fn gpr_to_gpr_mem_imm(&mut self, arg0: Gpr) -> GprMemImm;
    fn xmm_to_reg(&mut self, arg0: Xmm) -> Reg;
    fn xmm_to_xmm_mem_imm(&mut self, arg0: Xmm) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_imm(&mut self, arg0: &XmmMem) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_aligned(&mut self, arg0: &XmmMem) -> XmmMemAligned;
    fn xmm_mem_imm_to_xmm_mem_aligned_imm(&mut self, arg0: &XmmMemImm) -> XmmMemAlignedImm;
    fn temp_writable_gpr(&mut self) -> WritableGpr;
    fn temp_writable_xmm(&mut self) -> WritableXmm;
    fn reg_mem_to_xmm_mem(&mut self, arg0: &RegMem) -> XmmMem;
    fn reg_to_reg_mem_imm(&mut self, arg0: Reg) -> RegMemImm;
    fn gpr_mem_imm_new(&mut self, arg0: &RegMemImm) -> GprMemImm;
    fn xmm_mem_imm_new(&mut self, arg0: &RegMemImm) -> XmmMemImm;
    fn xmm_to_xmm_mem(&mut self, arg0: Xmm) -> XmmMem;
    fn xmm_mem_to_reg_mem(&mut self, arg0: &XmmMem) -> RegMem;
    fn gpr_mem_to_reg_mem(&mut self, arg0: &GprMem) -> RegMem;
    fn xmm_new(&mut self, arg0: Reg) -> Xmm;
    fn gpr_new(&mut self, arg0: Reg) -> Gpr;
    fn reg_mem_to_gpr_mem(&mut self, arg0: &RegMem) -> GprMem;
    fn reg_to_gpr_mem(&mut self, arg0: Reg) -> GprMem;
    fn put_in_xmm_mem(&mut self, arg0: Value) -> XmmMem;
    fn put_in_xmm_mem_imm(&mut self, arg0: Value) -> XmmMemImm;
    fn gpr_to_imm8_gpr(&mut self, arg0: Gpr) -> Imm8Gpr;
    fn imm8_to_imm8_gpr(&mut self, arg0: u8) -> Imm8Gpr;
    fn xmi_imm(&mut self, arg0: u32) -> XmmMemImm;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn type_register_class(&mut self, arg0: Type) -> Option<RegisterClass>;
    fn use_avx512vl(&mut self) -> bool;
    fn use_avx512dq(&mut self) -> bool;
    fn use_avx512f(&mut self) -> bool;
    fn use_avx512bitalg(&mut self) -> bool;
    fn use_avx512vbmi(&mut self) -> bool;
    fn use_lzcnt(&mut self) -> bool;
    fn use_bmi1(&mut self) -> bool;
    fn use_popcnt(&mut self) -> bool;
    fn use_fma(&mut self) -> bool;
    fn use_ssse3(&mut self) -> bool;
    fn use_sse41(&mut self) -> bool;
    fn use_sse42(&mut self) -> bool;
    fn use_avx(&mut self) -> bool;
    fn use_avx2(&mut self) -> bool;
    fn imm8_from_value(&mut self, arg0: Value) -> Option<Imm8Reg>;
    fn const_to_type_masked_imm8(&mut self, arg0: u64, arg1: Type) -> Imm8Gpr;
    fn shift_mask(&mut self, arg0: Type) -> u8;
    fn shift_amount_masked(&mut self, arg0: Type, arg1: Imm64) -> u8;
    fn simm32_from_value(&mut self, arg0: Value) -> Option<GprMemImm>;
    fn simm32_from_imm64(&mut self, arg0: Imm64) -> Option<GprMemImm>;
    fn sinkable_load(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sinkable_load_exact(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sink_load(&mut self, arg0: &SinkableLoad) -> SyntheticAmode;
    fn ext_mode(&mut self, arg0: u16, arg1: u16) -> ExtMode;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn nonzero_u64_fits_in_u32(&mut self, arg0: u64) -> Option<u64>;
    fn ty_int_bool_or_ref(&mut self, arg0: Type) -> Option<()>;
    fn atomic_rmw_op_to_mach_atomic_rmw_op(&mut self, arg0: &AtomicRmwOp) -> MachAtomicRmwOp;
    fn shuffle_0_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_0_15_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_16_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask_with_zeros(
        &mut self,
        arg0: &VecMask,
    ) -> Option<(VCodeConstant, VCodeConstant)>;
    fn const_to_synthetic_amode(&mut self, arg0: VCodeConstant) -> SyntheticAmode;
    fn preg_rbp(&mut self) -> PReg;
    fn preg_rsp(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn libcall_1(&mut self, arg0: &LibCall, arg1: Reg) -> Reg;
    fn libcall_2(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg) -> Reg;
    fn libcall_3(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg, arg3: Reg) -> Reg;
    fn ishl_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ishl_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn ushr_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ushr_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn vconst_all_ones_or_all_zeros(&mut self, arg0: Constant) -> Option<()>;
    fn insert_i8x16_lane_hole(&mut self, arg0: u8) -> VCodeConstant;
    fn sse_insertps_lane_imm(&mut self, arg0: u8) -> u8;
    fn pblendw_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn palignr_imm_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_rev_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 314.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 356.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 375.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 383.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/x64/inst.isle line 8.
#[derive(Clone)]
pub enum MInst {
    Nop {
        len: u8,
    },
    AluRmiR {
        size: OperandSize,
        op: AluRmiROpcode,
        src1: Gpr,
        src2: GprMemImm,
        dst: WritableGpr,
    },
    AluRM {
        size: OperandSize,
        op: AluRmiROpcode,
        src1_dst: SyntheticAmode,
        src2: Gpr,
    },
    AluRmRVex {
        size: OperandSize,
        op: AluRmROpcode,
        src1: Gpr,
        src2: Gpr,
        dst: WritableGpr,
    },
    AluConstOp {
        op: AluRmiROpcode,
        size: OperandSize,
        dst: WritableGpr,
    },
    UnaryRmR {
        size: OperandSize,
        op: UnaryRmROpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    UnaryRmRVex {
        size: OperandSize,
        op: UnaryRmRVexOpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    Not {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Neg {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Div {
        size: OperandSize,
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    Div8 {
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend: Gpr,
        dst: WritableGpr,
    },
    MulHi {
        size: OperandSize,
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst_lo: WritableGpr,
        dst_hi: WritableGpr,
    },
    UMulLo {
        size: OperandSize,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    CheckedSRemSeq {
        size: OperandSize,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        divisor: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    CheckedSRemSeq8 {
        dividend: Gpr,
        divisor: Gpr,
        dst: WritableGpr,
    },
    SignExtendData {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Imm {
        dst_size: OperandSize,
        simm64: u64,
        dst: WritableGpr,
    },
    MovRR {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    MovFromPReg {
        src: PReg,
        dst: WritableGpr,
    },
    MovToPReg {
        src: Gpr,
        dst: PReg,
    },
    MovzxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    Mov64MR {
        src: SyntheticAmode,
        dst: WritableGpr,
    },
    LoadEffectiveAddress {
        addr: SyntheticAmode,
        dst: WritableGpr,
        size: OperandSize,
    },
    MovsxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    MovImmM {
        size: OperandSize,
        simm64: u64,
        dst: SyntheticAmode,
    },
    MovRM {
        size: OperandSize,
        src: Gpr,
        dst: SyntheticAmode,
    },
    ShiftR {
        size: OperandSize,
        kind: ShiftKind,
        src: Gpr,
        num_bits: Imm8Gpr,
        dst: WritableGpr,
    },
    XmmRmiReg {
        opcode: SseOpcode,
        src1: Xmm,
        src2: XmmMemAlignedImm,
        dst: WritableXmm,
    },
    CmpRmiR {
        size: OperandSize,
        opcode: CmpOpcode,
        src: GprMemImm,
        dst: Gpr,
    },
    Setcc {
        cc: CC,
        dst: WritableGpr,
    },
    Bswap {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Cmove {
        size: OperandSize,
        cc: CC,
        consequent: GprMem,
        alternative: Gpr,
        dst: WritableGpr,
    },
    XmmCmove {
        ty: Type,
        cc: CC,
        consequent: XmmMemAligned,
        alternative: Xmm,
        dst: WritableXmm,
    },
    Push64 {
        src: GprMemImm,
    },
    Pop64 {
        dst: WritableGpr,
    },
    StackProbeLoop {
        tmp: WritableReg,
        frame_size: u32,
        guard_size: u32,
    },
    XmmRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmRmRUnaligned {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlend {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmRmiRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMemImm,
        dst: WritableXmm,
    },
    XmmRmRImmVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmVexPinsr {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmRVex3 {
        op: AvxOpcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlendVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmUnaryRmRVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmMovRMVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGprImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmmVex {
        op: AvxOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    XmmToGprVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmRmREvex {
        op: Avx512Opcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmEvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmREvex3 {
        op: Avx512Opcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmR {
        op: SseOpcode,
        src: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmUnaryRmRUnaligned {
        op: SseOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImm {
        op: SseOpcode,
        src: XmmMemAligned,
        imm: u8,
        dst: WritableXmm,
    },
    XmmUnaryRmREvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmMovRM {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImm {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGpr {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmToGprImm {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmm {
        op: SseOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    CvtUint64ToFloatSeq {
        dst_size: OperandSize,
        src: Gpr,
        dst: WritableXmm,
        tmp_gpr1: WritableGpr,
        tmp_gpr2: WritableGpr,
    },
    CvtFloatToSintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
    },
    CvtFloatToUintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
        tmp_xmm2: WritableXmm,
    },
    XmmMinMaxSeq {
        size: OperandSize,
        is_min: bool,
        lhs: Xmm,
        rhs: Xmm,
        dst: WritableXmm,
    },
    XmmCmpRmR {
        op: SseOpcode,
        src: XmmMemAligned,
        dst: Xmm,
    },
    XmmRmRImm {
        op: SseOpcode,
        src1: Reg,
        src2: RegMem,
        dst: WritableReg,
        imm: u8,
        size: OperandSize,
    },
    CallKnown {
        dest: ExternalName,
        info: BoxCallInfo,
    },
    CallUnknown {
        dest: RegMem,
        info: BoxCallInfo,
    },
    ReturnCallKnown {
        callee: ExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallUnknown {
        callee: RegMem,
        info: BoxReturnCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
        stack_bytes_to_pop: u32,
    },
    JmpKnown {
        dst: MachLabel,
    },
    JmpIf {
        cc: CC,
        taken: MachLabel,
    },
    JmpCond {
        cc: CC,
        taken: MachLabel,
        not_taken: MachLabel,
    },
    JmpTableSeq {
        idx: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        default_target: MachLabel,
        targets: BoxVecMachLabel,
    },
    JmpUnknown {
        target: RegMem,
    },
    TrapIf {
        cc: CC,
        trap_code: TrapCode,
    },
    TrapIfAnd {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    TrapIfOr {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    Hlt,
    Ud2 {
        trap_code: TrapCode,
    },
    LoadExtName {
        dst: WritableReg,
        name: BoxExternalName,
        offset: i64,
        distance: RelocDistance,
    },
    LockCmpxchg {
        ty: Type,
        replacement: Reg,
        expected: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    AtomicRmwSeq {
        ty: Type,
        op: MachAtomicRmwOp,
        mem: SyntheticAmode,
        operand: Reg,
        temp: WritableReg,
        dst_old: WritableReg,
    },
    Fence {
        kind: FenceKind,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    XmmUninitializedValue {
        dst: WritableXmm,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    CoffTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
        tmp: WritableGpr,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
}

/// Internal type DivSignedness: defined at src/isa/x64/inst.isle line 692.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum DivSignedness {
    Signed,
    Unsigned,
}

/// Internal type UnaryRmRVexOpcode: defined at src/isa/x64/inst.isle line 759.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryRmRVexOpcode {
    Blsi,
    Blsmsk,
    Blsr,
}

/// Internal type Amode: defined at src/isa/x64/inst.isle line 1007.
#[derive(Clone, Debug)]
pub enum Amode {
    ImmReg {
        simm32: i32,
        base: Reg,
        flags: MemFlags,
    },
    ImmRegRegShift {
        simm32: i32,
        base: Gpr,
        index: Gpr,
        shift: u8,
        flags: MemFlags,
    },
    RipRelative {
        target: MachLabel,
    },
}

/// Internal type AvxOpcode: defined at src/isa/x64/inst.isle line 1193.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AvxOpcode {
    Vfmadd213ss,
    Vfmadd213sd,
    Vfmadd213ps,
    Vfmadd213pd,
    Vfmadd132ss,
    Vfmadd132sd,
    Vfmadd132ps,
    Vfmadd132pd,
    Vfnmadd213ss,
    Vfnmadd213sd,
    Vfnmadd213ps,
    Vfnmadd213pd,
    Vfnmadd132ss,
    Vfnmadd132sd,
    Vfnmadd132ps,
    Vfnmadd132pd,
    Vcmpps,
    Vcmppd,
    Vpsrlw,
    Vpsrld,
    Vpsrlq,
    Vpaddb,
    Vpaddw,
    Vpaddd,
    Vpaddq,
    Vpaddsb,
    Vpaddsw,
    Vpaddusb,
    Vpaddusw,
    Vpsubb,
    Vpsubw,
    Vpsubd,
    Vpsubq,
    Vpsubsb,
    Vpsubsw,
    Vpsubusb,
    Vpsubusw,
    Vpavgb,
    Vpavgw,
    Vpand,
    Vandps,
    Vandpd,
    Vpor,
    Vorps,
    Vorpd,
    Vpxor,
    Vxorps,
    Vxorpd,
    Vpmullw,
    Vpmulld,
    Vpmulhw,
    Vpmulhd,
    Vpmulhrsw,
    Vpmulhuw,
    Vpmuldq,
    Vpmuludq,
    Vpunpckhwd,
    Vpunpcklwd,
    Vunpcklps,
    Vunpckhps,
    Vandnps,
    Vandnpd,
    Vpandn,
    Vaddps,
    Vaddpd,
    Vsubps,
    Vsubpd,
    Vmulps,
    Vmulpd,
    Vdivps,
    Vdivpd,
    Vpcmpeqb,
    Vpcmpeqw,
    Vpcmpeqd,
    Vpcmpeqq,
    Vpcmpgtb,
    Vpcmpgtw,
    Vpcmpgtd,
    Vpcmpgtq,
    Vminps,
    Vminpd,
    Vmaxps,
    Vmaxpd,
    Vblendvpd,
    Vblendvps,
    Vpblendvb,
    Vmovlhps,
    Vpmaxsb,
    Vpmaxsw,
    Vpmaxsd,
    Vpminsb,
    Vpminsw,
    Vpminsd,
    Vpmaxub,
    Vpmaxuw,
    Vpmaxud,
    Vpminub,
    Vpminuw,
    Vpminud,
    Vpunpcklbw,
    Vpunpckhbw,
    Vpacksswb,
    Vpackssdw,
    Vpackuswb,
    Vpackusdw,
    Vpalignr,
    Vpinsrb,
    Vpinsrw,
    Vpinsrd,
    Vpinsrq,
    Vpmaddwd,
    Vpmaddubsw,
    Vinsertps,
    Vpshufb,
    Vshufps,
    Vpsllw,
    Vpslld,
    Vpsllq,
    Vpsraw,
    Vpsrad,
    Vpmovsxbw,
    Vpmovzxbw,
    Vpmovsxwd,
    Vpmovzxwd,
    Vpmovsxdq,
    Vpmovzxdq,
    Vaddss,
    Vaddsd,
    Vmulss,
    Vmulsd,
    Vsubss,
    Vsubsd,
    Vdivss,
    Vdivsd,
    Vpabsb,
    Vpabsw,
    Vpabsd,
    Vminss,
    Vminsd,
    Vmaxss,
    Vmaxsd,
    Vsqrtps,
    Vsqrtpd,
    Vroundps,
    Vroundpd,
    Vcvtdq2pd,
    Vcvtdq2ps,
    Vcvtpd2ps,
    Vcvtps2pd,
    Vcvttpd2dq,
    Vcvttps2dq,
    Vphaddw,
    Vphaddd,
    Vpunpckhdq,
    Vpunpckldq,
    Vpunpckhqdq,
    Vpunpcklqdq,
    Vpshuflw,
    Vpshufhw,
    Vpshufd,
    Vmovss,
    Vmovsd,
    Vmovups,
    Vmovupd,
    Vmovdqu,
    Vpextrb,
    Vpextrw,
    Vpextrd,
    Vpextrq,
    Vpblendw,
    Vmovddup,
    Vpbroadcastb,
    Vpbroadcastw,
    Vpbroadcastd,
    Vbroadcastss,
    Vmovd,
    Vmovq,
    Vmovmskps,
    Vmovmskpd,
    Vpmovmskb,
    Vcvtsi2ss,
    Vcvtsi2sd,
    Vcvtss2sd,
    Vcvtsd2ss,
    Vsqrtss,
    Vsqrtsd,
    Vroundss,
    Vroundsd,
}

/// Internal type Avx512Opcode: defined at src/isa/x64/inst.isle line 1384.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum Avx512Opcode {
    Vcvtudq2ps,
    Vpabsq,
    Vpermi2b,
    Vpmullq,
    Vpopcntb,
    Vpsraq,
    VpsraqImm,
}

/// Internal type RegisterClass: defined at src/isa/x64/inst.isle line 1661.
#[derive(Clone, Debug)]
pub enum RegisterClass {
    Gpr { single_register: bool },
    Xmm,
}

/// Internal type ExtendKind: defined at src/isa/x64/inst.isle line 2109.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendKind {
    Sign,
    Zero,
}

/// Internal type IcmpCondResult: defined at src/isa/x64/inst.isle line 4552.
#[derive(Clone, Debug)]
pub enum IcmpCondResult {
    Condition { producer: ProducesFlags, cc: CC },
}

/// Internal type FcmpCondResult: defined at src/isa/x64/inst.isle line 4665.
#[derive(Clone, Debug)]
pub enum FcmpCondResult {
    Condition {
        producer: ProducesFlags,
        cc: CC,
    },
    AndCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
    OrCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 65.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 69.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 138.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 149.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 160.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 159"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 165.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 164"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 170.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 169"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 324.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 326.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 329.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 323"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 337.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 342.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 344.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 346.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 341"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 371.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 370"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 401.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 402.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 407.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 409.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 406"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 422.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 416.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 415"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 453.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 459.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 471.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 487.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 494.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 507.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 447.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 439.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 437"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 525.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 532.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 543.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 548.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 553.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 558.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 563.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 541"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 572.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 580.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 589.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 597.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 606.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 666.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 674.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 683.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 691.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 700.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 619.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 627.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 636.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 644.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 653.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 713.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 721.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 730.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 738.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 747.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 759.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 767.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 784.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 776.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 792.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 801.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 569"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1001.
    return v2;
}

// Generated as internal constructor for term operand_size_bits.
pub fn constructor_operand_size_bits<C: Context>(ctx: &mut C, arg0: &OperandSize) -> u16 {
    match arg0 {
        &OperandSize::Size8 => {
            // Rule at src/isa/x64/inst.isle line 734.
            return 0x8;
        }
        &OperandSize::Size16 => {
            // Rule at src/isa/x64/inst.isle line 735.
            return 0x10;
        }
        &OperandSize::Size32 => {
            // Rule at src/isa/x64/inst.isle line 736.
            return 0x20;
        }
        &OperandSize::Size64 => {
            // Rule at src/isa/x64/inst.isle line 737.
            return 0x40;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size_bits", "src/isa/x64/inst.isle line 733"
    )
}

// Generated as internal constructor for term reg_mem_to_reg_mem_imm.
pub fn constructor_reg_mem_to_reg_mem_imm<C: Context>(ctx: &mut C, arg0: &RegMem) -> RegMemImm {
    match arg0 {
        &RegMem::Reg { reg: v1 } => {
            let v2 = RegMemImm::Reg { reg: v1 };
            // Rule at src/isa/x64/inst.isle line 981.
            return v2;
        }
        &RegMem::Mem { addr: ref v3 } => {
            let v4 = RegMemImm::Mem { addr: v3.clone() };
            // Rule at src/isa/x64/inst.isle line 983.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "reg_mem_to_reg_mem_imm", "src/isa/x64/inst.isle line 980"
    )
}

// Generated as internal constructor for term to_amode.
pub fn constructor_to_amode<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6
        {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v12 = &constructor_to_amode_add(ctx, arg0, v9.0, v9.1, arg2);
                // Rule at src/isa/x64/inst.isle line 1069.
                return v12.clone();
            }
        }
    }
    let v3 = &constructor_amode_imm_reg(ctx, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1067.
    return v3.clone();
}

// Generated as internal constructor for term to_amode_add.
pub fn constructor_to_amode_add<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v5 = C::def_inst(ctx, arg2);
    if let Some(v6) = v5 {
        let v7 = &C::inst_data(ctx, v6);
        if let &InstructionData::Binary {
            opcode: ref v55,
            args: ref v56,
        } = v7
        {
            if let &Opcode::Iadd = v55 {
                let v57 = C::unpack_value_array_2(ctx, v56);
                let v71 = C::def_inst(ctx, v57.0);
                if let Some(v72) = v71 {
                    let v73 = &C::inst_data(ctx, v72);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v74,
                        imm: v75,
                    } = v73
                    {
                        if let &Opcode::Iconst = v74 {
                            let v76 = C::simm32(ctx, v75);
                            if let Some(v77) = v76 {
                                let v12 = C::offset32_to_i32(ctx, arg3);
                                let v78 = C::s32_add_fallible(ctx, v12, v77);
                                if let Some(v79) = v78 {
                                    let v80 = C::i32_to_offset32(ctx, v79);
                                    let v81 = &constructor_amode_imm_reg_reg_shift(
                                        ctx, arg0, arg1, v57.1, v80,
                                    );
                                    // Rule at src/isa/x64/inst.isle line 1102.
                                    return v81.clone();
                                }
                            }
                        }
                    }
                }
                let v60 = C::def_inst(ctx, v57.1);
                if let Some(v61) = v60 {
                    let v62 = &C::inst_data(ctx, v61);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v63,
                        imm: v64,
                    } = v62
                    {
                        if let &Opcode::Iconst = v63 {
                            let v65 = C::simm32(ctx, v64);
                            if let Some(v66) = v65 {
                                let v12 = C::offset32_to_i32(ctx, arg3);
                                let v67 = C::s32_add_fallible(ctx, v12, v66);
                                if let Some(v68) = v67 {
                                    let v69 = C::i32_to_offset32(ctx, v68);
                                    let v70 = &constructor_amode_imm_reg_reg_shift(
                                        ctx, arg0, arg1, v57.0, v69,
                                    );
                                    // Rule at src/isa/x64/inst.isle line 1099.
                                    return v70.clone();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v17 = C::def_inst(ctx, arg1);
    if let Some(v18) = v17 {
        let v19 = &C::inst_data(ctx, v18);
        match v19 {
            &InstructionData::Binary {
                opcode: ref v28,
                args: ref v29,
            } => {
                if let &Opcode::Iadd = v28 {
                    let v30 = C::unpack_value_array_2(ctx, v29);
                    let v44 = C::def_inst(ctx, v30.0);
                    if let Some(v45) = v44 {
                        let v46 = &C::inst_data(ctx, v45);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v47,
                            imm: v48,
                        } = v46
                        {
                            if let &Opcode::Iconst = v47 {
                                let v49 = C::simm32(ctx, v48);
                                if let Some(v50) = v49 {
                                    let v12 = C::offset32_to_i32(ctx, arg3);
                                    let v51 = C::s32_add_fallible(ctx, v12, v50);
                                    if let Some(v52) = v51 {
                                        let v53 = C::i32_to_offset32(ctx, v52);
                                        let v54 = &constructor_amode_imm_reg_reg_shift(
                                            ctx, arg0, v30.1, arg2, v53,
                                        );
                                        // Rule at src/isa/x64/inst.isle line 1096.
                                        return v54.clone();
                                    }
                                }
                            }
                        }
                    }
                    let v33 = C::def_inst(ctx, v30.1);
                    if let Some(v34) = v33 {
                        let v35 = &C::inst_data(ctx, v34);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v36,
                            imm: v37,
                        } = v35
                        {
                            if let &Opcode::Iconst = v36 {
                                let v38 = C::simm32(ctx, v37);
                                if let Some(v39) = v38 {
                                    let v12 = C::offset32_to_i32(ctx, arg3);
                                    let v40 = C::s32_add_fallible(ctx, v12, v39);
                                    if let Some(v41) = v40 {
                                        let v42 = C::i32_to_offset32(ctx, v41);
                                        let v43 = &constructor_amode_imm_reg_reg_shift(
                                            ctx, arg0, v30.0, arg2, v42,
                                        );
                                        // Rule at src/isa/x64/inst.isle line 1093.
                                        return v43.clone();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v20,
                imm: v21,
            } => {
                if let &Opcode::Iconst = v20 {
                    let v22 = C::simm32(ctx, v21);
                    if let Some(v23) = v22 {
                        let v12 = C::offset32_to_i32(ctx, arg3);
                        let v24 = C::s32_add_fallible(ctx, v12, v23);
                        if let Some(v25) = v24 {
                            let v26 = C::i32_to_offset32(ctx, v25);
                            let v27 = &constructor_amode_imm_reg(ctx, arg0, arg2, v26);
                            // Rule at src/isa/x64/inst.isle line 1090.
                            return v27.clone();
                        }
                    }
                }
            }
            _ => {}
        }
    }
    if let Some(v6) = v5 {
        let v7 = &C::inst_data(ctx, v6);
        if let &InstructionData::UnaryImm {
            opcode: ref v8,
            imm: v9,
        } = v7
        {
            if let &Opcode::Iconst = v8 {
                let v10 = C::simm32(ctx, v9);
                if let Some(v11) = v10 {
                    let v12 = C::offset32_to_i32(ctx, arg3);
                    let v13 = C::s32_add_fallible(ctx, v12, v11);
                    if let Some(v14) = v13 {
                        let v15 = C::i32_to_offset32(ctx, v14);
                        let v16 = &constructor_amode_imm_reg(ctx, arg0, arg1, v15);
                        // Rule at src/isa/x64/inst.isle line 1087.
                        return v16.clone();
                    }
                }
            }
        }
    }
    let v4 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, arg2, arg3);
    // Rule at src/isa/x64/inst.isle line 1085.
    return v4.clone();
}

// Generated as internal constructor for term amode_imm_reg.
pub fn constructor_amode_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v6 = C::def_inst(ctx, arg1);
    if let Some(v7) = v6 {
        let v8 = &C::inst_data(ctx, v7);
        if let &InstructionData::Binary {
            opcode: ref v9,
            args: ref v10,
        } = v8
        {
            if let &Opcode::Iadd = v9 {
                let v11 = C::unpack_value_array_2(ctx, v10);
                let v14 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v11.0, v11.1, arg2);
                // Rule at src/isa/x64/inst.isle line 1112.
                return v14.clone();
            }
        }
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v3 = C::offset32_to_i32(ctx, arg2);
    let v5 = Amode::ImmReg {
        simm32: v3,
        base: v4,
        flags: arg0,
    };
    // Rule at src/isa/x64/inst.isle line 1110.
    return v5;
}

// Generated as internal constructor for term amode_imm_reg_reg_shift.
pub fn constructor_amode_imm_reg_reg_shift<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v30 = C::def_inst(ctx, arg1);
    if let Some(v31) = v30 {
        let v32 = &C::inst_data(ctx, v31);
        if let &InstructionData::Binary {
            opcode: ref v33,
            args: ref v34,
        } = v32
        {
            if let &Opcode::Ishl = v33 {
                let v35 = C::unpack_value_array_2(ctx, v34);
                let v38 = C::def_inst(ctx, v35.1);
                if let Some(v39) = v38 {
                    let v40 = &C::inst_data(ctx, v39);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v41,
                        imm: v42,
                    } = v40
                    {
                        if let &Opcode::Iconst = v41 {
                            let v43 = C::uimm8(ctx, v42);
                            if let Some(v44) = v43 {
                                let v45 = C::u8_as_u32(ctx, v44);
                                let v46 = C::u32_lteq(ctx, v45, 0x3);
                                if let Some(v47) = v46 {
                                    let v48 = constructor_put_in_gpr(ctx, arg2);
                                    let v49 = constructor_put_in_gpr(ctx, v35.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v50 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v48,
                                        index: v49,
                                        shift: v44,
                                        flags: arg0,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 1121.
                                    return v50;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v9 = C::def_inst(ctx, arg2);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Binary {
            opcode: ref v12,
            args: ref v13,
        } = v11
        {
            if let &Opcode::Ishl = v12 {
                let v14 = C::unpack_value_array_2(ctx, v13);
                let v17 = C::def_inst(ctx, v14.1);
                if let Some(v18) = v17 {
                    let v19 = &C::inst_data(ctx, v18);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v20,
                        imm: v21,
                    } = v19
                    {
                        if let &Opcode::Iconst = v20 {
                            let v22 = C::uimm8(ctx, v21);
                            if let Some(v23) = v22 {
                                let v24 = C::u8_as_u32(ctx, v23);
                                let v26 = C::u32_lteq(ctx, v24, 0x3);
                                if let Some(v27) = v26 {
                                    let v5 = constructor_put_in_gpr(ctx, arg1);
                                    let v28 = constructor_put_in_gpr(ctx, v14.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v29 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v5,
                                        index: v28,
                                        shift: v23,
                                        flags: arg0,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 1118.
                                    return v29;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = constructor_put_in_gpr(ctx, arg2);
    let v4 = C::offset32_to_i32(ctx, arg3);
    let v8 = Amode::ImmRegRegShift {
        simm32: v4,
        base: v5,
        index: v6,
        shift: 0x0,
        flags: arg0,
    };
    // Rule at src/isa/x64/inst.isle line 1116.
    return v8;
}

// Generated as internal constructor for term put_masked_in_imm8_gpr.
pub fn constructor_put_masked_in_imm8_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
) -> Imm8Gpr {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::UnaryImm {
            opcode: ref v4,
            imm: v5,
        } = v3
        {
            if let &Opcode::Iconst = v4 {
                let v6 = C::u64_from_imm64(ctx, v5);
                let v8 = &C::const_to_type_masked_imm8(ctx, v6, arg1);
                // Rule at src/isa/x64/inst.isle line 1157.
                return v8.clone();
            }
        }
    }
    let v9 = C::fits_in_16(ctx, arg1);
    if let Some(v10) = v9 {
        let v12 = C::put_in_regs(ctx, arg0);
        let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
        let v15 = C::shift_mask(ctx, v10);
        let v16 = C::u8_as_u32(ctx, v15);
        let v17 = RegMemImm::Imm { simm32: v16 };
        let v18 = &C::gpr_mem_imm_new(ctx, &v17);
        let v19 = constructor_x64_and(ctx, I64, v14, v18);
        let v20 = &C::gpr_to_imm8_gpr(ctx, v19);
        // Rule at src/isa/x64/inst.isle line 1159.
        return v20.clone();
    }
    let v12 = C::put_in_regs(ctx, arg0);
    let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
    let v21 = &C::gpr_to_imm8_gpr(ctx, v14);
    // Rule at src/isa/x64/inst.isle line 1161.
    return v21.clone();
}

// Generated as internal constructor for term reg_to_gpr_mem_imm.
pub fn constructor_reg_to_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Reg) -> GprMemImm {
    let v1 = C::gpr_new(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem_imm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1569.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr.
pub fn constructor_put_in_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1576.
    return v2;
}

// Generated as internal constructor for term put_in_gpr_mem.
pub fn constructor_put_in_gpr_mem<C: Context>(ctx: &mut C, arg0: Value) -> GprMem {
    let v1 = &C::put_in_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1583.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr_mem_imm.
pub fn constructor_put_in_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Value) -> GprMemImm {
    let v1 = &C::put_in_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1590.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm.
pub fn constructor_put_in_xmm<C: Context>(ctx: &mut C, arg0: Value) -> Xmm {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xmm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1597.
    return v2;
}

// Generated as internal constructor for term output_gpr.
pub fn constructor_output_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> InstOutput {
    let v1 = C::gpr_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1614.
    return v2;
}

// Generated as internal constructor for term value_gprs.
pub fn constructor_value_gprs<C: Context>(ctx: &mut C, arg0: Gpr, arg1: Gpr) -> ValueRegs {
    let v2 = C::gpr_to_reg(ctx, arg0);
    let v3 = C::gpr_to_reg(ctx, arg1);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/x64/inst.isle line 1619.
    return v4;
}

// Generated as internal constructor for term output_xmm.
pub fn constructor_output_xmm<C: Context>(ctx: &mut C, arg0: Xmm) -> InstOutput {
    let v1 = C::xmm_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1624.
    return v2;
}

// Generated as internal constructor for term value_regs_get_gpr.
pub fn constructor_value_regs_get_gpr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: usize,
) -> Gpr {
    let v2 = C::value_regs_get(ctx, arg0, arg1);
    let v3 = C::gpr_new(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1631.
    return v3;
}

// Generated as internal constructor for term lo_gpr.
pub fn constructor_lo_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = constructor_lo_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1644.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem_imm.
pub fn constructor_sink_load_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> GprMemImm {
    let v1 = &constructor_sink_load_to_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1785.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_xmm_mem.
pub fn constructor_sink_load_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> XmmMem {
    let v1 = &constructor_sink_load_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1789.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem.
pub fn constructor_sink_load_to_reg_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> RegMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem { addr: v1.clone() };
    // Rule at src/isa/x64/inst.isle line 1793.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem.
pub fn constructor_sink_load_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> GprMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem { addr: v1.clone() };
    let v3 = &C::reg_mem_to_gpr_mem(ctx, &v2);
    // Rule at src/isa/x64/inst.isle line 1796.
    return v3.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem_imm.
pub fn constructor_sink_load_to_reg_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> RegMemImm {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMemImm::Mem { addr: v1.clone() };
    // Rule at src/isa/x64/inst.isle line 1799.
    return v2;
}

// Generated as internal constructor for term xmm_uninit_value.
pub fn constructor_xmm_uninit_value<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = C::temp_writable_xmm(ctx);
    let v1 = MInst::XmmUninitializedValue { dst: v0 };
    let v2 = C::emit(ctx, &v1);
    let v3 = C::writable_xmm_to_xmm(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 1811.
    return v3;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
    arg1: i64,
    arg2: RelocDistance,
) -> Reg {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::writable_gpr_to_reg(ctx, v3);
    let v5 = C::box_external_name(ctx, arg0);
    let v6 = MInst::LoadExtName {
        dst: v4,
        name: v5,
        offset: arg1,
        distance: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1818.
    return v8;
}

// Generated as internal constructor for term mov64_mr.
pub fn constructor_mov64_mr<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::Mov64MR {
        src: arg0.clone(),
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1825.
    return v4;
}

// Generated as internal constructor for term alu_rmi_r.
pub fn constructor_alu_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1832.
    return v8;
}

// Generated as internal constructor for term alu_rm_r_vex.
pub fn constructor_alu_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmROpcode,
    arg2: Gpr,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmRVex {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1840.
    return v8;
}

// Generated as internal constructor for term xmm_rm_r.
pub fn constructor_xmm_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1848.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_unaligned.
pub fn constructor_xmm_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmRUnaligned {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1855.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_blend.
pub fn constructor_xmm_rm_r_blend<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlend {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1862.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_blend_vex.
pub fn constructor_xmm_rmr_blend_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlendVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1869.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_vex.
pub fn constructor_xmm_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1876.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_vex.
pub fn constructor_xmm_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1883.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_imm.
pub fn constructor_xmm_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Reg,
    arg2: &RegMem,
    arg3: u8,
    arg4: &OperandSize,
) -> Xmm {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::writable_xmm_to_reg(ctx, v5);
    let v7 = MInst::XmmRmRImm {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v6,
        imm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_xmm_to_xmm(ctx, v5);
    // Rule at src/isa/x64/inst.isle line 1890.
    return v9;
}

// Generated as internal constructor for term xmm_vex_pinsr.
pub fn constructor_xmm_vex_pinsr<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmVexPinsr {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1902.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm.
pub fn constructor_xmm_unary_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImm {
        op: arg0.clone(),
        src: arg1.clone(),
        imm: arg2,
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1909.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r.
pub fn constructor_xmm_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1916.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_unaligned.
pub fn constructor_xmm_unary_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRUnaligned {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1923.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_evex.
pub fn constructor_xmm_unary_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmREvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1930.
    return v5;
}

// Generated as internal constructor for term xmm_rm_r_evex.
pub fn constructor_xmm_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmREvex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1937.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_evex.
pub fn constructor_xmm_unary_rm_r_imm_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmEvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1947.
    return v6;
}

// Generated as internal constructor for term xmm_rmi_xmm.
pub fn constructor_xmm_rmi_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAlignedImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiReg {
        opcode: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1954.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm.
pub fn constructor_xmm_to_gpr_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImm {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1964.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm_vex.
pub fn constructor_xmm_to_gpr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImmVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1971.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm.
pub fn constructor_gpr_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmm {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1978.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm_vex.
pub fn constructor_gpr_to_xmm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1985.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr.
pub fn constructor_xmm_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGpr {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1992.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_vex.
pub fn constructor_xmm_to_gpr_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 1999.
    return v6;
}

// Generated as internal constructor for term xmm_min_max_seq.
pub fn constructor_xmm_min_max_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Xmm,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::XmmMinMaxSeq {
        size: v5.clone(),
        is_min: arg1,
        lhs: arg2,
        rhs: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2006.
    return v8;
}

// Generated as internal constructor for term xmm_rmir_vex.
pub fn constructor_xmm_rmir_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMemImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2014.
    return v6;
}

// Generated as internal constructor for term xmm_rmr_imm_vex.
pub fn constructor_xmm_rmr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRImmVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2021.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_vex3.
pub fn constructor_xmm_rmr_vex3<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRVex3 {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2,
        src3: arg3.clone(),
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2028.
    return v7;
}

// Generated as internal constructor for term mul_hi.
pub fn constructor_mul_hi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v7 = MInst::MulHi {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_gpr_to_gpr(ctx, v4);
    let v10 = C::writable_gpr_to_gpr(ctx, v5);
    let v11 = constructor_value_gprs(ctx, v9, v10);
    // Rule at src/isa/x64/inst.isle line 2037.
    return v11;
}

// Generated as internal constructor for term unary_rm_r.
pub fn constructor_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmROpcode,
    arg1: Gpr,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v5 = MInst::UnaryRmR {
        size: arg2.clone(),
        op: arg0.clone(),
        src: v4.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2051.
    return v7;
}

// Generated as internal constructor for term unary_rm_r_vex.
pub fn constructor_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmRVexOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::UnaryRmRVex {
        size: arg2.clone(),
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2058.
    return v6;
}

// Generated as internal constructor for term cvt_u64_to_float_seq.
pub fn constructor_cvt_u64_to_float_seq<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Xmm {
    let v2 = &C::raw_operand_size_of_type(ctx, arg0);
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CvtUint64ToFloatSeq {
        dst_size: v2.clone(),
        src: arg1,
        dst: v3,
        tmp_gpr1: v4,
        tmp_gpr2: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2064.
    return v8;
}

// Generated as internal constructor for term cvt_float_to_uint_seq.
pub fn constructor_cvt_float_to_uint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_xmm(ctx);
    let v9 = C::temp_writable_gpr(ctx);
    let v10 = constructor_put_in_xmm(ctx, arg1);
    let v11 = MInst::CvtFloatToUintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v10,
        dst: v6,
        tmp_gpr: v9,
        tmp_xmm: v7,
        tmp_xmm2: v8,
    };
    let v12 = C::emit(ctx, &v11);
    let v13 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 2073.
    return v13;
}

// Generated as internal constructor for term cvt_float_to_sint_seq.
pub fn constructor_cvt_float_to_sint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_gpr(ctx);
    let v9 = constructor_put_in_xmm(ctx, arg1);
    let v10 = MInst::CvtFloatToSintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v9,
        dst: v6,
        tmp_gpr: v8,
        tmp_xmm: v7,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 2085.
    return v12;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MovFromPReg { src: arg0, dst: v1 };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2097.
    return v4;
}

// Generated as internal constructor for term extend_to_gpr.
pub fn constructor_extend_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
    arg2: &ExtendKind,
) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    if v1 == arg1 {
        let v4 = constructor_put_in_gpr(ctx, arg0);
        // Rule at src/isa/x64/inst.isle line 2121.
        return v4;
    }
    if v1 == I32 {
        if arg1 == I64 {
            if let &ExtendKind::Zero = arg2 {
                let v5 = constructor_value32_zeros_upper32(ctx, arg0);
                if v5 == true {
                    let v4 = constructor_put_in_gpr(ctx, arg0);
                    // Rule at src/isa/x64/inst.isle line 2129.
                    return v4;
                }
            }
        }
    }
    let v7 = &C::operand_size_of_type_32_64(ctx, arg1);
    let v8 = constructor_operand_size_bits(ctx, v7);
    let v6 = C::ty_bits_u16(ctx, v1);
    let v9 = &C::ext_mode(ctx, v6, v8);
    let v10 = &constructor_put_in_gpr_mem(ctx, arg0);
    let v11 = constructor_extend(ctx, arg2, arg1, v9, v10);
    // Rule at src/isa/x64/inst.isle line 2133.
    return v11;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: &ExtendKind,
    arg1: Type,
    arg2: &ExtMode,
    arg3: &GprMem,
) -> Gpr {
    match arg0 {
        &ExtendKind::Sign => {
            let v5 = constructor_x64_movsx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 2153.
            return v5;
        }
        &ExtendKind::Zero => {
            let v4 = constructor_x64_movzx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 2149.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend", "src/isa/x64/inst.isle line 2146"
    )
}

// Generated as internal constructor for term value32_zeros_upper32.
pub fn constructor_value32_zeros_upper32<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Binary {
                opcode: ref v4,
                args: ref v5,
            } => {
                match v4 {
                    &Opcode::Iadd => {
                        // Rule at src/isa/x64/inst.isle line 2160.
                        return true;
                    }
                    &Opcode::Isub => {
                        // Rule at src/isa/x64/inst.isle line 2161.
                        return true;
                    }
                    &Opcode::Imul => {
                        // Rule at src/isa/x64/inst.isle line 2162.
                        return true;
                    }
                    &Opcode::Band => {
                        // Rule at src/isa/x64/inst.isle line 2163.
                        return true;
                    }
                    &Opcode::Bor => {
                        // Rule at src/isa/x64/inst.isle line 2164.
                        return true;
                    }
                    &Opcode::Bxor => {
                        // Rule at src/isa/x64/inst.isle line 2165.
                        return true;
                    }
                    &Opcode::Ishl => {
                        // Rule at src/isa/x64/inst.isle line 2166.
                        return true;
                    }
                    &Opcode::Ushr => {
                        // Rule at src/isa/x64/inst.isle line 2167.
                        return true;
                    }
                    _ => {}
                }
            }
            &InstructionData::Load {
                opcode: ref v10,
                arg: v11,
                flags: v12,
                offset: v13,
            } => {
                if let &Opcode::Uload32 = v10 {
                    // Rule at src/isa/x64/inst.isle line 2168.
                    return true;
                }
            }
            _ => {}
        }
    }
    // Rule at src/isa/x64/inst.isle line 2169.
    return false;
}

// Generated as internal constructor for term vec_int_type.
pub fn constructor_vec_int_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/x64/inst.isle line 2175.
                    return I8X16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/x64/inst.isle line 2176.
                    return I16X8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/x64/inst.isle line 2177.
                    return I32X4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/x64/inst.isle line 2178.
                    return I64X2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_int_type", "src/isa/x64/inst.isle line 2174"
    )
}

// Generated as internal constructor for term x64_xor_vector.
pub fn constructor_x64_xor_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2182.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2183.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2184.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2185.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pxor(ctx, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 2186.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_xor_vector", "src/isa/x64/inst.isle line 2181"
    )
}

// Generated as internal constructor for term vector_all_ones.
pub fn constructor_vector_all_ones<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = constructor_xmm_uninit_value(ctx);
    let v1 = &C::xmm_to_xmm_mem(ctx, v0);
    let v2 = constructor_x64_pcmpeqd(ctx, v0, v1);
    // Rule at src/isa/x64/inst.isle line 2198.
    return v2;
}

// Generated as internal constructor for term mov_rmi_to_xmm.
pub fn constructor_mov_rmi_to_xmm<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> XmmMemImm {
    match arg0 {
        &RegMemImm::Reg { reg: v4 } => {
            let v5 = &C::reg_to_gpr_mem(ctx, v4);
            let v6 = constructor_x64_movd_to_xmm(ctx, v5);
            let v7 = &C::xmm_to_xmm_mem_imm(ctx, v6);
            // Rule at src/isa/x64/inst.isle line 2206.
            return v7.clone();
        }
        &RegMemImm::Mem { addr: ref v1 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 2204.
            return v2.clone();
        }
        &RegMemImm::Imm { simm32: v3 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 2205.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mov_rmi_to_xmm", "src/isa/x64/inst.isle line 2203"
    )
}

// Generated as internal constructor for term x64_load.
pub fn constructor_x64_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: &ExtKind,
) -> Reg {
    match arg0 {
        I64 => {
            let v11 = constructor_mov64_mr(ctx, arg1);
            // Rule at src/isa/x64/inst.isle line 2225.
            return v11;
        }
        F32 => {
            let v12 = constructor_x64_movss_load(ctx, arg1);
            let v13 = C::xmm_to_reg(ctx, v12);
            // Rule at src/isa/x64/inst.isle line 2228.
            return v13;
        }
        F64 => {
            let v14 = constructor_x64_movsd_load(ctx, arg1);
            let v15 = C::xmm_to_reg(ctx, v14);
            // Rule at src/isa/x64/inst.isle line 2231.
            return v15;
        }
        F32X4 => {
            let v16 = constructor_x64_movups_load(ctx, arg1);
            let v17 = C::xmm_to_reg(ctx, v16);
            // Rule at src/isa/x64/inst.isle line 2234.
            return v17;
        }
        F64X2 => {
            let v18 = constructor_x64_movupd_load(ctx, arg1);
            let v19 = C::xmm_to_reg(ctx, v18);
            // Rule at src/isa/x64/inst.isle line 2237.
            return v19;
        }
        _ => {}
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ExtKind::SignExtend = arg2 {
            let v5 = C::ty_bytes(ctx, v2);
            let v7 = &C::ext_mode(ctx, v5, 0x8);
            let v8 = &constructor_synthetic_amode_to_gpr_mem(ctx, arg1);
            let v9 = constructor_x64_movsx(ctx, v7, v8);
            let v10 = C::gpr_to_reg(ctx, v9);
            // Rule at src/isa/x64/inst.isle line 2221.
            return v10;
        }
    }
    let v20 = C::multi_lane(ctx, arg0);
    if let Some(v21) = v20 {
        let v24 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
        let v25 = constructor_x64_movdqu_load(ctx, v24);
        let v26 = C::xmm_to_reg(ctx, v25);
        // Rule at src/isa/x64/inst.isle line 2240.
        return v26;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_load", "src/isa/x64/inst.isle line 2219"
    )
}

// Generated as internal constructor for term x64_mov.
pub fn constructor_x64_mov<C: Context>(ctx: &mut C, arg0: &Amode) -> Reg {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = constructor_mov64_mr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2244.
    return v2;
}

// Generated as internal constructor for term x64_movzx.
pub fn constructor_x64_movzx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovzxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2248.
    return v5;
}

// Generated as internal constructor for term x64_movsx.
pub fn constructor_x64_movsx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovsxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2254.
    return v5;
}

// Generated as internal constructor for term x64_movss_load.
pub fn constructor_x64_movss_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovss, v2);
        // Rule at src/isa/x64/inst.isle line 2262.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movss, v2);
    // Rule at src/isa/x64/inst.isle line 2260.
    return v3;
}

// Generated as internal constructor for term x64_movss_store.
pub fn constructor_x64_movss_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovss, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2269.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2267.
    return v3.clone();
}

// Generated as internal constructor for term x64_movsd_load.
pub fn constructor_x64_movsd_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovsd, v2);
        // Rule at src/isa/x64/inst.isle line 2276.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movsd, v2);
    // Rule at src/isa/x64/inst.isle line 2274.
    return v3;
}

// Generated as internal constructor for term x64_movsd_store.
pub fn constructor_x64_movsd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovsd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2283.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2281.
    return v3.clone();
}

// Generated as internal constructor for term x64_movups_load.
pub fn constructor_x64_movups_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovups, v2);
        // Rule at src/isa/x64/inst.isle line 2290.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movups, v2);
    // Rule at src/isa/x64/inst.isle line 2288.
    return v3;
}

// Generated as internal constructor for term x64_movups_store.
pub fn constructor_x64_movups_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovups, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2297.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movups, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2295.
    return v3.clone();
}

// Generated as internal constructor for term x64_movupd_load.
pub fn constructor_x64_movupd_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovupd, v2);
        // Rule at src/isa/x64/inst.isle line 2304.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movupd, v2);
    // Rule at src/isa/x64/inst.isle line 2302.
    return v3;
}

// Generated as internal constructor for term x64_movupd_store.
pub fn constructor_x64_movupd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovupd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2311.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movupd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2309.
    return v3.clone();
}

// Generated as internal constructor for term x64_movd_to_gpr.
pub fn constructor_x64_movd_to_gpr<C: Context>(ctx: &mut C, arg0: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src/isa/x64/inst.isle line 2319.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2317.
    return v3;
}

// Generated as internal constructor for term x64_movd_to_xmm.
pub fn constructor_x64_movd_to_xmm<C: Context>(ctx: &mut C, arg0: &GprMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src/isa/x64/inst.isle line 2327.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2325.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_xmm.
pub fn constructor_x64_movq_to_xmm<C: Context>(ctx: &mut C, arg0: &GprMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src/isa/x64/inst.isle line 2335.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 2333.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_gpr.
pub fn constructor_x64_movq_to_gpr<C: Context>(ctx: &mut C, arg0: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src/isa/x64/inst.isle line 2343.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 2341.
    return v3;
}

// Generated as internal constructor for term x64_movdqu_load.
pub fn constructor_x64_movdqu_load<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovdqu, arg0);
        // Rule at src/isa/x64/inst.isle line 2350.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movdqu, arg0);
    // Rule at src/isa/x64/inst.isle line 2348.
    return v2;
}

// Generated as internal constructor for term x64_movdqu_store.
pub fn constructor_x64_movdqu_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovdqu, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2357.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movdqu, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2355.
    return v3.clone();
}

// Generated as internal constructor for term x64_pmovsxbw.
pub fn constructor_x64_pmovsxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxbw, arg0);
        // Rule at src/isa/x64/inst.isle line 2364.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 2362.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxbw.
pub fn constructor_x64_pmovzxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxbw, arg0);
        // Rule at src/isa/x64/inst.isle line 2371.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 2369.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxwd.
pub fn constructor_x64_pmovsxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxwd, arg0);
        // Rule at src/isa/x64/inst.isle line 2378.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 2376.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxwd.
pub fn constructor_x64_pmovzxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxwd, arg0);
        // Rule at src/isa/x64/inst.isle line 2385.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 2383.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxdq.
pub fn constructor_x64_pmovsxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxdq, arg0);
        // Rule at src/isa/x64/inst.isle line 2392.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 2390.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxdq.
pub fn constructor_x64_pmovzxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxdq, arg0);
        // Rule at src/isa/x64/inst.isle line 2399.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 2397.
    return v2;
}

// Generated as internal constructor for term x64_movrm.
pub fn constructor_x64_movrm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovRM {
        size: v3.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2404.
    return v5;
}

// Generated as internal constructor for term xmm_movrm.
pub fn constructor_xmm_movrm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRM {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 2409.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm.
pub fn constructor_xmm_movrm_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImm {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2413.
    return v5;
}

// Generated as internal constructor for term xmm_movrm_vex.
pub fn constructor_xmm_movrm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRMVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 2417.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm_vex.
pub fn constructor_xmm_movrm_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImmVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2421.
    return v5;
}

// Generated as internal constructor for term x64_xmm_load_const.
pub fn constructor_x64_xmm_load_const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VCodeConstant,
) -> Xmm {
    let v2 = &C::const_to_synthetic_amode(ctx, arg1);
    let v4 = constructor_x64_load(ctx, arg0, v2, &ExtKind::None);
    let v5 = C::xmm_new(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2426.
    return v5;
}

// Generated as internal constructor for term x64_add.
pub fn constructor_x64_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2437.
    return v4;
}

// Generated as internal constructor for term x64_add_with_flags_paired.
pub fn constructor_x64_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Add,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2445.
    return v8;
}

// Generated as internal constructor for term x64_alurmi_with_flags_paired.
pub fn constructor_x64_alurmi_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::temp_writable_gpr(ctx);
        let v7 = &C::raw_operand_size_of_type(ctx, v3);
        let v9 = constructor_writable_gpr_to_r_reg(ctx, v6);
        let v8 = MInst::AluRmiR {
            size: v7.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: v8,
            result: v9,
        };
        // Rule at src/isa/x64/inst.isle line 2456.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_alurmi_with_flags_paired", "src/isa/x64/inst.isle line 2455"
    )
}

// Generated as internal constructor for term x64_alurmi_with_flags_chained.
pub fn constructor_x64_alurmi_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ConsumesAndProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::temp_writable_gpr(ctx);
        let v7 = &C::raw_operand_size_of_type(ctx, v3);
        let v9 = constructor_writable_gpr_to_r_reg(ctx, v6);
        let v8 = MInst::AluRmiR {
            size: v7.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v6,
        };
        let v10 = ConsumesAndProducesFlags::ReturnsReg {
            inst: v8,
            result: v9,
        };
        // Rule at src/isa/x64/inst.isle line 2468.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_alurmi_with_flags_chained", "src/isa/x64/inst.isle line 2467"
    )
}

// Generated as internal constructor for term x64_adc_paired.
pub fn constructor_x64_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Adc,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2480.
    return v8;
}

// Generated as internal constructor for term x64_sub.
pub fn constructor_x64_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2492.
    return v4;
}

// Generated as internal constructor for term x64_sub_with_flags_paired.
pub fn constructor_x64_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sub,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2500.
    return v8;
}

// Generated as internal constructor for term x64_sbb_paired.
pub fn constructor_x64_sbb_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sbb,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2512.
    return v8;
}

// Generated as internal constructor for term x64_mul.
pub fn constructor_x64_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Mul, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2524.
    return v4;
}

// Generated as internal constructor for term x64_umullo.
pub fn constructor_x64_umullo<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::UMulLo {
        size: v4.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2532.
    return v7;
}

// Generated as internal constructor for term x64_umullo_with_flags_paired.
pub fn constructor_x64_umullo_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v6 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v5 = MInst::UMulLo {
        size: v4.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/x64/inst.isle line 2539.
    return v7;
}

// Generated as internal constructor for term x64_and.
pub fn constructor_x64_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2550.
    return v4;
}

// Generated as internal constructor for term x64_and_with_flags_paired.
pub fn constructor_x64_and_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::And,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/x64/inst.isle line 2557.
    return v7;
}

// Generated as internal constructor for term x64_or.
pub fn constructor_x64_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMemImm) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2568.
    return v4;
}

// Generated as internal constructor for term x64_xor.
pub fn constructor_x64_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2576.
    return v4;
}

// Generated as internal constructor for term x64_andn.
pub fn constructor_x64_andn<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Andn, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2583.
    return v4;
}

// Generated as internal constructor for term imm_i64.
pub fn constructor_imm_i64<C: Context>(ctx: &mut C, arg0: Type, arg1: i64) -> Reg {
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = constructor_imm(ctx, arg0, v2);
    // Rule at src/isa/x64/inst.isle line 2590.
    return v3;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        I64 => {
            let v20 = C::nonzero_u64_fits_in_u32(ctx, arg1);
            if let Some(v21) = v20 {
                let v5 = C::temp_writable_gpr(ctx);
                let v23 = MInst::Imm {
                    dst_size: OperandSize::Size32,
                    simm64: v21,
                    dst: v5,
                };
                let v24 = C::emit(ctx, &v23);
                let v25 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 2621.
                return v25;
            }
        }
        F32 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v35 = constructor_xmm_zero(ctx, arg0);
                    let v36 = C::xmm_to_reg(ctx, v35);
                    // Rule at src/isa/x64/inst.isle line 2639.
                    return v36;
                }
                false => {
                    let v11 = constructor_imm(ctx, I32, arg1);
                    let v12 = &C::reg_to_gpr_mem(ctx, v11);
                    let v13 = constructor_x64_movd_to_xmm(ctx, v12);
                    let v14 = C::xmm_to_reg(ctx, v13);
                    // Rule at src/isa/x64/inst.isle line 2612.
                    return v14;
                }
                _ => {}
            }
        }
        F64 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v35 = constructor_xmm_zero(ctx, arg0);
                    let v36 = C::xmm_to_reg(ctx, v35);
                    // Rule at src/isa/x64/inst.isle line 2644.
                    return v36;
                }
                false => {
                    let v16 = constructor_imm(ctx, I64, arg1);
                    let v17 = &C::reg_to_gpr_mem(ctx, v16);
                    let v18 = constructor_x64_movq_to_xmm(ctx, v17);
                    let v19 = C::xmm_to_reg(ctx, v18);
                    // Rule at src/isa/x64/inst.isle line 2616.
                    return v19;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::u64_is_zero(ctx, arg1);
        match v4 {
            true => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v27 = MInst::AluConstOp {
                    op: AluRmiROpcode::Xor,
                    size: v6.clone(),
                    dst: v5,
                };
                let v28 = C::emit(ctx, &v27);
                let v29 = C::writable_gpr_to_gpr(ctx, v5);
                let v30 = C::gpr_to_reg(ctx, v29);
                // Rule at src/isa/x64/inst.isle line 2627.
                return v30;
            }
            false => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v7 = MInst::Imm {
                    dst_size: v6.clone(),
                    simm64: arg1,
                    dst: v5,
                };
                let v8 = C::emit(ctx, &v7);
                let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 2605.
                return v9;
            }
            _ => {}
        }
    }
    if arg1 == 0x0 {
        let v31 = C::multi_lane(ctx, arg0);
        if let Some(v32) = v31 {
            let v35 = constructor_xmm_zero(ctx, arg0);
            let v36 = C::xmm_to_reg(ctx, v35);
            // Rule at src/isa/x64/inst.isle line 2635.
            return v36;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/x64/inst.isle line 2602"
    )
}

// Generated as internal constructor for term xmm_zero.
pub fn constructor_xmm_zero<C: Context>(ctx: &mut C, arg0: Type) -> Xmm {
    let v1 = constructor_xmm_uninit_value(ctx);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    let v3 = constructor_x64_xor_vector(ctx, arg0, v1, v2);
    // Rule at src/isa/x64/inst.isle line 2649.
    return v3;
}

// Generated as internal constructor for term shift_r.
pub fn constructor_shift_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftKind,
    arg2: Gpr,
    arg3: &Imm8Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::raw_operand_size_of_type(ctx, arg0);
    let v6 = MInst::ShiftR {
        size: v5.clone(),
        kind: arg1.clone(),
        src: arg2,
        num_bits: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2655.
    return v8;
}

// Generated as internal constructor for term x64_rotl.
pub fn constructor_x64_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2665.
    return v4;
}

// Generated as internal constructor for term x64_rotr.
pub fn constructor_x64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateRight, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2670.
    return v4;
}

// Generated as internal constructor for term x64_shl.
pub fn constructor_x64_shl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2675.
    return v4;
}

// Generated as internal constructor for term x64_shr.
pub fn constructor_x64_shr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightLogical, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2680.
    return v4;
}

// Generated as internal constructor for term x64_sar.
pub fn constructor_x64_sar<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightArithmetic, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2685.
    return v4;
}

// Generated as internal constructor for term x64_bswap.
pub fn constructor_x64_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Bswap {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2692.
    return v6;
}

// Generated as internal constructor for term cmp_rmi_r.
pub fn constructor_cmp_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &CmpOpcode,
    arg2: &GprMemImm,
    arg3: Gpr,
) -> ProducesFlags {
    let v4 = MInst::CmpRmiR {
        size: arg0.clone(),
        opcode: arg1.clone(),
        src: arg2.clone(),
        dst: arg3,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2700.
    return v5;
}

// Generated as internal constructor for term x64_cmp.
pub fn constructor_x64_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &GprMemImm,
    arg2: Gpr,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2709.
    return v4.clone();
}

// Generated as internal constructor for term x64_cmp_imm.
pub fn constructor_x64_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: u32,
    arg2: Gpr,
) -> ProducesFlags {
    let v4 = RegMemImm::Imm { simm32: arg1 };
    let v5 = &C::gpr_mem_imm_new(ctx, &v4);
    let v6 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, v5, arg2);
    // Rule at src/isa/x64/inst.isle line 2714.
    return v6.clone();
}

// Generated as internal constructor for term xmm_cmp_rm_r.
pub fn constructor_xmm_cmp_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
    arg2: Xmm,
) -> ProducesFlags {
    let v3 = MInst::XmmCmpRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 2719.
    return v4;
}

// Generated as internal constructor for term x64_ucomis.
pub fn constructor_x64_ucomis<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        F32 => {
            let v4 = constructor_put_in_xmm(ctx, arg0);
            let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
            let v6 = constructor_put_in_xmm(ctx, arg1);
            let v7 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomiss, v5, v6);
            // Rule at src/isa/x64/inst.isle line 2725.
            return v7.clone();
        }
        F64 => {
            let v4 = constructor_put_in_xmm(ctx, arg0);
            let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
            let v6 = constructor_put_in_xmm(ctx, arg1);
            let v9 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomisd, v5, v6);
            // Rule at src/isa/x64/inst.isle line 2729.
            return v9.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_ucomis", "src/isa/x64/inst.isle line 2724"
    )
}

// Generated as internal constructor for term x64_test.
pub fn constructor_x64_test<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &GprMemImm,
    arg2: Gpr,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Test, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2734.
    return v4.clone();
}

// Generated as internal constructor for term x64_ptest.
pub fn constructor_x64_ptest<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: Xmm) -> ProducesFlags {
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ptest, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 2739.
    return v4.clone();
}

// Generated as internal constructor for term cmove.
pub fn constructor_cmove<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &GprMem,
    arg3: Gpr,
) -> ConsumesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v6 = MInst::Cmove {
        size: v5.clone(),
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2746.
    return v8;
}

// Generated as internal constructor for term cmove_xmm.
pub fn constructor_cmove_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &XmmMemAligned,
    arg3: Xmm,
) -> ConsumesFlags {
    let v4 = C::temp_writable_xmm(ctx);
    let v6 = constructor_writable_xmm_to_r_reg(ctx, v4);
    let v5 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/x64/inst.isle line 2754.
    return v7;
}

// Generated as internal constructor for term cmove_from_values.
pub fn constructor_cmove_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v26 = &constructor_put_in_gpr_mem(ctx, arg2);
                        let v27 = constructor_put_in_gpr(ctx, arg3);
                        let v28 = &constructor_cmove(ctx, arg0, arg1, v26, v27);
                        // Rule at src/isa/x64/inst.isle line 2785.
                        return v28.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v7 = C::put_in_regs(ctx, arg2);
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::temp_writable_gpr(ctx);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v13 = constructor_value_regs_get_gpr(ctx, v7, 0x0);
                            let v14 = &C::gpr_to_gpr_mem(ctx, v13);
                            let v15 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v18 = constructor_value_regs_get_gpr(ctx, v7, 0x1);
                            let v19 = &C::gpr_to_gpr_mem(ctx, v18);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v22 = constructor_writable_gpr_to_r_reg(ctx, v9);
                            let v23 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v24 = C::value_regs(ctx, v22, v23);
                            let v16 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v14.clone(),
                                alternative: v15,
                                dst: v9,
                            };
                            let v21 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v19.clone(),
                                alternative: v20,
                                dst: v10,
                            };
                            let v25 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                                inst1: v16,
                                inst2: v21,
                                result: v24,
                            };
                            // Rule at src/isa/x64/inst.isle line 2764.
                            return v25;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v29 = &constructor_put_in_xmm_mem_aligned(ctx, arg2);
                let v30 = constructor_put_in_xmm(ctx, arg3);
                let v31 = &constructor_cmove_xmm(ctx, arg0, arg1, v29, v30);
                // Rule at src/isa/x64/inst.isle line 2788.
                return v31.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_from_values", "src/isa/x64/inst.isle line 2763"
    )
}

// Generated as internal constructor for term cmove_or.
pub fn constructor_cmove_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &GprMem,
    arg4: Gpr,
) -> ConsumesFlags {
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v9 = C::writable_gpr_to_gpr(ctx, v6);
    let v11 = constructor_writable_gpr_to_value_regs(ctx, v5);
    let v8 = MInst::Cmove {
        size: v7.clone(),
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v10 = MInst::Cmove {
        size: v7.clone(),
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v9,
        dst: v5,
    };
    let v12 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v8,
        inst2: v10,
        result: v11,
    };
    // Rule at src/isa/x64/inst.isle line 2795.
    return v12;
}

// Generated as internal constructor for term cmove_or_xmm.
pub fn constructor_cmove_or_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &XmmMemAligned,
    arg4: Xmm,
) -> ConsumesFlags {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::temp_writable_xmm(ctx);
    let v8 = C::writable_xmm_to_xmm(ctx, v6);
    let v10 = constructor_writable_xmm_to_value_regs(ctx, v5);
    let v7 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v9 = MInst::XmmCmove {
        ty: arg0,
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v8,
        dst: v5,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v9,
        result: v10,
    };
    // Rule at src/isa/x64/inst.isle line 2807.
    return v11;
}

// Generated as internal constructor for term cmove_or_from_values.
pub fn constructor_cmove_or_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Value,
    arg4: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v37 = &constructor_put_in_gpr_mem(ctx, arg3);
                        let v38 = constructor_put_in_gpr(ctx, arg4);
                        let v39 = &constructor_cmove_or(ctx, arg0, arg1, arg2, v37, v38);
                        // Rule at src/isa/x64/inst.isle line 2840.
                        return v39.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::put_in_regs(ctx, arg4);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v11 = C::temp_writable_gpr(ctx);
                            let v12 = C::temp_writable_gpr(ctx);
                            let v13 = C::temp_writable_gpr(ctx);
                            let v16 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v17 = &C::gpr_to_gpr_mem(ctx, v16);
                            let v18 = constructor_value_regs_get_gpr(ctx, v9, 0x0);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                            let v22 = C::writable_gpr_to_gpr(ctx, v12);
                            let v25 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v26 = &C::gpr_to_gpr_mem(ctx, v25);
                            let v27 = constructor_value_regs_get_gpr(ctx, v9, 0x1);
                            let v29 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v30 = &C::gpr_to_gpr_mem(ctx, v29);
                            let v31 = C::writable_gpr_to_gpr(ctx, v13);
                            let v33 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v34 = constructor_writable_gpr_to_r_reg(ctx, v11);
                            let v35 = C::value_regs(ctx, v33, v34);
                            let v19 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v17.clone(),
                                alternative: v18,
                                dst: v12,
                            };
                            let v23 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v21.clone(),
                                alternative: v22,
                                dst: v10,
                            };
                            let v28 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v26.clone(),
                                alternative: v27,
                                dst: v13,
                            };
                            let v32 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v30.clone(),
                                alternative: v31,
                                dst: v11,
                            };
                            let v36 = ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                                inst1: v19,
                                inst2: v23,
                                inst3: v28,
                                inst4: v32,
                                result: v35,
                            };
                            // Rule at src/isa/x64/inst.isle line 2821.
                            return v36;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v40 = &constructor_put_in_xmm_mem_aligned(ctx, arg3);
                let v41 = constructor_put_in_xmm(ctx, arg4);
                let v42 = &constructor_cmove_or_xmm(ctx, arg0, arg1, arg2, v40, v41);
                // Rule at src/isa/x64/inst.isle line 2843.
                return v42.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_or_from_values", "src/isa/x64/inst.isle line 2820"
    )
}

// Generated as internal constructor for term x64_setcc.
pub fn constructor_x64_setcc<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2848.
    return v4;
}

// Generated as internal constructor for term x64_setcc_paired.
pub fn constructor_x64_setcc_paired<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2857.
    return v4;
}

// Generated as internal constructor for term x64_paddb.
pub fn constructor_x64_paddb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2867.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2865.
    return v4;
}

// Generated as internal constructor for term x64_paddw.
pub fn constructor_x64_paddw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2875.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2873.
    return v4;
}

// Generated as internal constructor for term x64_paddd.
pub fn constructor_x64_paddd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2883.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2881.
    return v4;
}

// Generated as internal constructor for term x64_paddq.
pub fn constructor_x64_paddq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2891.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2889.
    return v4;
}

// Generated as internal constructor for term x64_paddsb.
pub fn constructor_x64_paddsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2899.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2897.
    return v4;
}

// Generated as internal constructor for term x64_paddsw.
pub fn constructor_x64_paddsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2907.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2905.
    return v4;
}

// Generated as internal constructor for term x64_phaddw.
pub fn constructor_x64_phaddw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2915.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2913.
    return v4;
}

// Generated as internal constructor for term x64_phaddd.
pub fn constructor_x64_phaddd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2923.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2921.
    return v4;
}

// Generated as internal constructor for term x64_paddusb.
pub fn constructor_x64_paddusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2931.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2929.
    return v4;
}

// Generated as internal constructor for term x64_paddusw.
pub fn constructor_x64_paddusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2939.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2937.
    return v4;
}

// Generated as internal constructor for term x64_psubb.
pub fn constructor_x64_psubb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2947.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2945.
    return v4;
}

// Generated as internal constructor for term x64_psubw.
pub fn constructor_x64_psubw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2955.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2953.
    return v4;
}

// Generated as internal constructor for term x64_psubd.
pub fn constructor_x64_psubd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2963.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2961.
    return v4;
}

// Generated as internal constructor for term x64_psubq.
pub fn constructor_x64_psubq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2971.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2969.
    return v4;
}

// Generated as internal constructor for term x64_psubsb.
pub fn constructor_x64_psubsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2979.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2977.
    return v4;
}

// Generated as internal constructor for term x64_psubsw.
pub fn constructor_x64_psubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2987.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2985.
    return v4;
}

// Generated as internal constructor for term x64_psubusb.
pub fn constructor_x64_psubusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2995.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2993.
    return v4;
}

// Generated as internal constructor for term x64_psubusw.
pub fn constructor_x64_psubusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3003.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3001.
    return v4;
}

// Generated as internal constructor for term x64_pavgb.
pub fn constructor_x64_pavgb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3011.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3009.
    return v4;
}

// Generated as internal constructor for term x64_pavgw.
pub fn constructor_x64_pavgw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3019.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3017.
    return v4;
}

// Generated as internal constructor for term x64_pand.
pub fn constructor_x64_pand<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpand, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3027.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pand, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3025.
    return v4;
}

// Generated as internal constructor for term x64_andps.
pub fn constructor_x64_andps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3035.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3033.
    return v4;
}

// Generated as internal constructor for term x64_andpd.
pub fn constructor_x64_andpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3043.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3041.
    return v4;
}

// Generated as internal constructor for term x64_por.
pub fn constructor_x64_por<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpor, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3051.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Por, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3049.
    return v4;
}

// Generated as internal constructor for term x64_orps.
pub fn constructor_x64_orps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3059.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Orps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3057.
    return v4;
}

// Generated as internal constructor for term x64_orpd.
pub fn constructor_x64_orpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3067.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Orpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3065.
    return v4;
}

// Generated as internal constructor for term x64_pxor.
pub fn constructor_x64_pxor<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpxor, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3075.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pxor, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3073.
    return v4;
}

// Generated as internal constructor for term x64_xorps.
pub fn constructor_x64_xorps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3083.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3081.
    return v4;
}

// Generated as internal constructor for term x64_xorpd.
pub fn constructor_x64_xorpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3091.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3089.
    return v4;
}

// Generated as internal constructor for term x64_pmullw.
pub fn constructor_x64_pmullw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmullw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3099.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmullw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3097.
    return v4;
}

// Generated as internal constructor for term x64_pmulld.
pub fn constructor_x64_pmulld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulld, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3107.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3105.
    return v4;
}

// Generated as internal constructor for term x64_pmulhw.
pub fn constructor_x64_pmulhw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3115.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3113.
    return v4;
}

// Generated as internal constructor for term x64_pmulhrsw.
pub fn constructor_x64_pmulhrsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhrsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3123.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhrsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3121.
    return v4;
}

// Generated as internal constructor for term x64_pmulhuw.
pub fn constructor_x64_pmulhuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3131.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3129.
    return v4;
}

// Generated as internal constructor for term x64_pmuldq.
pub fn constructor_x64_pmuldq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuldq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3139.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuldq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3137.
    return v4;
}

// Generated as internal constructor for term x64_pmuludq.
pub fn constructor_x64_pmuludq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuludq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3147.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuludq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3145.
    return v4;
}

// Generated as internal constructor for term x64_punpckhwd.
pub fn constructor_x64_punpckhwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3155.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3153.
    return v4;
}

// Generated as internal constructor for term x64_punpcklwd.
pub fn constructor_x64_punpcklwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3163.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3161.
    return v4;
}

// Generated as internal constructor for term x64_punpckldq.
pub fn constructor_x64_punpckldq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckldq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3171.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckldq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3169.
    return v4;
}

// Generated as internal constructor for term x64_punpckhdq.
pub fn constructor_x64_punpckhdq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhdq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3179.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhdq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3177.
    return v4;
}

// Generated as internal constructor for term x64_punpcklqdq.
pub fn constructor_x64_punpcklqdq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklqdq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3187.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklqdq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3185.
    return v4;
}

// Generated as internal constructor for term x64_punpckhqdq.
pub fn constructor_x64_punpckhqdq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhqdq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3195.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhqdq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3193.
    return v4;
}

// Generated as internal constructor for term x64_unpcklps.
pub fn constructor_x64_unpcklps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3203.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3201.
    return v4;
}

// Generated as internal constructor for term x64_unpckhps.
pub fn constructor_x64_unpckhps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpckhps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3211.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpckhps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3209.
    return v4;
}

// Generated as internal constructor for term x64_andnps.
pub fn constructor_x64_andnps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3219.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3217.
    return v4;
}

// Generated as internal constructor for term x64_andnpd.
pub fn constructor_x64_andnpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3227.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3225.
    return v4;
}

// Generated as internal constructor for term x64_pandn.
pub fn constructor_x64_pandn<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpandn, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3235.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pandn, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3233.
    return v4;
}

// Generated as internal constructor for term x64_addss.
pub fn constructor_x64_addss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3243.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3241.
    return v3;
}

// Generated as internal constructor for term x64_addsd.
pub fn constructor_x64_addsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3251.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3249.
    return v3;
}

// Generated as internal constructor for term x64_addps.
pub fn constructor_x64_addps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3259.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3257.
    return v4;
}

// Generated as internal constructor for term x64_addpd.
pub fn constructor_x64_addpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3267.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3265.
    return v4;
}

// Generated as internal constructor for term x64_subss.
pub fn constructor_x64_subss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3275.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3273.
    return v3;
}

// Generated as internal constructor for term x64_subsd.
pub fn constructor_x64_subsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3283.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3281.
    return v3;
}

// Generated as internal constructor for term x64_subps.
pub fn constructor_x64_subps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3291.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3289.
    return v4;
}

// Generated as internal constructor for term x64_subpd.
pub fn constructor_x64_subpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3299.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3297.
    return v4;
}

// Generated as internal constructor for term x64_mulss.
pub fn constructor_x64_mulss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3307.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3305.
    return v3;
}

// Generated as internal constructor for term x64_mulsd.
pub fn constructor_x64_mulsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3315.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3313.
    return v3;
}

// Generated as internal constructor for term x64_mulps.
pub fn constructor_x64_mulps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3323.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3321.
    return v4;
}

// Generated as internal constructor for term x64_mulpd.
pub fn constructor_x64_mulpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3331.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3329.
    return v4;
}

// Generated as internal constructor for term x64_divss.
pub fn constructor_x64_divss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3339.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3337.
    return v3;
}

// Generated as internal constructor for term x64_divsd.
pub fn constructor_x64_divsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3347.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3345.
    return v3;
}

// Generated as internal constructor for term x64_divps.
pub fn constructor_x64_divps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3355.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3353.
    return v4;
}

// Generated as internal constructor for term x64_divpd.
pub fn constructor_x64_divpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3363.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3361.
    return v4;
}

// Generated as internal constructor for term x64_blendvpd.
pub fn constructor_x64_blendvpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvpd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3371.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvpd, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 3369.
    return v5;
}

// Generated as internal constructor for term x64_blendvps.
pub fn constructor_x64_blendvps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3379.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvps, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 3377.
    return v5;
}

// Generated as internal constructor for term x64_pblendvb.
pub fn constructor_x64_pblendvb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vpblendvb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3387.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Pblendvb, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 3385.
    return v5;
}

// Generated as internal constructor for term x64_pblendw.
pub fn constructor_x64_pblendw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpblendw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3395.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pblendw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3393.
    return v7;
}

// Generated as internal constructor for term x64_movsd_regmove.
pub fn constructor_x64_movsd_regmove<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3410.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3408.
    return v4;
}

// Generated as internal constructor for term x64_movss_regmove.
pub fn constructor_x64_movss_regmove<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovss, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3417.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movss, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3415.
    return v4;
}

// Generated as internal constructor for term x64_movlhps.
pub fn constructor_x64_movlhps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovlhps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3425.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Movlhps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3423.
    return v4;
}

// Generated as internal constructor for term x64_pmaxs.
pub fn constructor_x64_pmaxs<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3431.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3432.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3433.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxs", "src/isa/x64/inst.isle line 3430"
    )
}

// Generated as internal constructor for term x64_pmaxsb.
pub fn constructor_x64_pmaxsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3437.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3436.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsw.
pub fn constructor_x64_pmaxsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3442.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3441.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsd.
pub fn constructor_x64_pmaxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3447.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3446.
    return v4;
}

// Generated as internal constructor for term x64_pmins.
pub fn constructor_x64_pmins<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3453.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3454.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3455.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmins", "src/isa/x64/inst.isle line 3452"
    )
}

// Generated as internal constructor for term x64_pminsb.
pub fn constructor_x64_pminsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3459.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3458.
    return v4;
}

// Generated as internal constructor for term x64_pminsw.
pub fn constructor_x64_pminsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3464.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3463.
    return v4;
}

// Generated as internal constructor for term x64_pminsd.
pub fn constructor_x64_pminsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3469.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3468.
    return v4;
}

// Generated as internal constructor for term x64_pmaxu.
pub fn constructor_x64_pmaxu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3475.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3476.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3477.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxu", "src/isa/x64/inst.isle line 3474"
    )
}

// Generated as internal constructor for term x64_pmaxub.
pub fn constructor_x64_pmaxub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxub, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3481.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxub, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3480.
    return v4;
}

// Generated as internal constructor for term x64_pmaxuw.
pub fn constructor_x64_pmaxuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3486.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3485.
    return v4;
}

// Generated as internal constructor for term x64_pmaxud.
pub fn constructor_x64_pmaxud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxud, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3491.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxud, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3490.
    return v4;
}

// Generated as internal constructor for term x64_pminu.
pub fn constructor_x64_pminu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3497.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3498.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3499.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pminu", "src/isa/x64/inst.isle line 3496"
    )
}

// Generated as internal constructor for term x64_pminub.
pub fn constructor_x64_pminub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminub, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3503.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminub, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3502.
    return v4;
}

// Generated as internal constructor for term x64_pminuw.
pub fn constructor_x64_pminuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3508.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3507.
    return v4;
}

// Generated as internal constructor for term x64_pminud.
pub fn constructor_x64_pminud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminud, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3513.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminud, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3512.
    return v4;
}

// Generated as internal constructor for term x64_punpcklbw.
pub fn constructor_x64_punpcklbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklbw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3521.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklbw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3519.
    return v4;
}

// Generated as internal constructor for term x64_punpckhbw.
pub fn constructor_x64_punpckhbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhbw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3529.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhbw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3527.
    return v4;
}

// Generated as internal constructor for term x64_packsswb.
pub fn constructor_x64_packsswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpacksswb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3537.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packsswb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3535.
    return v4;
}

// Generated as internal constructor for term x64_packssdw.
pub fn constructor_x64_packssdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackssdw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3545.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packssdw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3543.
    return v4;
}

// Generated as internal constructor for term x64_packuswb.
pub fn constructor_x64_packuswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackuswb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3553.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packuswb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3551.
    return v4;
}

// Generated as internal constructor for term x64_packusdw.
pub fn constructor_x64_packusdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackusdw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3561.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packusdw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3559.
    return v4;
}

// Generated as internal constructor for term x64_palignr.
pub fn constructor_x64_palignr<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpalignr, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3573.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Palignr, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3567.
    return v7;
}

// Generated as internal constructor for term x64_cmpp.
pub fn constructor_x64_cmpp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: &FcmpImm,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v4 = constructor_x64_cmpps(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3579.
            return v4;
        }
        F64X2 => {
            let v5 = constructor_x64_cmppd(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3580.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_cmpp", "src/isa/x64/inst.isle line 3578"
    )
}

// Generated as internal constructor for term x64_cmpps.
pub fn constructor_x64_cmpps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmpps, arg0, arg1, v11);
        // Rule at src/isa/x64/inst.isle line 3589.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmpps, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3583.
    return v8;
}

// Generated as internal constructor for term x64_cmppd.
pub fn constructor_x64_cmppd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmppd, arg0, arg1, v11);
        // Rule at src/isa/x64/inst.isle line 3606.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmppd, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3600.
    return v8;
}

// Generated as internal constructor for term x64_pinsrb.
pub fn constructor_x64_pinsrb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3621.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrb, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3615.
    return v7;
}

// Generated as internal constructor for term x64_pinsrw.
pub fn constructor_x64_pinsrw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3633.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3627.
    return v7;
}

// Generated as internal constructor for term x64_pinsrd.
pub fn constructor_x64_pinsrd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3645.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3639.
    return v7;
}

// Generated as internal constructor for term x64_pinsrq.
pub fn constructor_x64_pinsrq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrq, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3657.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 3651.
    return v7;
}

// Generated as internal constructor for term x64_roundss.
pub fn constructor_x64_roundss<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundss, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 3665.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundss, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3663.
    return v5;
}

// Generated as internal constructor for term x64_roundsd.
pub fn constructor_x64_roundsd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundsd, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 3673.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundsd, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3671.
    return v5;
}

// Generated as internal constructor for term x64_roundps.
pub fn constructor_x64_roundps<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundps, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 3681.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundps, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3679.
    return v5;
}

// Generated as internal constructor for term x64_roundpd.
pub fn constructor_x64_roundpd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundpd, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 3689.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundpd, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3687.
    return v5;
}

// Generated as internal constructor for term x64_pmaddwd.
pub fn constructor_x64_pmaddwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3697.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3695.
    return v4;
}

// Generated as internal constructor for term x64_pmaddubsw.
pub fn constructor_x64_pmaddubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddubsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3704.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddubsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3702.
    return v4;
}

// Generated as internal constructor for term x64_insertps.
pub fn constructor_x64_insertps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vinsertps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3716.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(
        ctx,
        &SseOpcode::Insertps,
        v4,
        v5,
        arg2,
        &OperandSize::Size32,
    );
    // Rule at src/isa/x64/inst.isle line 3710.
    return v7;
}

// Generated as internal constructor for term x64_pshufd.
pub fn constructor_x64_pshufd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3724.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufd, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 3722.
    return v4;
}

// Generated as internal constructor for term x64_pshufb.
pub fn constructor_x64_pshufb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpshufb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3732.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pshufb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3730.
    return v4;
}

// Generated as internal constructor for term x64_pshuflw.
pub fn constructor_x64_pshuflw<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshuflw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3740.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshuflw, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 3738.
    return v4;
}

// Generated as internal constructor for term x64_pshufhw.
pub fn constructor_x64_pshufhw<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufhw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3748.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufhw, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 3746.
    return v4;
}

// Generated as internal constructor for term x64_shufps.
pub fn constructor_x64_shufps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vshufps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3760.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Shufps, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3754.
    return v7;
}

// Generated as internal constructor for term x64_pabsb.
pub fn constructor_x64_pabsb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsb, arg0);
        // Rule at src/isa/x64/inst.isle line 3768.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsb, v2);
    // Rule at src/isa/x64/inst.isle line 3766.
    return v3;
}

// Generated as internal constructor for term x64_pabsw.
pub fn constructor_x64_pabsw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsw, arg0);
        // Rule at src/isa/x64/inst.isle line 3776.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsw, v2);
    // Rule at src/isa/x64/inst.isle line 3774.
    return v3;
}

// Generated as internal constructor for term x64_pabsd.
pub fn constructor_x64_pabsd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsd, arg0);
        // Rule at src/isa/x64/inst.isle line 3784.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsd, v2);
    // Rule at src/isa/x64/inst.isle line 3782.
    return v3;
}

// Generated as internal constructor for term x64_vcvtudq2ps.
pub fn constructor_x64_vcvtudq2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vcvtudq2ps, arg0);
    // Rule at src/isa/x64/inst.isle line 3790.
    return v2;
}

// Generated as internal constructor for term x64_vpabsq.
pub fn constructor_x64_vpabsq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpabsq, arg0);
    // Rule at src/isa/x64/inst.isle line 3795.
    return v2;
}

// Generated as internal constructor for term x64_vpopcntb.
pub fn constructor_x64_vpopcntb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpopcntb, arg0);
    // Rule at src/isa/x64/inst.isle line 3800.
    return v2;
}

// Generated as internal constructor for term x64_vpmullq.
pub fn constructor_x64_vpmullq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpmullq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3807.
    return v3;
}

// Generated as internal constructor for term x64_vpermi2b.
pub fn constructor_x64_vpermi2b<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmREvex3 {
        op: Avx512Opcode::Vpermi2b,
        src1: arg0,
        src2: arg1,
        src3: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3816.
    return v7;
}

// Generated as internal constructor for term mulhi_u.
pub fn constructor_mulhi_u<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> ValueRegs {
    let v4 = constructor_mul_hi(ctx, arg0, false, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3828.
    return v4;
}

// Generated as internal constructor for term x64_psllw.
pub fn constructor_x64_psllw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3835.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3833.
    return v4;
}

// Generated as internal constructor for term x64_pslld.
pub fn constructor_x64_pslld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpslld, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3843.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Pslld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3841.
    return v4;
}

// Generated as internal constructor for term x64_psllq.
pub fn constructor_x64_psllq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3851.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3849.
    return v4;
}

// Generated as internal constructor for term x64_psrlw.
pub fn constructor_x64_psrlw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3859.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3857.
    return v4;
}

// Generated as internal constructor for term x64_psrld.
pub fn constructor_x64_psrld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrld, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3867.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3865.
    return v4;
}

// Generated as internal constructor for term x64_psrlq.
pub fn constructor_x64_psrlq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3875.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3873.
    return v4;
}

// Generated as internal constructor for term x64_psraw.
pub fn constructor_x64_psraw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsraw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3883.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psraw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3881.
    return v4;
}

// Generated as internal constructor for term x64_psrad.
pub fn constructor_x64_psrad<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrad, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3891.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrad, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3889.
    return v4;
}

// Generated as internal constructor for term x64_vpsraq.
pub fn constructor_x64_vpsraq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpsraq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3897.
    return v3;
}

// Generated as internal constructor for term x64_vpsraq_imm.
pub fn constructor_x64_vpsraq_imm<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v3 = constructor_xmm_unary_rm_r_imm_evex(ctx, &Avx512Opcode::VpsraqImm, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3902.
    return v3;
}

// Generated as internal constructor for term x64_pextrb.
pub fn constructor_x64_pextrb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3909.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3907.
    return v3;
}

// Generated as internal constructor for term x64_pextrb_store.
pub fn constructor_x64_pextrb_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3916.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrb, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3914.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrw.
pub fn constructor_x64_pextrw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3924.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3922.
    return v3;
}

// Generated as internal constructor for term x64_pextrw_store.
pub fn constructor_x64_pextrw_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3931.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrw, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3929.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrd.
pub fn constructor_x64_pextrd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3939.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3937.
    return v3;
}

// Generated as internal constructor for term x64_pextrd_store.
pub fn constructor_x64_pextrd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3946.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrd, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3944.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrq.
pub fn constructor_x64_pextrq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3954.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3952.
    return v3;
}

// Generated as internal constructor for term x64_pextrq_store.
pub fn constructor_x64_pextrq_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3961.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrq, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3959.
    return v4.clone();
}

// Generated as internal constructor for term x64_pmovmskb.
pub fn constructor_x64_pmovmskb<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vpmovmskb, arg1, arg0);
        // Rule at src/isa/x64/inst.isle line 3969.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Pmovmskb, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 3967.
    return v3;
}

// Generated as internal constructor for term x64_movmskps.
pub fn constructor_x64_movmskps<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskps, arg1, arg0);
        // Rule at src/isa/x64/inst.isle line 3977.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskps, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 3975.
    return v3;
}

// Generated as internal constructor for term x64_movmskpd.
pub fn constructor_x64_movmskpd<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskpd, arg1, arg0);
        // Rule at src/isa/x64/inst.isle line 3985.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskpd, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 3983.
    return v3;
}

// Generated as internal constructor for term x64_not.
pub fn constructor_x64_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Not {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3991.
    return v6;
}

// Generated as internal constructor for term x64_neg.
pub fn constructor_x64_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3999.
    return v6;
}

// Generated as internal constructor for term x64_neg_paired.
pub fn constructor_x64_neg_paired<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src/isa/x64/inst.isle line 4007.
    return v6;
}

// Generated as internal constructor for term x64_lea.
pub fn constructor_x64_lea<C: Context>(ctx: &mut C, arg0: Type, arg1: &SyntheticAmode) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::LoadEffectiveAddress {
        addr: arg1.clone(),
        dst: v2,
        size: v3.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4014.
    return v6;
}

// Generated as internal constructor for term x64_ud2.
pub fn constructor_x64_ud2<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Ud2 {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 4021.
    return v2;
}

// Generated as internal constructor for term x64_hlt.
pub fn constructor_x64_hlt<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Hlt };
    // Rule at src/isa/x64/inst.isle line 4026.
    return v1;
}

// Generated as internal constructor for term x64_lzcnt.
pub fn constructor_x64_lzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Lzcnt, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4031.
    return v4;
}

// Generated as internal constructor for term x64_tzcnt.
pub fn constructor_x64_tzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Tzcnt, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4036.
    return v4;
}

// Generated as internal constructor for term x64_bsr.
pub fn constructor_x64_bsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsr,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 4041.
    return v8;
}

// Generated as internal constructor for term bsr_or_else.
pub fn constructor_bsr_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsr(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 4050.
    return v11;
}

// Generated as internal constructor for term x64_bsf.
pub fn constructor_x64_bsf<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsf,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 4061.
    return v8;
}

// Generated as internal constructor for term bsf_or_else.
pub fn constructor_bsf_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsf(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 4070.
    return v11;
}

// Generated as internal constructor for term x64_blsi.
pub fn constructor_x64_blsi<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsi, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4081.
    return v4;
}

// Generated as internal constructor for term x64_blsmsk.
pub fn constructor_x64_blsmsk<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsmsk, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4086.
    return v4;
}

// Generated as internal constructor for term x64_blsr.
pub fn constructor_x64_blsr<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsr, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4091.
    return v4;
}

// Generated as internal constructor for term x64_popcnt.
pub fn constructor_x64_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Popcnt, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4096.
    return v4;
}

// Generated as internal constructor for term x64_minss.
pub fn constructor_x64_minss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4103.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4101.
    return v3;
}

// Generated as internal constructor for term x64_minsd.
pub fn constructor_x64_minsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4111.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4109.
    return v3;
}

// Generated as internal constructor for term x64_minps.
pub fn constructor_x64_minps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4119.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4117.
    return v4;
}

// Generated as internal constructor for term x64_minpd.
pub fn constructor_x64_minpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4127.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4125.
    return v4;
}

// Generated as internal constructor for term x64_maxss.
pub fn constructor_x64_maxss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4135.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4133.
    return v3;
}

// Generated as internal constructor for term x64_maxsd.
pub fn constructor_x64_maxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4143.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4141.
    return v3;
}

// Generated as internal constructor for term x64_maxps.
pub fn constructor_x64_maxps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4151.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4149.
    return v4;
}

// Generated as internal constructor for term x64_maxpd.
pub fn constructor_x64_maxpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4159.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4157.
    return v4;
}

// Generated as internal constructor for term x64_vfmadd213.
pub fn constructor_x64_vfmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4165.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4166.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4167.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4168.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmadd213", "src/isa/x64/inst.isle line 4164"
    )
}

// Generated as internal constructor for term x64_vfmadd132.
pub fn constructor_x64_vfmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4172.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4173.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4174.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4175.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmadd132", "src/isa/x64/inst.isle line 4171"
    )
}

// Generated as internal constructor for term x64_vfnmadd213.
pub fn constructor_x64_vfnmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4179.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4180.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4181.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4182.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmadd213", "src/isa/x64/inst.isle line 4178"
    )
}

// Generated as internal constructor for term x64_vfnmadd132.
pub fn constructor_x64_vfnmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4186.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4187.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4188.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4189.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmadd132", "src/isa/x64/inst.isle line 4185"
    )
}

// Generated as internal constructor for term x64_sqrtss.
pub fn constructor_x64_sqrtss<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtss, arg0);
        // Rule at src/isa/x64/inst.isle line 4194.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Sqrtss, arg0);
    // Rule at src/isa/x64/inst.isle line 4193.
    return v2;
}

// Generated as internal constructor for term x64_sqrtsd.
pub fn constructor_x64_sqrtsd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtsd, arg0);
        // Rule at src/isa/x64/inst.isle line 4201.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Sqrtsd, arg0);
    // Rule at src/isa/x64/inst.isle line 4200.
    return v2;
}

// Generated as internal constructor for term x64_sqrtps.
pub fn constructor_x64_sqrtps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtps, arg0);
        // Rule at src/isa/x64/inst.isle line 4208.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtps, v2);
    // Rule at src/isa/x64/inst.isle line 4207.
    return v3;
}

// Generated as internal constructor for term x64_sqrtpd.
pub fn constructor_x64_sqrtpd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtpd, arg0);
        // Rule at src/isa/x64/inst.isle line 4215.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtpd, v2);
    // Rule at src/isa/x64/inst.isle line 4214.
    return v3;
}

// Generated as internal constructor for term x64_cvtss2sd.
pub fn constructor_x64_cvtss2sd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtss2sd, arg0);
        // Rule at src/isa/x64/inst.isle line 4222.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Cvtss2sd, arg0);
    // Rule at src/isa/x64/inst.isle line 4221.
    return v2;
}

// Generated as internal constructor for term x64_cvtsd2ss.
pub fn constructor_x64_cvtsd2ss<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtsd2ss, arg0);
        // Rule at src/isa/x64/inst.isle line 4229.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Cvtsd2ss, arg0);
    // Rule at src/isa/x64/inst.isle line 4228.
    return v2;
}

// Generated as internal constructor for term x64_cvtdq2ps.
pub fn constructor_x64_cvtdq2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2ps, arg0);
        // Rule at src/isa/x64/inst.isle line 4236.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2ps, v2);
    // Rule at src/isa/x64/inst.isle line 4235.
    return v3;
}

// Generated as internal constructor for term x64_cvtps2pd.
pub fn constructor_x64_cvtps2pd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtps2pd, arg0);
        // Rule at src/isa/x64/inst.isle line 4243.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtps2pd, v2);
    // Rule at src/isa/x64/inst.isle line 4242.
    return v3;
}

// Generated as internal constructor for term x64_cvtpd2ps.
pub fn constructor_x64_cvtpd2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtpd2ps, arg0);
        // Rule at src/isa/x64/inst.isle line 4250.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtpd2ps, v2);
    // Rule at src/isa/x64/inst.isle line 4249.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2pd.
pub fn constructor_x64_cvtdq2pd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2pd, arg0);
        // Rule at src/isa/x64/inst.isle line 4257.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2pd, v2);
    // Rule at src/isa/x64/inst.isle line 4256.
    return v3;
}

// Generated as internal constructor for term x64_cvtsi2ss.
pub fn constructor_x64_cvtsi2ss<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v3 = &C::raw_operand_size_of_type(ctx, arg0);
        let v7 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vcvtsi2ss, arg1, v3);
        // Rule at src/isa/x64/inst.isle line 4265.
        return v7;
    }
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = constructor_gpr_to_xmm(ctx, &SseOpcode::Cvtsi2ss, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4263.
    return v4;
}

// Generated as internal constructor for term x64_cvtsi2sd.
pub fn constructor_x64_cvtsi2sd<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v3 = &C::raw_operand_size_of_type(ctx, arg0);
        let v7 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vcvtsi2sd, arg1, v3);
        // Rule at src/isa/x64/inst.isle line 4273.
        return v7;
    }
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = constructor_gpr_to_xmm(ctx, &SseOpcode::Cvtsi2sd, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4271.
    return v4;
}

// Generated as internal constructor for term x64_cvttps2dq.
pub fn constructor_x64_cvttps2dq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttps2dq, arg0);
        // Rule at src/isa/x64/inst.isle line 4281.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttps2dq, v2);
    // Rule at src/isa/x64/inst.isle line 4279.
    return v3;
}

// Generated as internal constructor for term x64_cvttpd2dq.
pub fn constructor_x64_cvttpd2dq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttpd2dq, arg0);
        // Rule at src/isa/x64/inst.isle line 4289.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttpd2dq, v2);
    // Rule at src/isa/x64/inst.isle line 4287.
    return v3;
}

// Generated as internal constructor for term x64_pcmpeq.
pub fn constructor_x64_pcmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpeqb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4295.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpeqw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4296.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4297.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse41(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpeqq(ctx, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 4298.
                return v7;
            }
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            let v8 = &C::xmm_to_xmm_mem(ctx, v5);
            let v10 = constructor_x64_pshufd(ctx, v8, 0xB1);
            let v11 = &C::xmm_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_pand(ctx, v5, v11);
            // Rule at src/isa/x64/inst.isle line 4307.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpeq", "src/isa/x64/inst.isle line 4294"
    )
}

// Generated as internal constructor for term x64_pcmpeqb.
pub fn constructor_x64_pcmpeqb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4314.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4313.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqw.
pub fn constructor_x64_pcmpeqw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4319.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4318.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqd.
pub fn constructor_x64_pcmpeqd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4324.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4323.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqq.
pub fn constructor_x64_pcmpeqq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4329.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4328.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgt.
pub fn constructor_x64_pcmpgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpgtb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4335.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpgtw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4336.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpgtd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4337.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse42(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpgtq(ctx, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 4341.
                return v7;
            }
            let v9 = C::emit_u128_le_const(ctx, 0x800000000000000080000000);
            let v10 = &constructor_const_to_xmm_mem(ctx, v9);
            let v11 = constructor_x64_movdqu_load(ctx, v10);
            let v12 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v13 = constructor_x64_pxor(ctx, v11, v12);
            let v14 = constructor_x64_pxor(ctx, v11, arg2);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_pcmpgtd(ctx, v13, v15);
            let v17 = &C::xmm_to_xmm_mem(ctx, v16);
            let v19 = constructor_x64_pshufd(ctx, v17, 0xA0);
            let v20 = &C::xmm_to_xmm_mem(ctx, v16);
            let v22 = constructor_x64_pshufd(ctx, v20, 0xF5);
            let v23 = &C::xmm_to_xmm_mem(ctx, v14);
            let v24 = constructor_x64_pcmpeqd(ctx, v13, v23);
            let v25 = &C::xmm_to_xmm_mem(ctx, v24);
            let v26 = constructor_x64_pshufd(ctx, v25, 0xF5);
            let v27 = &C::xmm_to_xmm_mem(ctx, v26);
            let v28 = constructor_x64_pand(ctx, v19, v27);
            let v29 = &C::xmm_to_xmm_mem(ctx, v22);
            let v30 = constructor_x64_por(ctx, v28, v29);
            // Rule at src/isa/x64/inst.isle line 4370.
            return v30;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpgt", "src/isa/x64/inst.isle line 4334"
    )
}

// Generated as internal constructor for term x64_pcmpgtb.
pub fn constructor_x64_pcmpgtb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4386.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4385.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtw.
pub fn constructor_x64_pcmpgtw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4391.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4390.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtd.
pub fn constructor_x64_pcmpgtd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4396.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4395.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtq.
pub fn constructor_x64_pcmpgtq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4401.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4400.
    return v4;
}

// Generated as internal constructor for term alu_rm.
pub fn constructor_alu_rm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: &Amode,
    arg3: Gpr,
) -> SideEffectNoResult {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::amode_to_synthetic_amode(ctx, arg2);
    let v6 = MInst::AluRM {
        size: v4.clone(),
        op: arg1.clone(),
        src1_dst: v5.clone(),
        src2: arg3,
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    // Rule at src/isa/x64/inst.isle line 4407.
    return v7;
}

// Generated as internal constructor for term x64_add_mem.
pub fn constructor_x64_add_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4412.
    return v4.clone();
}

// Generated as internal constructor for term x64_sub_mem.
pub fn constructor_x64_sub_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4416.
    return v4.clone();
}

// Generated as internal constructor for term x64_and_mem.
pub fn constructor_x64_and_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4420.
    return v4.clone();
}

// Generated as internal constructor for term x64_or_mem.
pub fn constructor_x64_or_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4424.
    return v4.clone();
}

// Generated as internal constructor for term x64_xor_mem.
pub fn constructor_x64_xor_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4428.
    return v4.clone();
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: &TrapCode) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cc: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 4433.
    return v3;
}

// Generated as internal constructor for term trap_if_and.
pub fn constructor_trap_if_and<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfAnd {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 4438.
    return v4;
}

// Generated as internal constructor for term trap_if_or.
pub fn constructor_trap_if_or<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfOr {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 4443.
    return v4;
}

// Generated as internal constructor for term trap_if_icmp.
pub fn constructor_trap_if_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/x64/inst.isle line 4447.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_icmp", "src/isa/x64/inst.isle line 4446"
    )
}

// Generated as internal constructor for term trap_if_fcmp.
pub fn constructor_trap_if_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v4 = &constructor_trap_if(ctx, v2, arg1);
            let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
            // Rule at src/isa/x64/inst.isle line 4451.
            return v5.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v6,
            cc1: ref v7,
            cc2: ref v8,
        } => {
            let v9 = &constructor_trap_if_and(ctx, v7, v8, arg1);
            let v10 = &constructor_with_flags_side_effect(ctx, v6, v9);
            // Rule at src/isa/x64/inst.isle line 4453.
            return v10.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v11,
            cc1: ref v12,
            cc2: ref v13,
        } => {
            let v14 = &constructor_trap_if_or(ctx, v12, v13, arg1);
            let v15 = &constructor_with_flags_side_effect(ctx, v11, v14);
            // Rule at src/isa/x64/inst.isle line 4455.
            return v15.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_fcmp", "src/isa/x64/inst.isle line 4450"
    )
}

// Generated as internal constructor for term x64_movddup.
pub fn constructor_x64_movddup<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovddup, arg0);
        // Rule at src/isa/x64/inst.isle line 4462.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movddup, arg0);
    // Rule at src/isa/x64/inst.isle line 4460.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastb.
pub fn constructor_x64_vpbroadcastb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastb, arg0);
    // Rule at src/isa/x64/inst.isle line 4468.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastw.
pub fn constructor_x64_vpbroadcastw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastw, arg0);
    // Rule at src/isa/x64/inst.isle line 4473.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastd.
pub fn constructor_x64_vpbroadcastd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastd, arg0);
    // Rule at src/isa/x64/inst.isle line 4478.
    return v2;
}

// Generated as internal constructor for term x64_vbroadcastss.
pub fn constructor_x64_vbroadcastss<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vbroadcastss, arg0);
    // Rule at src/isa/x64/inst.isle line 4483.
    return v2;
}

// Generated as internal constructor for term jmp_known.
pub fn constructor_jmp_known<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::JmpKnown { dst: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 4490.
    return v2;
}

// Generated as internal constructor for term jmp_if.
pub fn constructor_jmp_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: MachLabel) -> ConsumesFlags {
    let v2 = MInst::JmpIf {
        cc: arg0.clone(),
        taken: arg1,
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 4494.
    return v3;
}

// Generated as internal constructor for term jmp_cond.
pub fn constructor_jmp_cond<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: MachLabel,
    arg2: MachLabel,
) -> ConsumesFlags {
    let v3 = MInst::JmpCond {
        cc: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 4499.
    return v4;
}

// Generated as internal constructor for term jmp_cond_icmp.
pub fn constructor_jmp_cond_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src/isa/x64/inst.isle line 4504.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_icmp", "src/isa/x64/inst.isle line 4503"
    )
}

// Generated as internal constructor for term jmp_cond_fcmp.
pub fn constructor_jmp_cond_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
            let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
            // Rule at src/isa/x64/inst.isle line 4509.
            return v6.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v7,
            cc1: ref v8,
            cc2: ref v9,
        } => {
            let v10 = &C::cc_invert(ctx, v8);
            let v11 = &constructor_jmp_if(ctx, v10, arg2);
            let v12 = &C::cc_invert(ctx, v9);
            let v13 = &constructor_jmp_cond(ctx, v12, arg2, arg1);
            let v14 = &constructor_consumes_flags_concat(ctx, v11, v13);
            let v15 = &constructor_with_flags_side_effect(ctx, v7, v14);
            // Rule at src/isa/x64/inst.isle line 4511.
            return v15.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v16,
            cc1: ref v17,
            cc2: ref v18,
        } => {
            let v19 = &constructor_jmp_if(ctx, v17, arg1);
            let v20 = &constructor_jmp_cond(ctx, v18, arg1, arg2);
            let v21 = &constructor_consumes_flags_concat(ctx, v19, v20);
            let v22 = &constructor_with_flags_side_effect(ctx, v16, v21);
            // Rule at src/isa/x64/inst.isle line 4516.
            return v22.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_fcmp", "src/isa/x64/inst.isle line 4508"
    )
}

// Generated as internal constructor for term jmp_table_seq.
pub fn constructor_jmp_table_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> SideEffectNoResult {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = C::writable_gpr_to_reg(ctx, v5);
    let v9 = MInst::JmpTableSeq {
        idx: v6,
        tmp1: v7,
        tmp2: v8,
        default_target: arg2,
        targets: arg3.clone(),
    };
    let v10 = SideEffectNoResult::Inst { inst: v9 };
    // Rule at src/isa/x64/inst.isle line 4536.
    return v10;
}

// Generated as internal constructor for term icmp_cond_result.
pub fn constructor_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &CC,
) -> IcmpCondResult {
    let v2 = IcmpCondResult::Condition {
        producer: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/x64/inst.isle line 4555.
    return v2;
}

// Generated as internal constructor for term invert_icmp_cond_result.
pub fn constructor_invert_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
) -> IcmpCondResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cc_invert(ctx, v2);
        let v4 = &constructor_icmp_cond_result(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 4558.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_icmp_cond_result", "src/isa/x64/inst.isle line 4557"
    )
}

// Generated as internal constructor for term lower_icmp_bool.
pub fn constructor_lower_icmp_bool<C: Context>(ctx: &mut C, arg0: &IcmpCondResult) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &constructor_x64_setcc(ctx, v2);
        let v4 = constructor_with_flags(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 4563.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_bool", "src/isa/x64/inst.isle line 4562"
    )
}

// Generated as internal constructor for term select_icmp.
pub fn constructor_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: Value,
    arg2: Value,
) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = C::value_type(ctx, arg1);
        let v5 = &C::type_register_class(ctx, v4);
        if let Some(v6) = v5 {
            if let &RegisterClass::Gpr {
                single_register: v7,
            } = v6
            {
                if v7 == true {
                    let v9 = constructor_put_in_gpr(ctx, arg1);
                    let v10 = &C::gpr_to_gpr_mem(ctx, v9);
                    let v11 = constructor_put_in_gpr(ctx, arg2);
                    let v12 = &constructor_cmove(ctx, v4, v2, v10, v11);
                    let v13 = constructor_with_flags(ctx, v1, v12);
                    // Rule at src/isa/x64/inst.isle line 4572.
                    return v13;
                }
            }
        }
        let v14 = &constructor_cmove_from_values(ctx, v4, v2, arg1, arg2);
        let v15 = constructor_with_flags(ctx, v1, v14);
        // Rule at src/isa/x64/inst.isle line 4576.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_icmp", "src/isa/x64/inst.isle line 4567"
    )
}

// Generated as internal constructor for term emit_cmp.
pub fn constructor_emit_cmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IcmpCondResult {
    let v2 = C::value_type(ctx, arg1);
    if v2 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v44 = C::put_in_regs(ctx, arg1);
                let v46 = constructor_value_regs_get_gpr(ctx, v44, 0x0);
                let v47 = C::put_in_regs(ctx, arg1);
                let v49 = constructor_value_regs_get_gpr(ctx, v47, 0x1);
                let v50 = C::put_in_regs(ctx, arg2);
                let v51 = constructor_value_regs_get_gpr(ctx, v50, 0x0);
                let v52 = C::put_in_regs(ctx, arg2);
                let v53 = constructor_value_regs_get_gpr(ctx, v52, 0x1);
                let v55 = &C::gpr_to_gpr_mem_imm(ctx, v51);
                let v56 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v55, v46);
                let v58 = &constructor_x64_setcc(ctx, &CC::Z);
                let v59 = constructor_with_flags_reg(ctx, v56, v58);
                let v60 = &C::gpr_to_gpr_mem_imm(ctx, v53);
                let v61 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v60, v49);
                let v62 = &constructor_x64_setcc(ctx, &CC::Z);
                let v63 = constructor_with_flags_reg(ctx, v61, v62);
                let v65 = C::gpr_new(ctx, v59);
                let v66 = &constructor_reg_to_gpr_mem_imm(ctx, v63);
                let v67 = constructor_x64_and(ctx, I64, v65, v66);
                let v68 = C::gpr_to_reg(ctx, v67);
                let v70 = RegMemImm::Imm { simm32: 0x1 };
                let v71 = &C::gpr_mem_imm_new(ctx, &v70);
                let v72 = C::gpr_new(ctx, v68);
                let v73 = &constructor_x64_test(ctx, &OperandSize::Size64, v71, v72);
                let v75 = &constructor_icmp_cond_result(ctx, v73, &CC::NZ);
                // Rule at src/isa/x64/inst.isle line 4608.
                return v75.clone();
            }
            &IntCC::NotEqual => {
                let v44 = C::put_in_regs(ctx, arg1);
                let v46 = constructor_value_regs_get_gpr(ctx, v44, 0x0);
                let v47 = C::put_in_regs(ctx, arg1);
                let v49 = constructor_value_regs_get_gpr(ctx, v47, 0x1);
                let v50 = C::put_in_regs(ctx, arg2);
                let v51 = constructor_value_regs_get_gpr(ctx, v50, 0x0);
                let v52 = C::put_in_regs(ctx, arg2);
                let v53 = constructor_value_regs_get_gpr(ctx, v52, 0x1);
                let v55 = &C::gpr_to_gpr_mem_imm(ctx, v51);
                let v56 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v55, v46);
                let v76 = &constructor_x64_setcc(ctx, &CC::NZ);
                let v77 = constructor_with_flags_reg(ctx, v56, v76);
                let v60 = &C::gpr_to_gpr_mem_imm(ctx, v53);
                let v61 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v60, v49);
                let v78 = &constructor_x64_setcc(ctx, &CC::NZ);
                let v79 = constructor_with_flags_reg(ctx, v61, v78);
                let v80 = C::gpr_new(ctx, v77);
                let v81 = &constructor_reg_to_gpr_mem_imm(ctx, v79);
                let v82 = constructor_x64_or(ctx, I64, v80, v81);
                let v83 = C::gpr_to_reg(ctx, v82);
                let v70 = RegMemImm::Imm { simm32: 0x1 };
                let v71 = &C::gpr_mem_imm_new(ctx, &v70);
                let v84 = C::gpr_new(ctx, v83);
                let v85 = &constructor_x64_test(ctx, &OperandSize::Size64, v71, v84);
                let v86 = &constructor_icmp_cond_result(ctx, v85, &CC::NZ);
                // Rule at src/isa/x64/inst.isle line 4629.
                return v86.clone();
            }
            _ => {}
        }
        let v44 = C::put_in_regs(ctx, arg1);
        let v46 = constructor_value_regs_get_gpr(ctx, v44, 0x0);
        let v47 = C::put_in_regs(ctx, arg1);
        let v49 = constructor_value_regs_get_gpr(ctx, v47, 0x1);
        let v50 = C::put_in_regs(ctx, arg2);
        let v51 = constructor_value_regs_get_gpr(ctx, v50, 0x0);
        let v52 = C::put_in_regs(ctx, arg2);
        let v53 = constructor_value_regs_get_gpr(ctx, v52, 0x1);
        let v87 = &C::gpr_to_gpr_mem_imm(ctx, v53);
        let v88 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v87, v49);
        let v89 = &C::intcc_without_eq(ctx, arg0);
        let v90 = &C::intcc_to_cc(ctx, v89);
        let v91 = &constructor_x64_setcc(ctx, v90);
        let v92 = &constructor_x64_setcc(ctx, &CC::Z);
        let v93 = &constructor_consumes_flags_concat(ctx, v91, v92);
        let v94 = constructor_with_flags(ctx, v88, v93);
        let v95 = C::value_regs_get(ctx, v94, 0x0);
        let v96 = C::value_regs_get(ctx, v94, 0x1);
        let v97 = &C::gpr_to_gpr_mem_imm(ctx, v51);
        let v98 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v97, v46);
        let v99 = &C::intcc_unsigned(ctx, arg0);
        let v100 = &C::intcc_to_cc(ctx, v99);
        let v101 = &constructor_x64_setcc(ctx, v100);
        let v102 = constructor_with_flags_reg(ctx, v98, v101);
        let v103 = C::gpr_new(ctx, v96);
        let v104 = &constructor_reg_to_gpr_mem_imm(ctx, v102);
        let v105 = constructor_x64_and(ctx, I64, v103, v104);
        let v106 = C::gpr_to_reg(ctx, v105);
        let v107 = C::gpr_new(ctx, v95);
        let v108 = &constructor_reg_to_gpr_mem_imm(ctx, v106);
        let v109 = constructor_x64_or(ctx, I64, v107, v108);
        let v110 = C::gpr_to_reg(ctx, v109);
        let v70 = RegMemImm::Imm { simm32: 0x1 };
        let v111 = &C::gpr_mem_imm_new(ctx, &v70);
        let v112 = C::gpr_new(ctx, v110);
        let v113 = &constructor_x64_test(ctx, &OperandSize::Size64, v111, v112);
        let v114 = &constructor_icmp_cond_result(ctx, v113, &CC::NZ);
        // Rule at src/isa/x64/inst.isle line 4644.
        return v114.clone();
    }
    let v29 = C::def_inst(ctx, arg1);
    if let Some(v30) = v29 {
        let v31 = &C::inst_data(ctx, v30);
        if let &InstructionData::UnaryImm {
            opcode: ref v32,
            imm: v33,
        } = v31
        {
            if let &Opcode::Iconst = v32 {
                let v34 = C::u64_from_imm64(ctx, v33);
                if v34 == 0x0 {
                    let v35 = C::value_type(ctx, arg2);
                    let v36 = &C::raw_operand_size_of_type(ctx, v35);
                    let v37 = C::put_in_reg(ctx, arg2);
                    let v38 = C::gpr_new(ctx, v37);
                    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
                    let v40 = &constructor_x64_test(ctx, v36, v39, v38);
                    let v41 = &C::intcc_swap_args(ctx, arg0);
                    let v42 = &C::intcc_to_cc(ctx, v41);
                    let v43 = &constructor_icmp_cond_result(ctx, v40, v42);
                    // Rule at src/isa/x64/inst.isle line 4601.
                    return v43.clone();
                }
            }
        }
    }
    let v17 = C::def_inst(ctx, arg2);
    if let Some(v18) = v17 {
        let v19 = &C::inst_data(ctx, v18);
        if let &InstructionData::UnaryImm {
            opcode: ref v20,
            imm: v21,
        } = v19
        {
            if let &Opcode::Iconst = v20 {
                let v22 = C::u64_from_imm64(ctx, v21);
                if v22 == 0x0 {
                    let v4 = &C::raw_operand_size_of_type(ctx, v2);
                    let v23 = C::put_in_reg(ctx, arg1);
                    let v24 = C::gpr_new(ctx, v23);
                    let v25 = &C::gpr_to_gpr_mem_imm(ctx, v24);
                    let v26 = &constructor_x64_test(ctx, v4, v25, v24);
                    let v27 = &C::intcc_to_cc(ctx, arg0);
                    let v28 = &constructor_icmp_cond_result(ctx, v26, v27);
                    // Rule at src/isa/x64/inst.isle line 4596.
                    return v28.clone();
                }
            }
        }
    }
    let v10 = &C::simm32_from_value(ctx, arg1);
    if let Some(v11) = v10 {
        let v4 = &C::raw_operand_size_of_type(ctx, v2);
        let v12 = constructor_put_in_gpr(ctx, arg2);
        let v13 = &constructor_x64_cmp(ctx, v4, v11, v12);
        let v14 = &C::intcc_swap_args(ctx, arg0);
        let v15 = &C::intcc_to_cc(ctx, v14);
        let v16 = &constructor_icmp_cond_result(ctx, v13, v15);
        // Rule at src/isa/x64/inst.isle line 4591.
        return v16.clone();
    }
    let v4 = &C::raw_operand_size_of_type(ctx, v2);
    let v5 = &constructor_put_in_gpr_mem_imm(ctx, arg2);
    let v6 = constructor_put_in_gpr(ctx, arg1);
    let v7 = &constructor_x64_cmp(ctx, v4, v5, v6);
    let v8 = &C::intcc_to_cc(ctx, arg0);
    let v9 = &constructor_icmp_cond_result(ctx, v7, v8);
    // Rule at src/isa/x64/inst.isle line 4584.
    return v9.clone();
}

// Generated as internal constructor for term lower_fcmp_bool.
pub fn constructor_lower_fcmp_bool<C: Context>(ctx: &mut C, arg0: &FcmpCondResult) -> ValueRegs {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v3 = &constructor_x64_setcc(ctx, v2);
            let v4 = constructor_with_flags(ctx, v1, v3);
            // Rule at src/isa/x64/inst.isle line 4679.
            return v4;
        }
        &FcmpCondResult::AndCondition {
            producer: ref v5,
            cc1: ref v6,
            cc2: ref v7,
        } => {
            let v8 = &constructor_x64_setcc(ctx, v6);
            let v9 = &constructor_x64_setcc(ctx, v7);
            let v10 = &constructor_consumes_flags_concat(ctx, v8, v9);
            let v11 = constructor_with_flags(ctx, v5, v10);
            let v13 = constructor_value_regs_get_gpr(ctx, v11, 0x0);
            let v15 = constructor_value_regs_get_gpr(ctx, v11, 0x1);
            let v17 = &C::gpr_to_gpr_mem_imm(ctx, v15);
            let v18 = constructor_x64_and(ctx, I8, v13, v17);
            let v19 = C::gpr_to_reg(ctx, v18);
            let v20 = C::value_reg(ctx, v19);
            // Rule at src/isa/x64/inst.isle line 4682.
            return v20;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v21,
            cc1: ref v22,
            cc2: ref v23,
        } => {
            let v24 = &constructor_x64_setcc(ctx, v22);
            let v25 = &constructor_x64_setcc(ctx, v23);
            let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
            let v27 = constructor_with_flags(ctx, v21, v26);
            let v28 = constructor_value_regs_get_gpr(ctx, v27, 0x0);
            let v29 = constructor_value_regs_get_gpr(ctx, v27, 0x1);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
            let v31 = constructor_x64_or(ctx, I8, v28, v30);
            let v32 = C::gpr_to_reg(ctx, v31);
            let v33 = C::value_reg(ctx, v32);
            // Rule at src/isa/x64/inst.isle line 4691.
            return v33;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcmp_bool", "src/isa/x64/inst.isle line 4677"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> FcmpCondResult {
    match arg0 {
        &FloatCC::Equal => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v9 = FcmpCondResult::AndCondition {
                    producer: v6.clone(),
                    cc1: CC::NP,
                    cc2: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 4718.
                return v9;
            }
        }
        &FloatCC::GreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v18 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 4734.
                return v18;
            }
        }
        &FloatCC::GreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v20 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 4736.
                return v20;
            }
        }
        &FloatCC::LessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v26 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 4746.
                return v26;
            }
        }
        &FloatCC::LessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v27 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 4749.
                return v27;
            }
        }
        &FloatCC::NotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v12 = FcmpCondResult::OrCondition {
                    producer: v6.clone(),
                    cc1: CC::P,
                    cc2: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 4721.
                return v12;
            }
        }
        &FloatCC::Ordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v13 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NP,
                };
                // Rule at src/isa/x64/inst.isle line 4726.
                return v13;
            }
        }
        &FloatCC::OrderedNotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v15 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 4730.
                return v15;
            }
        }
        &FloatCC::Unordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v14 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::P,
                };
                // Rule at src/isa/x64/inst.isle line 4728.
                return v14;
            }
        }
        &FloatCC::UnorderedOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v16 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 4732.
                return v16;
            }
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v28 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 4752.
                return v28;
            }
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v29 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 4755.
                return v29;
            }
        }
        &FloatCC::UnorderedOrLessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v22 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 4738.
                return v22;
            }
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v24 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 4740.
                return v24;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/x64/inst.isle line 4716"
    )
}

// Generated as internal constructor for term x64_mfence.
pub fn constructor_x64_mfence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = MInst::Fence {
        kind: FenceKind::MFence,
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 4768.
    return v2;
}

// Generated as internal constructor for term x64_cmpxchg.
pub fn constructor_x64_cmpxchg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
    arg3: &SyntheticAmode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::gpr_to_reg(ctx, arg2);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = MInst::LockCmpxchg {
        ty: arg0,
        replacement: v5,
        expected: v6,
        mem: arg3.clone(),
        dst_old: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 4772.
    return v10;
}

// Generated as internal constructor for term x64_atomic_rmw_seq.
pub fn constructor_x64_atomic_rmw_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MachAtomicRmwOp,
    arg2: &SyntheticAmode,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg3);
    let v7 = C::writable_gpr_to_reg(ctx, v5);
    let v8 = C::writable_gpr_to_reg(ctx, v4);
    let v9 = MInst::AtomicRmwSeq {
        ty: arg0,
        op: arg1.clone(),
        mem: arg2.clone(),
        operand: v6,
        temp: v7,
        dst_old: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 4778.
    return v11;
}

// Generated as internal constructor for term bitcast_xmm_to_gpr.
pub fn constructor_bitcast_xmm_to_gpr<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Gpr {
    match arg0 {
        F32 => {
            let v2 = constructor_x64_movd_to_gpr(ctx, arg1);
            // Rule at src/isa/x64/inst.isle line 4793.
            return v2;
        }
        F64 => {
            let v3 = constructor_x64_movq_to_gpr(ctx, arg1);
            // Rule at src/isa/x64/inst.isle line 4795.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_xmm_to_gpr", "src/isa/x64/inst.isle line 4792"
    )
}

// Generated as internal constructor for term bitcast_gpr_to_xmm.
pub fn constructor_bitcast_gpr_to_xmm<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Xmm {
    match arg0 {
        I32 => {
            let v2 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v3 = constructor_x64_movd_to_xmm(ctx, v2);
            // Rule at src/isa/x64/inst.isle line 4799.
            return v3;
        }
        I64 => {
            let v2 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v4 = constructor_x64_movq_to_xmm(ctx, v2);
            // Rule at src/isa/x64/inst.isle line 4801.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_gpr_to_xmm", "src/isa/x64/inst.isle line 4798"
    )
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::writable_gpr_to_reg(ctx, v2);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4807.
    return v6;
}

// Generated as internal constructor for term x64_checked_srem_seq.
pub fn constructor_x64_checked_srem_seq<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: Gpr,
    arg3: Gpr,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CheckedSRemSeq {
        size: arg0.clone(),
        dividend_lo: arg1,
        dividend_hi: arg2,
        divisor: arg3,
        dst_quotient: v4,
        dst_remainder: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
    let v10 = C::value_regs(ctx, v8, v9);
    // Rule at src/isa/x64/inst.isle line 4816.
    return v10;
}

// Generated as internal constructor for term x64_checked_srem_seq8.
pub fn constructor_x64_checked_srem_seq8<C: Context>(ctx: &mut C, arg0: Gpr, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CheckedSRemSeq8 {
        dividend: arg0,
        divisor: arg1,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4823.
    return v5;
}

// Generated as internal constructor for term x64_div8.
pub fn constructor_x64_div8<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
    arg2: &DivSignedness,
    arg3: &TrapCode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = MInst::Div8 {
        sign: arg2.clone(),
        trap: arg3.clone(),
        divisor: arg1.clone(),
        dividend: arg0,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 4830.
    return v7;
}

// Generated as internal constructor for term x64_div.
pub fn constructor_x64_div<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_gpr(ctx);
    let v8 = MInst::Div {
        size: arg3.clone(),
        sign: arg4.clone(),
        trap: arg5.clone(),
        divisor: arg2.clone(),
        dividend_lo: arg0,
        dividend_hi: arg1,
        dst_quotient: v6,
        dst_remainder: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = constructor_writable_gpr_to_r_reg(ctx, v6);
    let v11 = constructor_writable_gpr_to_r_reg(ctx, v7);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src/isa/x64/inst.isle line 4840.
    return v12;
}

// Generated as internal constructor for term x64_div_quotient.
pub fn constructor_x64_div_quotient<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x0);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src/isa/x64/inst.isle line 4848.
    return v9;
}

// Generated as internal constructor for term x64_div_remainder.
pub fn constructor_x64_div_remainder<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x1);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src/isa/x64/inst.isle line 4853.
    return v9;
}

// Generated as internal constructor for term x64_sign_extend_data.
pub fn constructor_x64_sign_extend_data<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &OperandSize,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::SignExtendData {
        size: arg1.clone(),
        src: arg0,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4858.
    return v5;
}

// Generated as internal constructor for term read_pinned_gpr.
pub fn constructor_read_pinned_gpr<C: Context>(ctx: &mut C) -> Gpr {
    let v0 = C::preg_pinned(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4866.
    return v2;
}

// Generated as internal constructor for term write_pinned_gpr.
pub fn constructor_write_pinned_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/x64/inst.isle line 4870.
    return v2.clone();
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4912.
    return v4;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4919.
    return v4;
}

// Generated as internal constructor for term coff_tls_get_addr.
pub fn constructor_coff_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CoffTlsGetAddr {
        symbol: arg0,
        dst: v1,
        tmp: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4926.
    return v5;
}

// Generated as internal constructor for term reg_to_xmm_mem.
pub fn constructor_reg_to_xmm_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5013.
    return v2.clone();
}

// Generated as internal constructor for term xmm_to_reg_mem.
pub fn constructor_xmm_to_reg_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = C::xmm_to_reg(ctx, v1);
    let v3 = RegMem::Reg { reg: v2 };
    let v4 = &C::reg_mem_to_xmm_mem(ctx, &v3);
    // Rule at src/isa/x64/inst.isle line 5016.
    return v4.clone();
}

// Generated as internal constructor for term writable_gpr_to_r_reg.
pub fn constructor_writable_gpr_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableGpr) -> Reg {
    let v1 = C::writable_gpr_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5020.
    return v2;
}

// Generated as internal constructor for term writable_gpr_to_gpr_mem.
pub fn constructor_writable_gpr_to_gpr_mem<C: Context>(ctx: &mut C, arg0: WritableGpr) -> GprMem {
    let v1 = C::writable_gpr_to_gpr(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5023.
    return v2.clone();
}

// Generated as internal constructor for term writable_gpr_to_value_regs.
pub fn constructor_writable_gpr_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> ValueRegs {
    let v1 = constructor_writable_gpr_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5026.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_r_reg.
pub fn constructor_writable_xmm_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableXmm) -> Reg {
    let v1 = C::writable_xmm_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5029.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_xmm_mem.
pub fn constructor_writable_xmm_to_xmm_mem<C: Context>(ctx: &mut C, arg0: WritableXmm) -> XmmMem {
    let v1 = C::writable_xmm_to_xmm(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5032.
    return v2.clone();
}

// Generated as internal constructor for term writable_xmm_to_value_regs.
pub fn constructor_writable_xmm_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> ValueRegs {
    let v1 = constructor_writable_xmm_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5035.
    return v2;
}

// Generated as internal constructor for term synthetic_amode_to_gpr_mem.
pub fn constructor_synthetic_amode_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> GprMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5042.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_gpr_mem.
pub fn constructor_amode_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> GprMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5040.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem.
pub fn constructor_amode_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> XmmMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5045.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem.
pub fn constructor_synthetic_amode_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5048.
    return v2.clone();
}

// Generated as internal constructor for term const_to_xmm_mem.
pub fn constructor_const_to_xmm_mem<C: Context>(ctx: &mut C, arg0: VCodeConstant) -> XmmMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5053.
    return v2.clone();
}

// Generated as internal constructor for term const_to_reg_mem.
pub fn constructor_const_to_reg_mem<C: Context>(ctx: &mut C, arg0: VCodeConstant) -> RegMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = RegMem::Mem { addr: v1.clone() };
    // Rule at src/isa/x64/inst.isle line 5055.
    return v2;
}

// Generated as internal constructor for term xmm_to_xmm_mem_aligned.
pub fn constructor_xmm_to_xmm_mem_aligned<C: Context>(ctx: &mut C, arg0: Xmm) -> XmmMemAligned {
    let v1 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5058.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem_aligned.
pub fn constructor_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> XmmMemAligned {
    let v1 = &constructor_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5060.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem_aligned.
pub fn constructor_synthetic_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMemAligned {
    let v1 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5062.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm_mem_aligned.
pub fn constructor_put_in_xmm_mem_aligned<C: Context>(ctx: &mut C, arg0: Value) -> XmmMemAligned {
    let v1 = &C::put_in_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5064.
    return v2.clone();
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg {
        src: arg1,
        dst: arg0,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 5067.
    return v3;
}

// Generated as internal constructor for term x64_rbp.
pub fn constructor_x64_rbp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rbp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 5080.
    return v1;
}

// Generated as internal constructor for term x64_rsp.
pub fn constructor_x64_rsp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rsp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 5084.
    return v1;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v6 = &C::inst_data(ctx, arg0);
    match v6 {
        &InstructionData::AtomicCas {
            opcode: ref v1714,
            args: ref v1715,
            flags: v1716,
        } => {
            if let &Opcode::AtomicCas = v1714 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1689 = C::ty_int(ctx, v3);
                        if let Some(v1690) = v1689 {
                            let v1717 = C::unpack_value_array_3(ctx, v1715);
                            let v1721 = constructor_put_in_gpr(ctx, v1717.1);
                            let v1722 = constructor_put_in_gpr(ctx, v1717.2);
                            let v1723 = C::zero_offset(ctx);
                            let v1724 = &constructor_to_amode(ctx, v1716, v1717.0, v1723);
                            let v1725 = &C::amode_to_synthetic_amode(ctx, v1724);
                            let v1726 = constructor_x64_cmpxchg(ctx, v5, v1721, v1722, v1725);
                            let v1727 = constructor_output_gpr(ctx, v1726);
                            // Rule at src/isa/x64/lower.isle line 3187.
                            return Some(v1727);
                        }
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1728,
            args: ref v1729,
            flags: v1730,
            op: ref v1731,
        } => {
            if let &Opcode::AtomicRmw = v1728 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1689 = C::ty_int(ctx, v3);
                        if let Some(v1690) = v1689 {
                            let v1735 = &C::atomic_rmw_op_to_mach_atomic_rmw_op(ctx, v1731);
                            let v1691 = C::zero_offset(ctx);
                            let v1732 = C::unpack_value_array_2(ctx, v1729);
                            let v1736 = &constructor_to_amode(ctx, v1730, v1732.0, v1691);
                            let v1737 = &C::amode_to_synthetic_amode(ctx, v1736);
                            let v1738 = constructor_put_in_gpr(ctx, v1732.1);
                            let v1739 =
                                constructor_x64_atomic_rmw_seq(ctx, v5, v1735, v1737, v1738);
                            let v1740 = constructor_output_gpr(ctx, v1739);
                            // Rule at src/isa/x64/lower.isle line 3203.
                            return Some(v1740);
                        }
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v36,
            args: ref v37,
        } => {
            match v36 {
                &Opcode::Swizzle => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v1243 = constructor_put_in_xmm(ctx, v38.1);
                    let v2320 = C::emit_u128_le_const(ctx, 0x70707070707070707070707070707070);
                    let v2321 = &constructor_const_to_xmm_mem(ctx, v2320);
                    let v2322 = constructor_x64_paddusb(ctx, v1243, v2321);
                    let v337 = constructor_put_in_xmm(ctx, v38.0);
                    let v2323 = C::xmm_to_reg(ctx, v2322);
                    let v2324 = &constructor_xmm_to_reg_mem(ctx, v2323);
                    let v2325 = &C::xmm_mem_to_reg_mem(ctx, v2324);
                    let v2326 = constructor_lower_pshufb(ctx, v337, v2325);
                    let v2327 = constructor_output_xmm(ctx, v2326);
                    // Rule at src/isa/x64/lower.isle line 4296.
                    return Some(v2327);
                }
                &Opcode::X86Pshufb => {
                    let v518 = C::use_ssse3(ctx);
                    if v518 == true {
                        let v38 = C::unpack_value_array_2(ctx, v37);
                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                        let v2328 = constructor_x64_pshufb(ctx, v68, v69);
                        let v2329 = constructor_output_xmm(ctx, v2328);
                        // Rule at src/isa/x64/lower.isle line 4302.
                        return Some(v2329);
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v734 = C::ty_vec128(ctx, v3);
                        if let Some(v735) = v734 {
                            let v738 = constructor_has_pmins(ctx, v735);
                            if v738 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v739 = constructor_x64_pmins(ctx, v735, v68, v69);
                                let v740 = constructor_output_xmm(ctx, v739);
                                // Rule at src/isa/x64/lower.isle line 1664.
                                return Some(v740);
                            }
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v437 = constructor_put_in_xmm(ctx, v38.1);
                            let v310 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v741 = constructor_x64_pcmpgt(ctx, v735, v437, v310);
                            let v312 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v742 = constructor_x64_pand(ctx, v741, v312);
                            let v442 = &C::xmm_to_xmm_mem(ctx, v437);
                            let v743 = constructor_x64_pandn(ctx, v741, v442);
                            let v744 = &C::xmm_to_xmm_mem(ctx, v743);
                            let v745 = constructor_x64_por(ctx, v742, v744);
                            let v746 = constructor_output_xmm(ctx, v745);
                            // Rule at src/isa/x64/lower.isle line 1668.
                            return Some(v746);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v729 = constructor_cmp_and_choose(ctx, v5, &CC::L, v38.0, v38.1);
                            let v730 = C::output(ctx, v729);
                            // Rule at src/isa/x64/lower.isle line 1614.
                            return Some(v730);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v734 = C::ty_vec128(ctx, v3);
                        if let Some(v735) = v734 {
                            let v768 = constructor_has_pminu(ctx, v735);
                            if v768 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v769 = constructor_x64_pminu(ctx, v735, v68, v69);
                                let v770 = constructor_output_xmm(ctx, v769);
                                // Rule at src/isa/x64/lower.isle line 1716.
                                return Some(v770);
                            }
                        }
                        if v3 == I16X8 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v150 = constructor_x64_psubusw(ctx, v68, v69);
                            let v771 = &C::xmm_to_xmm_mem(ctx, v150);
                            let v772 = constructor_x64_psubw(ctx, v68, v771);
                            let v773 = constructor_output_xmm(ctx, v772);
                            // Rule at src/isa/x64/lower.isle line 1722.
                            return Some(v773);
                        }
                        if let Some(v735) = v734 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v437 = constructor_put_in_xmm(ctx, v38.1);
                            let v754 = constructor_flip_high_bit_mask(ctx, v735);
                            let v755 = &C::xmm_to_xmm_mem(ctx, v754);
                            let v756 = constructor_x64_pxor(ctx, v68, v755);
                            let v757 = &C::xmm_to_xmm_mem(ctx, v754);
                            let v758 = constructor_x64_pxor(ctx, v437, v757);
                            let v774 = &C::xmm_to_xmm_mem(ctx, v756);
                            let v775 = constructor_x64_pcmpgt(ctx, v735, v758, v774);
                            let v761 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v776 = constructor_x64_pand(ctx, v775, v761);
                            let v763 = &C::xmm_to_xmm_mem(ctx, v437);
                            let v777 = constructor_x64_pandn(ctx, v775, v763);
                            let v778 = &C::xmm_to_xmm_mem(ctx, v777);
                            let v779 = constructor_x64_por(ctx, v776, v778);
                            let v780 = constructor_output_xmm(ctx, v779);
                            // Rule at src/isa/x64/lower.isle line 1727.
                            return Some(v780);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v723 = constructor_cmp_and_choose(ctx, v5, &CC::B, v38.0, v38.1);
                            let v724 = C::output(ctx, v723);
                            // Rule at src/isa/x64/lower.isle line 1608.
                            return Some(v724);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v734 = C::ty_vec128(ctx, v3);
                        if let Some(v735) = v734 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v437 = constructor_put_in_xmm(ctx, v38.1);
                            let v736 = constructor_lower_vec_smax(ctx, v735, v68, v437);
                            let v737 = constructor_output_xmm(ctx, v736);
                            // Rule at src/isa/x64/lower.isle line 1644.
                            return Some(v737);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v732 = constructor_cmp_and_choose(ctx, v5, &CC::NL, v38.0, v38.1);
                            let v733 = C::output(ctx, v732);
                            // Rule at src/isa/x64/lower.isle line 1617.
                            return Some(v733);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v734 = C::ty_vec128(ctx, v3);
                        if let Some(v735) = v734 {
                            let v747 = constructor_has_pmaxu(ctx, v735);
                            if v747 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v748 = constructor_x64_pmaxu(ctx, v735, v68, v69);
                                let v749 = constructor_output_xmm(ctx, v748);
                                // Rule at src/isa/x64/lower.isle line 1680.
                                return Some(v749);
                            }
                        }
                        if v3 == I16X8 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v437 = constructor_put_in_xmm(ctx, v38.1);
                            let v310 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v750 = constructor_x64_psubusw(ctx, v437, v310);
                            let v751 = &C::xmm_to_xmm_mem(ctx, v750);
                            let v752 = constructor_x64_paddw(ctx, v68, v751);
                            let v753 = constructor_output_xmm(ctx, v752);
                            // Rule at src/isa/x64/lower.isle line 1686.
                            return Some(v753);
                        }
                        if let Some(v735) = v734 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v437 = constructor_put_in_xmm(ctx, v38.1);
                            let v754 = constructor_flip_high_bit_mask(ctx, v735);
                            let v755 = &C::xmm_to_xmm_mem(ctx, v754);
                            let v756 = constructor_x64_pxor(ctx, v68, v755);
                            let v757 = &C::xmm_to_xmm_mem(ctx, v754);
                            let v758 = constructor_x64_pxor(ctx, v437, v757);
                            let v759 = &C::xmm_to_xmm_mem(ctx, v758);
                            let v760 = constructor_x64_pcmpgt(ctx, v735, v756, v759);
                            let v761 = &C::xmm_to_xmm_mem(ctx, v68);
                            let v762 = constructor_x64_pand(ctx, v760, v761);
                            let v763 = &C::xmm_to_xmm_mem(ctx, v437);
                            let v764 = constructor_x64_pandn(ctx, v760, v763);
                            let v765 = &C::xmm_to_xmm_mem(ctx, v764);
                            let v766 = constructor_x64_por(ctx, v762, v765);
                            let v767 = constructor_output_xmm(ctx, v766);
                            // Rule at src/isa/x64/lower.isle line 1693.
                            return Some(v767);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v726 = constructor_cmp_and_choose(ctx, v5, &CC::NB, v38.0, v38.1);
                            let v727 = C::output(ctx, v726);
                            // Rule at src/isa/x64/lower.isle line 1611.
                            return Some(v727);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v408 = constructor_x64_pavgb(ctx, v68, v69);
                                        let v409 = constructor_output_xmm(ctx, v408);
                                        // Rule at src/isa/x64/lower.isle line 933.
                                        return Some(v409);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v410 = constructor_x64_pavgw(ctx, v68, v69);
                                        let v411 = constructor_output_xmm(ctx, v410);
                                        // Rule at src/isa/x64/lower.isle line 937.
                                        return Some(v411);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v126 = constructor_x64_paddusb(ctx, v68, v69);
                                        let v127 = constructor_output_xmm(ctx, v126);
                                        // Rule at src/isa/x64/lower.isle line 194.
                                        return Some(v127);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v128 = constructor_x64_paddusw(ctx, v68, v69);
                                        let v129 = constructor_output_xmm(ctx, v128);
                                        // Rule at src/isa/x64/lower.isle line 198.
                                        return Some(v129);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v122 = constructor_x64_paddsb(ctx, v68, v69);
                                        let v123 = constructor_output_xmm(ctx, v122);
                                        // Rule at src/isa/x64/lower.isle line 184.
                                        return Some(v123);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v124 = constructor_x64_paddsw(ctx, v68, v69);
                                        let v125 = constructor_output_xmm(ctx, v124);
                                        // Rule at src/isa/x64/lower.isle line 188.
                                        return Some(v125);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v148 = constructor_x64_psubusb(ctx, v68, v69);
                                        let v149 = constructor_output_xmm(ctx, v148);
                                        // Rule at src/isa/x64/lower.isle line 255.
                                        return Some(v149);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v150 = constructor_x64_psubusw(ctx, v68, v69);
                                        let v151 = constructor_output_xmm(ctx, v150);
                                        // Rule at src/isa/x64/lower.isle line 259.
                                        return Some(v151);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v144 = constructor_x64_psubsb(ctx, v68, v69);
                                        let v145 = constructor_output_xmm(ctx, v144);
                                        // Rule at src/isa/x64/lower.isle line 245.
                                        return Some(v145);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v146 = constructor_x64_psubsw(ctx, v68, v69);
                                        let v147 = constructor_output_xmm(ctx, v146);
                                        // Rule at src/isa/x64/lower.isle line 249.
                                        return Some(v147);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v80 = constructor_value_regs_get_gpr(ctx, v78, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v78, 0x1);
                            let v83 = C::put_in_regs(ctx, v38.1);
                            let v84 = constructor_value_regs_get_gpr(ctx, v83, 0x0);
                            let v85 = constructor_value_regs_get_gpr(ctx, v83, 0x1);
                            let v86 = &C::gpr_to_gpr_mem_imm(ctx, v84);
                            let v87 = &constructor_x64_add_with_flags_paired(ctx, I64, v80, v86);
                            let v88 = &C::gpr_to_gpr_mem_imm(ctx, v85);
                            let v89 = &constructor_x64_adc_paired(ctx, I64, v82, v88);
                            let v90 = constructor_with_flags(ctx, v87, v89);
                            let v91 = C::output(ctx, v90);
                            // Rule at src/isa/x64/lower.isle line 88.
                            return Some(v91);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v70 = constructor_x64_paddb(ctx, v68, v69);
                                        let v71 = constructor_output_xmm(ctx, v70);
                                        // Rule at src/isa/x64/lower.isle line 71.
                                        return Some(v71);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v72 = constructor_x64_paddw(ctx, v68, v69);
                                        let v73 = constructor_output_xmm(ctx, v72);
                                        // Rule at src/isa/x64/lower.isle line 75.
                                        return Some(v73);
                                    }
                                }
                                0x20 => {
                                    if v65.1 == 0x4 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v74 = constructor_x64_paddd(ctx, v68, v69);
                                        let v75 = constructor_output_xmm(ctx, v74);
                                        // Rule at src/isa/x64/lower.isle line 79.
                                        return Some(v75);
                                    }
                                }
                                0x40 => {
                                    if v65.1 == 0x2 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v76 = constructor_x64_paddq(ctx, v68, v69);
                                        let v77 = constructor_output_xmm(ctx, v76);
                                        // Rule at src/isa/x64/lower.isle line 83.
                                        return Some(v77);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v61 = &constructor_sink_load_to_gpr_mem_imm(ctx, v59);
                                let v62 = constructor_x64_add(ctx, v5, v60, v61);
                                let v63 = constructor_output_gpr(ctx, v62);
                                // Rule at src/isa/x64/lower.isle line 65.
                                return Some(v63);
                            }
                            let v53 = &C::sinkable_load(ctx, v38.1);
                            if let Some(v54) = v53 {
                                let v41 = constructor_put_in_gpr(ctx, v38.0);
                                let v55 = &constructor_sink_load_to_gpr_mem_imm(ctx, v54);
                                let v56 = constructor_x64_add(ctx, v5, v41, v55);
                                let v57 = constructor_output_gpr(ctx, v56);
                                // Rule at src/isa/x64/lower.isle line 62.
                                return Some(v57);
                            }
                        }
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v48 = C::zero_offset(ctx);
                            let v47 = C::mem_flags_trusted(ctx);
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v49 = &constructor_to_amode_add(ctx, v47, v38.0, v38.1, v48);
                            let v50 = &C::amode_to_synthetic_amode(ctx, v49);
                            let v51 = constructor_x64_lea(ctx, v46, v50);
                            let v52 = constructor_output_gpr(ctx, v51);
                            // Rule at src/isa/x64/lower.isle line 56.
                            return Some(v52);
                        }
                        let v34 = C::fits_in_16(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v43 = constructor_x64_add(ctx, v35, v41, v42);
                            let v44 = constructor_output_gpr(ctx, v43);
                            // Rule at src/isa/x64/lower.isle line 45.
                            return Some(v44);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v80 = constructor_value_regs_get_gpr(ctx, v78, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v78, 0x1);
                            let v83 = C::put_in_regs(ctx, v38.1);
                            let v84 = constructor_value_regs_get_gpr(ctx, v83, 0x0);
                            let v85 = constructor_value_regs_get_gpr(ctx, v83, 0x1);
                            let v86 = &C::gpr_to_gpr_mem_imm(ctx, v84);
                            let v140 = &constructor_x64_sub_with_flags_paired(ctx, I64, v80, v86);
                            let v88 = &C::gpr_to_gpr_mem_imm(ctx, v85);
                            let v141 = &constructor_x64_sbb_paired(ctx, I64, v82, v88);
                            let v142 = constructor_with_flags(ctx, v140, v141);
                            let v143 = C::output(ctx, v142);
                            // Rule at src/isa/x64/lower.isle line 230.
                            return Some(v143);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x8 => {
                                    if v65.1 == 0x10 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v132 = constructor_x64_psubb(ctx, v68, v69);
                                        let v133 = constructor_output_xmm(ctx, v132);
                                        // Rule at src/isa/x64/lower.isle line 213.
                                        return Some(v133);
                                    }
                                }
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v134 = constructor_x64_psubw(ctx, v68, v69);
                                        let v135 = constructor_output_xmm(ctx, v134);
                                        // Rule at src/isa/x64/lower.isle line 217.
                                        return Some(v135);
                                    }
                                }
                                0x20 => {
                                    if v65.1 == 0x4 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v136 = constructor_x64_psubd(ctx, v68, v69);
                                        let v137 = constructor_output_xmm(ctx, v136);
                                        // Rule at src/isa/x64/lower.isle line 221.
                                        return Some(v137);
                                    }
                                }
                                0x40 => {
                                    if v65.1 == 0x2 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v138 = constructor_x64_psubq(ctx, v68, v69);
                                        let v139 = constructor_output_xmm(ctx, v138);
                                        // Rule at src/isa/x64/lower.isle line 225.
                                        return Some(v139);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v130 = constructor_x64_sub(ctx, v5, v41, v42);
                            let v131 = constructor_output_gpr(ctx, v130);
                            // Rule at src/isa/x64/lower.isle line 207.
                            return Some(v131);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            if v65.0 == 0x40 {
                                if v65.1 == 0x2 {
                                    let v326 = C::use_avx512vl(ctx);
                                    if v326 == true {
                                        let v454 = C::use_avx512dq(ctx);
                                        if v454 == true {
                                            let v38 = C::unpack_value_array_2(ctx, v37);
                                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                            let v455 = constructor_x64_vpmullq(ctx, v68, v69);
                                            let v456 = constructor_output_xmm(ctx, v455);
                                            // Rule at src/isa/x64/lower.isle line 1024.
                                            return Some(v456);
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v80 = constructor_value_regs_get_gpr(ctx, v78, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v78, 0x1);
                            let v83 = C::put_in_regs(ctx, v38.1);
                            let v84 = constructor_value_regs_get_gpr(ctx, v83, 0x0);
                            let v85 = constructor_value_regs_get_gpr(ctx, v83, 0x1);
                            let v418 = &C::gpr_to_gpr_mem_imm(ctx, v85);
                            let v419 = constructor_x64_mul(ctx, I64, v80, v418);
                            let v420 = &C::gpr_to_gpr_mem_imm(ctx, v84);
                            let v421 = constructor_x64_mul(ctx, I64, v82, v420);
                            let v422 = &C::gpr_to_gpr_mem_imm(ctx, v421);
                            let v423 = constructor_x64_add(ctx, I64, v419, v422);
                            let v424 = &C::gpr_to_gpr_mem(ctx, v84);
                            let v425 = constructor_mulhi_u(ctx, I64, v80, v424);
                            let v426 = constructor_value_regs_get_gpr(ctx, v425, 0x0);
                            let v427 = constructor_value_regs_get_gpr(ctx, v425, 0x1);
                            let v428 = &C::gpr_to_gpr_mem_imm(ctx, v427);
                            let v429 = constructor_x64_add(ctx, I64, v423, v428);
                            let v430 = constructor_value_gprs(ctx, v426, v429);
                            let v431 = C::output(ctx, v430);
                            // Rule at src/isa/x64/lower.isle line 974.
                            return Some(v431);
                        }
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x10 => {
                                    if v65.1 == 0x8 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v432 = constructor_x64_pmullw(ctx, v68, v69);
                                        let v433 = constructor_output_xmm(ctx, v432);
                                        // Rule at src/isa/x64/lower.isle line 1001.
                                        return Some(v433);
                                    }
                                }
                                0x20 => {
                                    if v65.1 == 0x4 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v171 = C::def_inst(ctx, v38.1);
                                        if let Some(v172) = v171 {
                                            let v173 = &C::inst_data(ctx, v172);
                                            if let &InstructionData::Unary {
                                                opcode: ref v174,
                                                arg: v175,
                                            } = v173
                                            {
                                                match v174 {
                                                    &Opcode::SwidenLow => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::SwidenLow = v183 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    let v475 =
                                                                        C::multi_lane(ctx, v474);
                                                                    if let Some(v476) = v475 {
                                                                        if v476.0 == 0x10 {
                                                                            if v476.1 == 0x8 {
                                                                                let v479 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v480 =
                                                                                    C::multi_lane(
                                                                                        ctx, v479,
                                                                                    );
                                                                                if let Some(v481) =
                                                                                    v480
                                                                                {
                                                                                    if v481.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v481.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                                            let v484 = constructor_put_in_xmm(ctx, v175);
                                                                                            let v485 = &C::xmm_to_xmm_mem(ctx, v484);
                                                                                            let v486 = constructor_x64_pmullw(ctx, v185, v485);
                                                                                            let v487 = &C::xmm_to_xmm_mem(ctx, v484);
                                                                                            let v488 = constructor_x64_pmulhw(ctx, v185, v487);
                                                                                            let v489 = &C::xmm_to_xmm_mem(ctx, v488);
                                                                                            let v500 = constructor_x64_punpcklwd(ctx, v486, v489);
                                                                                            let v501 = constructor_output_xmm(ctx, v500);
                                                                                            // Rule at src/isa/x64/lower.isle line 1094.
                                                                                            return Some(v501);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::SwidenHigh = v183 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    let v475 =
                                                                        C::multi_lane(ctx, v474);
                                                                    if let Some(v476) = v475 {
                                                                        if v476.0 == 0x10 {
                                                                            if v476.1 == 0x8 {
                                                                                let v479 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v480 =
                                                                                    C::multi_lane(
                                                                                        ctx, v479,
                                                                                    );
                                                                                if let Some(v481) =
                                                                                    v480
                                                                                {
                                                                                    if v481.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v481.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                                            let v484 = constructor_put_in_xmm(ctx, v175);
                                                                                            let v485 = &C::xmm_to_xmm_mem(ctx, v484);
                                                                                            let v486 = constructor_x64_pmullw(ctx, v185, v485);
                                                                                            let v487 = &C::xmm_to_xmm_mem(ctx, v484);
                                                                                            let v488 = constructor_x64_pmulhw(ctx, v185, v487);
                                                                                            let v489 = &C::xmm_to_xmm_mem(ctx, v488);
                                                                                            let v490 = constructor_x64_punpckhwd(ctx, v486, v489);
                                                                                            let v491 = constructor_output_xmm(ctx, v490);
                                                                                            // Rule at src/isa/x64/lower.isle line 1071.
                                                                                            return Some(v491);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::UwidenLow = v183 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    let v475 =
                                                                        C::multi_lane(ctx, v474);
                                                                    if let Some(v476) = v475 {
                                                                        if v476.0 == 0x10 {
                                                                            if v476.1 == 0x8 {
                                                                                let v479 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v480 =
                                                                                    C::multi_lane(
                                                                                        ctx, v479,
                                                                                    );
                                                                                if let Some(v481) =
                                                                                    v480
                                                                                {
                                                                                    if v481.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v481.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                                            let v484 = constructor_put_in_xmm(ctx, v175);
                                                                                            let v485 = &C::xmm_to_xmm_mem(ctx, v484);
                                                                                            let v486 = constructor_x64_pmullw(ctx, v185, v485);
                                                                                            let v487 = &C::xmm_to_xmm_mem(ctx, v484);
                                                                                            let v508 = constructor_x64_pmulhuw(ctx, v185, v487);
                                                                                            let v509 = &C::xmm_to_xmm_mem(ctx, v508);
                                                                                            let v514 = constructor_x64_punpcklwd(ctx, v486, v509);
                                                                                            let v515 = constructor_output_xmm(ctx, v514);
                                                                                            // Rule at src/isa/x64/lower.isle line 1139.
                                                                                            return Some(v515);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::UwidenHigh = v183 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    let v475 =
                                                                        C::multi_lane(ctx, v474);
                                                                    if let Some(v476) = v475 {
                                                                        if v476.0 == 0x10 {
                                                                            if v476.1 == 0x8 {
                                                                                let v479 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v480 =
                                                                                    C::multi_lane(
                                                                                        ctx, v479,
                                                                                    );
                                                                                if let Some(v481) =
                                                                                    v480
                                                                                {
                                                                                    if v481.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v481.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                                            let v484 = constructor_put_in_xmm(ctx, v175);
                                                                                            let v485 = &C::xmm_to_xmm_mem(ctx, v484);
                                                                                            let v486 = constructor_x64_pmullw(ctx, v185, v485);
                                                                                            let v487 = &C::xmm_to_xmm_mem(ctx, v484);
                                                                                            let v508 = constructor_x64_pmulhuw(ctx, v185, v487);
                                                                                            let v509 = &C::xmm_to_xmm_mem(ctx, v508);
                                                                                            let v510 = constructor_x64_punpckhwd(ctx, v486, v509);
                                                                                            let v511 = constructor_output_xmm(ctx, v510);
                                                                                            // Rule at src/isa/x64/lower.isle line 1117.
                                                                                            return Some(v511);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v434 = C::use_sse41(ctx);
                                        if v434 == true {
                                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                            let v435 = constructor_x64_pmulld(ctx, v68, v69);
                                            let v436 = constructor_output_xmm(ctx, v435);
                                            // Rule at src/isa/x64/lower.isle line 1004.
                                            return Some(v436);
                                        }
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v437 = constructor_put_in_xmm(ctx, v38.1);
                                        let v310 = &C::xmm_to_xmm_mem(ctx, v68);
                                        let v439 = constructor_x64_pshufd(ctx, v310, 0x31);
                                        let v440 = &C::xmm_to_xmm_mem(ctx, v437);
                                        let v441 = constructor_x64_pshufd(ctx, v440, 0x31);
                                        let v442 = &C::xmm_to_xmm_mem(ctx, v437);
                                        let v443 = constructor_x64_pmuludq(ctx, v68, v442);
                                        let v444 = &C::xmm_to_xmm_mem(ctx, v443);
                                        let v446 = constructor_x64_pshufd(ctx, v444, 0x8);
                                        let v447 = &C::xmm_to_xmm_mem(ctx, v441);
                                        let v448 = constructor_x64_pmuludq(ctx, v439, v447);
                                        let v449 = &C::xmm_to_xmm_mem(ctx, v448);
                                        let v450 = constructor_x64_pshufd(ctx, v449, 0x8);
                                        let v451 = &C::xmm_to_xmm_mem(ctx, v450);
                                        let v452 = constructor_x64_punpckldq(ctx, v446, v451);
                                        let v453 = constructor_output_xmm(ctx, v452);
                                        // Rule at src/isa/x64/lower.isle line 1011.
                                        return Some(v453);
                                    }
                                }
                                0x40 => {
                                    if v65.1 == 0x2 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v171 = C::def_inst(ctx, v38.1);
                                        if let Some(v172) = v171 {
                                            let v173 = &C::inst_data(ctx, v172);
                                            if let &InstructionData::Unary {
                                                opcode: ref v174,
                                                arg: v175,
                                            } = v173
                                            {
                                                match v174 {
                                                    &Opcode::SwidenLow => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::SwidenLow = v183 {
                                                                    let v434 = C::use_sse41(ctx);
                                                                    if v434 == true {
                                                                        let v474 = C::value_type(
                                                                            ctx, v184,
                                                                        );
                                                                        let v475 = C::multi_lane(
                                                                            ctx, v474,
                                                                        );
                                                                        if let Some(v476) = v475 {
                                                                            if v476.0 == 0x20 {
                                                                                if v476.1 == 0x4 {
                                                                                    let v479 = C::value_type(ctx, v175);
                                                                                    let v480 = C::multi_lane(ctx, v479);
                                                                                    if let Some(
                                                                                        v481,
                                                                                    ) = v480
                                                                                    {
                                                                                        if v481.0
                                                                                            == 0x20
                                                                                        {
                                                                                            if v481.1 == 0x4 {
                                                                                                let v492 = &C::put_in_xmm_mem(ctx, v184);
                                                                                                let v503 = constructor_x64_pshufd(ctx, v492, 0x50);
                                                                                                let v495 = &C::put_in_xmm_mem(ctx, v175);
                                                                                                let v504 = constructor_x64_pshufd(ctx, v495, 0x50);
                                                                                                let v505 = &C::xmm_to_xmm_mem(ctx, v504);
                                                                                                let v506 = constructor_x64_pmuldq(ctx, v503, v505);
                                                                                                let v507 = constructor_output_xmm(ctx, v506);
                                                                                                // Rule at src/isa/x64/lower.isle line 1106.
                                                                                                return Some(v507);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::SwidenHigh = v183 {
                                                                    let v434 = C::use_sse41(ctx);
                                                                    if v434 == true {
                                                                        let v474 = C::value_type(
                                                                            ctx, v184,
                                                                        );
                                                                        let v475 = C::multi_lane(
                                                                            ctx, v474,
                                                                        );
                                                                        if let Some(v476) = v475 {
                                                                            if v476.0 == 0x20 {
                                                                                if v476.1 == 0x4 {
                                                                                    let v479 = C::value_type(ctx, v175);
                                                                                    let v480 = C::multi_lane(ctx, v479);
                                                                                    if let Some(
                                                                                        v481,
                                                                                    ) = v480
                                                                                    {
                                                                                        if v481.0
                                                                                            == 0x20
                                                                                        {
                                                                                            if v481.1 == 0x4 {
                                                                                                let v492 = &C::put_in_xmm_mem(ctx, v184);
                                                                                                let v494 = constructor_x64_pshufd(ctx, v492, 0xFA);
                                                                                                let v495 = &C::put_in_xmm_mem(ctx, v175);
                                                                                                let v496 = constructor_x64_pshufd(ctx, v495, 0xFA);
                                                                                                let v497 = &C::xmm_to_xmm_mem(ctx, v496);
                                                                                                let v498 = constructor_x64_pmuldq(ctx, v494, v497);
                                                                                                let v499 = constructor_output_xmm(ctx, v498);
                                                                                                // Rule at src/isa/x64/lower.isle line 1083.
                                                                                                return Some(v499);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::UwidenLow = v183 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    let v475 =
                                                                        C::multi_lane(ctx, v474);
                                                                    if let Some(v476) = v475 {
                                                                        if v476.0 == 0x20 {
                                                                            if v476.1 == 0x4 {
                                                                                let v479 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v480 =
                                                                                    C::multi_lane(
                                                                                        ctx, v479,
                                                                                    );
                                                                                if let Some(v481) =
                                                                                    v480
                                                                                {
                                                                                    if v481.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v481.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v492 = &C::put_in_xmm_mem(ctx, v184);
                                                                                            let v503 = constructor_x64_pshufd(ctx, v492, 0x50);
                                                                                            let v495 = &C::put_in_xmm_mem(ctx, v175);
                                                                                            let v504 = constructor_x64_pshufd(ctx, v495, 0x50);
                                                                                            let v505 = &C::xmm_to_xmm_mem(ctx, v504);
                                                                                            let v516 = constructor_x64_pmuludq(ctx, v503, v505);
                                                                                            let v517 = constructor_output_xmm(ctx, v516);
                                                                                            // Rule at src/isa/x64/lower.isle line 1151.
                                                                                            return Some(v517);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v180 = C::def_inst(ctx, v38.0);
                                                        if let Some(v181) = v180 {
                                                            let v182 = &C::inst_data(ctx, v181);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v183,
                                                                arg: v184,
                                                            } = v182
                                                            {
                                                                if let &Opcode::UwidenHigh = v183 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    let v475 =
                                                                        C::multi_lane(ctx, v474);
                                                                    if let Some(v476) = v475 {
                                                                        if v476.0 == 0x20 {
                                                                            if v476.1 == 0x4 {
                                                                                let v479 =
                                                                                    C::value_type(
                                                                                        ctx, v175,
                                                                                    );
                                                                                let v480 =
                                                                                    C::multi_lane(
                                                                                        ctx, v479,
                                                                                    );
                                                                                if let Some(v481) =
                                                                                    v480
                                                                                {
                                                                                    if v481.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v481.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v492 = &C::put_in_xmm_mem(ctx, v184);
                                                                                            let v494 = constructor_x64_pshufd(ctx, v492, 0xFA);
                                                                                            let v495 = &C::put_in_xmm_mem(ctx, v175);
                                                                                            let v496 = constructor_x64_pshufd(ctx, v495, 0xFA);
                                                                                            let v497 = &C::xmm_to_xmm_mem(ctx, v496);
                                                                                            let v512 = constructor_x64_pmuludq(ctx, v494, v497);
                                                                                            let v513 = constructor_output_xmm(ctx, v512);
                                                                                            // Rule at src/isa/x64/lower.isle line 1129.
                                                                                            return Some(v513);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v437 = constructor_put_in_xmm(ctx, v38.1);
                                        let v458 = &C::xmi_imm(ctx, 0x20);
                                        let v459 = constructor_x64_psrlq(ctx, v68, v458);
                                        let v440 = &C::xmm_to_xmm_mem(ctx, v437);
                                        let v460 = constructor_x64_pmuludq(ctx, v459, v440);
                                        let v461 = &C::xmi_imm(ctx, 0x20);
                                        let v462 = constructor_x64_psrlq(ctx, v437, v461);
                                        let v463 = &C::xmm_to_xmm_mem(ctx, v462);
                                        let v464 = constructor_x64_pmuludq(ctx, v68, v463);
                                        let v465 = &C::xmm_to_xmm_mem(ctx, v464);
                                        let v466 = constructor_x64_paddq(ctx, v460, v465);
                                        let v467 = &C::xmi_imm(ctx, 0x20);
                                        let v468 = constructor_x64_psllq(ctx, v466, v467);
                                        let v469 = &C::xmm_to_xmm_mem(ctx, v437);
                                        let v470 = constructor_x64_pmuludq(ctx, v68, v469);
                                        let v471 = &C::xmm_to_xmm_mem(ctx, v468);
                                        let v472 = constructor_x64_paddq(ctx, v470, v471);
                                        let v473 = constructor_output_xmm(ctx, v472);
                                        // Rule at src/isa/x64/lower.isle line 1049.
                                        return Some(v473);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v61 = &constructor_sink_load_to_gpr_mem_imm(ctx, v59);
                                let v416 = constructor_x64_mul(ctx, v5, v60, v61);
                                let v417 = constructor_output_gpr(ctx, v416);
                                // Rule at src/isa/x64/lower.isle line 955.
                                return Some(v417);
                            }
                            let v158 = &C::simm32_from_value(ctx, v38.0);
                            if let Some(v159) = v158 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v414 = constructor_x64_mul(ctx, v5, v60, v159);
                                let v415 = constructor_output_gpr(ctx, v414);
                                // Rule at src/isa/x64/lower.isle line 952.
                                return Some(v415);
                            }
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v412 = constructor_x64_mul(ctx, v5, v41, v42);
                            let v413 = constructor_output_gpr(ctx, v412);
                            // Rule at src/isa/x64/lower.isle line 946.
                            return Some(v413);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2046 = C::value_type(ctx, v38.0);
                    match v2046 {
                        I16 => {
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v109 = &constructor_put_in_gpr_mem(ctx, v38.1);
                            let v2186 = constructor_mul_hi(ctx, I16, false, v41, v109);
                            let v2187 = constructor_value_regs_get_gpr(ctx, v2186, 0x1);
                            let v2188 = constructor_output_gpr(ctx, v2187);
                            // Rule at src/isa/x64/lower.isle line 4093.
                            return Some(v2188);
                        }
                        I32 => {
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v109 = &constructor_put_in_gpr_mem(ctx, v38.1);
                            let v2189 = constructor_mul_hi(ctx, I32, false, v41, v109);
                            let v2190 = constructor_value_regs_get_gpr(ctx, v2189, 0x1);
                            let v2191 = constructor_output_gpr(ctx, v2190);
                            // Rule at src/isa/x64/lower.isle line 4098.
                            return Some(v2191);
                        }
                        I64 => {
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v109 = &constructor_put_in_gpr_mem(ctx, v38.1);
                            let v2192 = constructor_mul_hi(ctx, I64, false, v41, v109);
                            let v2193 = constructor_value_regs_get_gpr(ctx, v2192, 0x1);
                            let v2194 = constructor_output_gpr(ctx, v2193);
                            // Rule at src/isa/x64/lower.isle line 4103.
                            return Some(v2194);
                        }
                        _ => {}
                    }
                }
                &Opcode::Smulhi => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2046 = C::value_type(ctx, v38.0);
                    match v2046 {
                        I16 => {
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v109 = &constructor_put_in_gpr_mem(ctx, v38.1);
                            let v2195 = constructor_mul_hi(ctx, I16, true, v41, v109);
                            let v2196 = constructor_value_regs_get_gpr(ctx, v2195, 0x1);
                            let v2197 = constructor_output_gpr(ctx, v2196);
                            // Rule at src/isa/x64/lower.isle line 4110.
                            return Some(v2197);
                        }
                        I32 => {
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v109 = &constructor_put_in_gpr_mem(ctx, v38.1);
                            let v2198 = constructor_mul_hi(ctx, I32, true, v41, v109);
                            let v2199 = constructor_value_regs_get_gpr(ctx, v2198, 0x1);
                            let v2200 = constructor_output_gpr(ctx, v2199);
                            // Rule at src/isa/x64/lower.isle line 4115.
                            return Some(v2200);
                        }
                        I64 => {
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v109 = &constructor_put_in_gpr_mem(ctx, v38.1);
                            let v2201 = constructor_mul_hi(ctx, I64, true, v41, v109);
                            let v2202 = constructor_value_regs_get_gpr(ctx, v2201, 0x1);
                            let v2203 = constructor_output_gpr(ctx, v2202);
                            // Rule at src/isa/x64/lower.isle line 4120.
                            return Some(v2203);
                        }
                        _ => {}
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2046 = C::value_type(ctx, v38.0);
                    if v2046 == I16X8 {
                        let v518 = C::use_ssse3(ctx);
                        if v518 == true {
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v437 = constructor_put_in_xmm(ctx, v38.1);
                            let v2509 =
                                C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000);
                            let v2510 = &constructor_const_to_xmm_mem(ctx, v2509);
                            let v440 = &C::xmm_to_xmm_mem(ctx, v437);
                            let v2511 = constructor_x64_pmulhrsw(ctx, v68, v440);
                            let v2512 = constructor_x64_pcmpeqw(ctx, v2511, v2510);
                            let v2513 = &C::xmm_to_xmm_mem(ctx, v2512);
                            let v2514 = constructor_x64_pxor(ctx, v2511, v2513);
                            let v2515 = constructor_output_xmm(ctx, v2514);
                            // Rule at src/isa/x64/lower.isle line 4586.
                            return Some(v2515);
                        }
                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                        let v437 = constructor_put_in_xmm(ctx, v38.1);
                        let v1945 = &C::xmm_to_xmm_mem(ctx, v437);
                        let v2516 = constructor_x64_pmullw(ctx, v68, v1945);
                        let v440 = &C::xmm_to_xmm_mem(ctx, v437);
                        let v2517 = constructor_x64_pmulhw(ctx, v68, v440);
                        let v2518 = &C::xmm_to_xmm_mem(ctx, v2517);
                        let v2519 = constructor_x64_punpcklwd(ctx, v2516, v2518);
                        let v2520 = &C::xmm_to_xmm_mem(ctx, v2517);
                        let v2521 = constructor_x64_punpckhwd(ctx, v2516, v2520);
                        let v2523 = C::emit_u128_le_const(ctx, 0x4000000040000000400000004000);
                        let v2524 = &constructor_const_to_xmm_mem(ctx, v2523);
                        let v2525 = constructor_x64_movdqu_load(ctx, v2524);
                        let v2526 = &C::xmm_to_xmm_mem(ctx, v2525);
                        let v2527 = constructor_x64_paddd(ctx, v2519, v2526);
                        let v2528 = &C::xmm_to_xmm_mem(ctx, v2525);
                        let v2529 = constructor_x64_paddd(ctx, v2521, v2528);
                        let v2531 = &C::xmi_imm(ctx, 0xF);
                        let v2532 = constructor_x64_psrad(ctx, v2527, v2531);
                        let v2533 = &C::xmi_imm(ctx, 0xF);
                        let v2534 = constructor_x64_psrad(ctx, v2529, v2533);
                        let v2535 = &C::xmm_to_xmm_mem(ctx, v2534);
                        let v2536 = constructor_x64_packssdw(ctx, v2532, v2535);
                        let v2537 = constructor_output_xmm(ctx, v2536);
                        // Rule at src/isa/x64/lower.isle line 4602.
                        return Some(v2537);
                    }
                }
                &Opcode::X86Pmulhrsw => {
                    let v518 = C::use_ssse3(ctx);
                    if v518 == true {
                        let v38 = C::unpack_value_array_2(ctx, v37);
                        let v2046 = C::value_type(ctx, v38.0);
                        if v2046 == I16X8 {
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v2538 = constructor_x64_pmulhrsw(ctx, v68, v69);
                            let v2539 = constructor_output_xmm(ctx, v2538);
                            // Rule at src/isa/x64/lower.isle line 4628.
                            return Some(v2539);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2046 = C::value_type(ctx, v38.0);
                    if v2046 == I8 {
                        let v2130 = constructor_extend_to_gpr(ctx, v38.0, I32, &ExtendKind::Zero);
                        let v194 = constructor_put_in_gpr(ctx, v38.1);
                        let v2131 = &C::gpr_to_gpr_mem(ctx, v194);
                        let v2134 = constructor_x64_div8(
                            ctx,
                            v2130,
                            v2131,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v2135 = constructor_output_gpr(ctx, v2134);
                        // Rule at src/isa/x64/lower.isle line 3972.
                        return Some(v2135);
                    }
                    let v2136 = C::fits_in_64(ctx, v2046);
                    if let Some(v2137) = v2136 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v15 = constructor_imm(ctx, I64, 0x0);
                        let v2138 = C::gpr_new(ctx, v15);
                        let v2139 = constructor_put_in_gpr(ctx, v38.1);
                        let v2140 = &C::gpr_to_gpr_mem(ctx, v2139);
                        let v2141 = &C::raw_operand_size_of_type(ctx, v2137);
                        let v2142 = constructor_x64_div_quotient(
                            ctx,
                            v41,
                            v2138,
                            v2140,
                            v2141,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v2143 = C::output(ctx, v2142);
                        // Rule at src/isa/x64/lower.isle line 3981.
                        return Some(v2143);
                    }
                }
                &Opcode::Sdiv => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2046 = C::value_type(ctx, v38.0);
                    if v2046 == I8 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v2145 = constructor_x64_sign_extend_data(ctx, v41, &OperandSize::Size8);
                        let v2146 = constructor_nonzero_sdiv_divisor(ctx, I8, v38.1);
                        let v2147 = &C::reg_to_gpr_mem(ctx, v2146);
                        let v2150 = constructor_x64_div8(
                            ctx,
                            v2145,
                            v2147,
                            &DivSignedness::Signed,
                            &TrapCode::IntegerOverflow,
                        );
                        let v2151 = constructor_output_gpr(ctx, v2150);
                        // Rule at src/isa/x64/lower.isle line 3991.
                        return Some(v2151);
                    }
                    let v2136 = C::fits_in_64(ctx, v2046);
                    if let Some(v2137) = v2136 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v2152 = &C::raw_operand_size_of_type(ctx, v2137);
                        let v2153 = constructor_x64_sign_extend_data(ctx, v41, v2152);
                        let v2154 = constructor_nonzero_sdiv_divisor(ctx, v2137, v38.1);
                        let v2155 = &C::reg_to_gpr_mem(ctx, v2154);
                        let v2156 = constructor_x64_div_quotient(
                            ctx,
                            v41,
                            v2153,
                            v2155,
                            v2152,
                            &DivSignedness::Signed,
                            &TrapCode::IntegerOverflow,
                        );
                        let v2157 = C::output(ctx, v2156);
                        // Rule at src/isa/x64/lower.isle line 3997.
                        return Some(v2157);
                    }
                }
                &Opcode::Urem => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2046 = C::value_type(ctx, v38.0);
                    if v2046 == I8 {
                        let v2130 = constructor_extend_to_gpr(ctx, v38.0, I32, &ExtendKind::Zero);
                        let v194 = constructor_put_in_gpr(ctx, v38.1);
                        let v2131 = &C::gpr_to_gpr_mem(ctx, v194);
                        let v2134 = constructor_x64_div8(
                            ctx,
                            v2130,
                            v2131,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v1198 = Imm8Reg::Imm8 { imm: 0x8 };
                        let v2158 = &C::imm8_reg_to_imm8_gpr(ctx, &v1198);
                        let v2159 = constructor_x64_shr(ctx, I64, v2134, v2158);
                        let v2160 = constructor_output_gpr(ctx, v2159);
                        // Rule at src/isa/x64/lower.isle line 4030.
                        return Some(v2160);
                    }
                    let v2136 = C::fits_in_64(ctx, v2046);
                    if let Some(v2137) = v2136 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v15 = constructor_imm(ctx, I64, 0x0);
                        let v2138 = C::gpr_new(ctx, v15);
                        let v2139 = constructor_put_in_gpr(ctx, v38.1);
                        let v2140 = &C::gpr_to_gpr_mem(ctx, v2139);
                        let v2141 = &C::raw_operand_size_of_type(ctx, v2137);
                        let v2161 = constructor_x64_div_remainder(
                            ctx,
                            v41,
                            v2138,
                            v2140,
                            v2141,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v2162 = C::output(ctx, v2161);
                        // Rule at src/isa/x64/lower.isle line 4039.
                        return Some(v2162);
                    }
                }
                &Opcode::Srem => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v171 = C::def_inst(ctx, v38.1);
                    if let Some(v172) = v171 {
                        let v173 = &C::inst_data(ctx, v172);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v324,
                            imm: v325,
                        } = v173
                        {
                            if let &Opcode::Iconst = v324 {
                                let v2046 = C::value_type(ctx, v38.0);
                                if v2046 == I8 {
                                    let v2163 = C::safe_divisor_from_imm64(ctx, I8, v325);
                                    if let Some(v2164) = v2163 {
                                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                                        let v2145 = constructor_x64_sign_extend_data(
                                            ctx,
                                            v41,
                                            &OperandSize::Size8,
                                        );
                                        let v2165 = constructor_imm(ctx, I8, v2164);
                                        let v2166 = &C::reg_to_gpr_mem(ctx, v2165);
                                        let v2167 = constructor_x64_div8(
                                            ctx,
                                            v2145,
                                            v2166,
                                            &DivSignedness::Signed,
                                            &TrapCode::IntegerDivisionByZero,
                                        );
                                        let v1198 = Imm8Reg::Imm8 { imm: 0x8 };
                                        let v2168 = &C::imm8_reg_to_imm8_gpr(ctx, &v1198);
                                        let v2169 = constructor_x64_shr(ctx, I64, v2167, v2168);
                                        let v2170 = constructor_output_gpr(ctx, v2169);
                                        // Rule at src/isa/x64/lower.isle line 4054.
                                        return Some(v2170);
                                    }
                                }
                                let v2171 = C::safe_divisor_from_imm64(ctx, v2046, v325);
                                if let Some(v2172) = v2171 {
                                    let v41 = constructor_put_in_gpr(ctx, v38.0);
                                    let v2173 = &C::raw_operand_size_of_type(ctx, v2046);
                                    let v2174 = constructor_x64_sign_extend_data(ctx, v41, v2173);
                                    let v2175 = constructor_imm(ctx, v2046, v2172);
                                    let v2176 = &C::reg_to_gpr_mem(ctx, v2175);
                                    let v2177 = constructor_x64_div_remainder(
                                        ctx,
                                        v41,
                                        v2174,
                                        v2176,
                                        v2173,
                                        &DivSignedness::Signed,
                                        &TrapCode::IntegerDivisionByZero,
                                    );
                                    let v2178 = C::output(ctx, v2177);
                                    // Rule at src/isa/x64/lower.isle line 4063.
                                    return Some(v2178);
                                }
                            }
                        }
                    }
                    let v2046 = C::value_type(ctx, v38.0);
                    if v2046 == I8 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v2145 = constructor_x64_sign_extend_data(ctx, v41, &OperandSize::Size8);
                        let v2179 = constructor_put_in_gpr(ctx, v38.1);
                        let v2180 = constructor_x64_checked_srem_seq8(ctx, v2145, v2179);
                        let v1198 = Imm8Reg::Imm8 { imm: 0x8 };
                        let v2158 = &C::imm8_reg_to_imm8_gpr(ctx, &v1198);
                        let v2181 = constructor_x64_shr(ctx, I64, v2180, v2158);
                        let v2182 = constructor_output_gpr(ctx, v2181);
                        // Rule at src/isa/x64/lower.isle line 4076.
                        return Some(v2182);
                    }
                    let v41 = constructor_put_in_gpr(ctx, v38.0);
                    let v2173 = &C::raw_operand_size_of_type(ctx, v2046);
                    let v2174 = constructor_x64_sign_extend_data(ctx, v41, v2173);
                    let v2139 = constructor_put_in_gpr(ctx, v38.1);
                    let v2183 = constructor_x64_checked_srem_seq(ctx, v2173, v41, v2174, v2139);
                    let v2184 = C::value_regs_get(ctx, v2183, 0x1);
                    let v2185 = constructor_output_reg(ctx, v2184);
                    // Rule at src/isa/x64/lower.isle line 4082.
                    return Some(v2185);
                }
                &Opcode::UaddOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v93 = C::fits_in_64(ctx, v92);
                    if let Some(v94) = v93 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                        let v97 = constructor_construct_overflow_op_alu(
                            ctx,
                            v94,
                            &CC::B,
                            &AluRmiROpcode::Add,
                            v41,
                            v42,
                        );
                        // Rule at src/isa/x64/lower.isle line 137.
                        return Some(v97);
                    }
                    if v92 == I128 {
                        let v99 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::B,
                            &AluRmiROpcode::Add,
                            &AluRmiROpcode::Adc,
                            v38.0,
                            v38.1,
                        );
                        // Rule at src/isa/x64/lower.isle line 141.
                        return Some(v99);
                    }
                }
                &Opcode::SaddOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v93 = C::fits_in_64(ctx, v92);
                    if let Some(v94) = v93 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                        let v101 = constructor_construct_overflow_op_alu(
                            ctx,
                            v94,
                            &CC::O,
                            &AluRmiROpcode::Add,
                            v41,
                            v42,
                        );
                        // Rule at src/isa/x64/lower.isle line 146.
                        return Some(v101);
                    }
                    if v92 == I128 {
                        let v102 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::O,
                            &AluRmiROpcode::Add,
                            &AluRmiROpcode::Adc,
                            v38.0,
                            v38.1,
                        );
                        // Rule at src/isa/x64/lower.isle line 149.
                        return Some(v102);
                    }
                }
                &Opcode::UsubOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v93 = C::fits_in_64(ctx, v92);
                    if let Some(v94) = v93 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                        let v104 = constructor_construct_overflow_op_alu(
                            ctx,
                            v94,
                            &CC::B,
                            &AluRmiROpcode::Sub,
                            v41,
                            v42,
                        );
                        // Rule at src/isa/x64/lower.isle line 154.
                        return Some(v104);
                    }
                    if v92 == I128 {
                        let v106 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::B,
                            &AluRmiROpcode::Sub,
                            &AluRmiROpcode::Sbb,
                            v38.0,
                            v38.1,
                        );
                        // Rule at src/isa/x64/lower.isle line 157.
                        return Some(v106);
                    }
                }
                &Opcode::SsubOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v93 = C::fits_in_64(ctx, v92);
                    if let Some(v94) = v93 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                        let v107 = constructor_construct_overflow_op_alu(
                            ctx,
                            v94,
                            &CC::O,
                            &AluRmiROpcode::Sub,
                            v41,
                            v42,
                        );
                        // Rule at src/isa/x64/lower.isle line 162.
                        return Some(v107);
                    }
                    if v92 == I128 {
                        let v108 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::O,
                            &AluRmiROpcode::Sub,
                            &AluRmiROpcode::Sbb,
                            v38.0,
                            v38.1,
                        );
                        // Rule at src/isa/x64/lower.isle line 165.
                        return Some(v108);
                    }
                }
                &Opcode::UmulOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v93 = C::fits_in_64(ctx, v92);
                    if let Some(v94) = v93 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v109 = &constructor_put_in_gpr_mem(ctx, v38.1);
                        let v110 = &constructor_x64_umullo_with_flags_paired(ctx, v94, v41, v109);
                        let v111 = constructor_construct_overflow_op(ctx, &CC::O, v110);
                        // Rule at src/isa/x64/lower.isle line 170.
                        return Some(v111);
                    }
                }
                &Opcode::SmulOverflow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v92 = C::value_type(ctx, v38.1);
                    let v112 = C::ty_int_ref_16_to_64(ctx, v92);
                    if let Some(v113) = v112 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                        let v115 = constructor_construct_overflow_op_alu(
                            ctx,
                            v113,
                            &CC::O,
                            &AluRmiROpcode::Mul,
                            v41,
                            v42,
                        );
                        // Rule at src/isa/x64/lower.isle line 175.
                        return Some(v115);
                    }
                    if v92 == I8 {
                        let v41 = constructor_put_in_gpr(ctx, v38.0);
                        let v117 = &C::put_in_reg_mem(ctx, v38.1);
                        let v118 = &constructor_reg_mem_to_reg_mem_imm(ctx, v117);
                        let v119 = &C::gpr_mem_imm_new(ctx, v118);
                        let v120 = &constructor_x64_alurmi_with_flags_paired(
                            ctx,
                            &AluRmiROpcode::Mul,
                            I8,
                            v41,
                            v119,
                        );
                        let v121 = constructor_construct_overflow_op(ctx, &CC::O, v120);
                        // Rule at src/isa/x64/lower.isle line 179.
                        return Some(v121);
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v188 = C::use_bmi1(ctx);
                        if v188 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v45 = C::ty_32_or_64(ctx, v3);
                            if let Some(v46) = v45 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    match v173 {
                                        &InstructionData::Binary {
                                            opcode: ref v211,
                                            args: ref v212,
                                        } => {
                                            if let &Opcode::Isub = v211 {
                                                let v213 = C::unpack_value_array_2(ctx, v212);
                                                let v216 = C::def_inst(ctx, v213.1);
                                                if let Some(v217) = v216 {
                                                    let v218 = &C::inst_data(ctx, v217);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v219,
                                                        imm: v220,
                                                    } = v218
                                                    {
                                                        if let &Opcode::Iconst = v219 {
                                                            let v221 = C::u64_from_imm64(ctx, v220);
                                                            if v221 == 0x1 {
                                                                if v38.0 == v213.0 {
                                                                    let v222 =
                                                                        &constructor_put_in_gpr_mem(
                                                                            ctx, v38.0,
                                                                        );
                                                                    let v223 = constructor_x64_blsr(
                                                                        ctx, v46, v222,
                                                                    );
                                                                    let v224 =
                                                                        constructor_output_gpr(
                                                                            ctx, v223,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 353.
                                                                    return Some(v224);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &InstructionData::Unary {
                                            opcode: ref v174,
                                            arg: v175,
                                        } => {
                                            if let &Opcode::Ineg = v174 {
                                                if v38.0 == v175 {
                                                    let v222 =
                                                        &constructor_put_in_gpr_mem(ctx, v38.0);
                                                    let v228 = constructor_x64_blsi(ctx, v46, v222);
                                                    let v229 = constructor_output_gpr(ctx, v228);
                                                    // Rule at src/isa/x64/lower.isle line 362.
                                                    return Some(v229);
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                let v180 = C::def_inst(ctx, v38.0);
                                if let Some(v181) = v180 {
                                    let v182 = &C::inst_data(ctx, v181);
                                    match v182 {
                                        &InstructionData::Binary {
                                            opcode: ref v197,
                                            args: ref v198,
                                        } => {
                                            if let &Opcode::Isub = v197 {
                                                let v199 = C::unpack_value_array_2(ctx, v198);
                                                let v202 = C::def_inst(ctx, v199.1);
                                                if let Some(v203) = v202 {
                                                    let v204 = &C::inst_data(ctx, v203);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v205,
                                                        imm: v206,
                                                    } = v204
                                                    {
                                                        if let &Opcode::Iconst = v205 {
                                                            let v207 = C::u64_from_imm64(ctx, v206);
                                                            if v207 == 0x1 {
                                                                if v38.1 == v199.0 {
                                                                    let v208 =
                                                                        &constructor_put_in_gpr_mem(
                                                                            ctx, v199.0,
                                                                        );
                                                                    let v209 = constructor_x64_blsr(
                                                                        ctx, v46, v208,
                                                                    );
                                                                    let v210 =
                                                                        constructor_output_gpr(
                                                                            ctx, v209,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 350.
                                                                    return Some(v210);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &InstructionData::Unary {
                                            opcode: ref v183,
                                            arg: v184,
                                        } => {
                                            if let &Opcode::Ineg = v183 {
                                                if v38.1 == v184 {
                                                    let v225 =
                                                        &constructor_put_in_gpr_mem(ctx, v184);
                                                    let v226 = constructor_x64_blsi(ctx, v46, v225);
                                                    let v227 = constructor_output_gpr(ctx, v226);
                                                    // Rule at src/isa/x64/lower.isle line 359.
                                                    return Some(v227);
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v152 = C::ty_int_ref_scalar_64(ctx, v3);
                            if let Some(v153) = v152 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v180 = C::def_inst(ctx, v38.0);
                                if let Some(v181) = v180 {
                                    let v182 = &C::inst_data(ctx, v181);
                                    if let &InstructionData::Unary {
                                        opcode: ref v183,
                                        arg: v184,
                                    } = v182
                                    {
                                        if let &Opcode::Bnot = v183 {
                                            let v193 = constructor_put_in_gpr(ctx, v184);
                                            let v194 = constructor_put_in_gpr(ctx, v38.1);
                                            let v195 = constructor_x64_andn(ctx, v3, v193, v194);
                                            let v196 = constructor_output_gpr(ctx, v195);
                                            // Rule at src/isa/x64/lower.isle line 343.
                                            return Some(v196);
                                        }
                                    }
                                }
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    if let &InstructionData::Unary {
                                        opcode: ref v174,
                                        arg: v175,
                                    } = v173
                                    {
                                        if let &Opcode::Bnot = v174 {
                                            let v189 = constructor_put_in_gpr(ctx, v175);
                                            let v190 = constructor_put_in_gpr(ctx, v38.0);
                                            let v191 = constructor_x64_andn(ctx, v3, v189, v190);
                                            let v192 = constructor_output_gpr(ctx, v191);
                                            // Rule at src/isa/x64/lower.isle line 338.
                                            return Some(v192);
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v180 = C::def_inst(ctx, v38.0);
                            if let Some(v181) = v180 {
                                let v182 = &C::inst_data(ctx, v181);
                                if let &InstructionData::Unary {
                                    opcode: ref v183,
                                    arg: v184,
                                } = v182
                                {
                                    if let &Opcode::Bnot = v183 {
                                        let v185 = constructor_put_in_xmm(ctx, v184);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v186 = constructor_sse_and_not(ctx, v3, v185, v69);
                                        let v187 = constructor_output_xmm(ctx, v186);
                                        // Rule at src/isa/x64/lower.isle line 335.
                                        return Some(v187);
                                    }
                                }
                            }
                            let v171 = C::def_inst(ctx, v38.1);
                            if let Some(v172) = v171 {
                                let v173 = &C::inst_data(ctx, v172);
                                if let &InstructionData::Unary {
                                    opcode: ref v174,
                                    arg: v175,
                                } = v173
                                {
                                    if let &Opcode::Bnot = v174 {
                                        let v176 = constructor_put_in_xmm(ctx, v175);
                                        let v177 = &C::put_in_xmm_mem(ctx, v38.0);
                                        let v178 = constructor_sse_and_not(ctx, v3, v176, v177);
                                        let v179 = constructor_output_xmm(ctx, v178);
                                        // Rule at src/isa/x64/lower.isle line 333.
                                        return Some(v179);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v168 = C::put_in_regs(ctx, v38.1);
                            let v169 = constructor_and_i128(ctx, v78, v168);
                            let v170 = C::output(ctx, v169);
                            // Rule at src/isa/x64/lower.isle line 314.
                            return Some(v170);
                        }
                        if let Some(v65) = v64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v166 = constructor_sse_and(ctx, v3, v68, v69);
                            let v167 = constructor_output_xmm(ctx, v166);
                            // Rule at src/isa/x64/lower.isle line 297.
                            return Some(v167);
                        }
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v164 = constructor_sse_and(ctx, v163, v68, v69);
                            let v165 = constructor_output_xmm(ctx, v164);
                            // Rule at src/isa/x64/lower.isle line 285.
                            return Some(v165);
                        }
                        let v152 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v153) = v152 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v158 = &C::simm32_from_value(ctx, v38.0);
                            if let Some(v159) = v158 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v160 = constructor_x64_and(ctx, v3, v60, v159);
                                let v161 = constructor_output_gpr(ctx, v160);
                                // Rule at src/isa/x64/lower.isle line 279.
                                return Some(v161);
                            }
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v61 = &constructor_sink_load_to_gpr_mem_imm(ctx, v59);
                                let v156 = constructor_x64_and(ctx, v3, v60, v61);
                                let v157 = constructor_output_gpr(ctx, v156);
                                // Rule at src/isa/x64/lower.isle line 275.
                                return Some(v157);
                            }
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v154 = constructor_x64_and(ctx, v3, v41, v42);
                            let v155 = constructor_output_gpr(ctx, v154);
                            // Rule at src/isa/x64/lower.isle line 268.
                            return Some(v155);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v168 = C::put_in_regs(ctx, v38.1);
                            let v240 = constructor_or_i128(ctx, v78, v168);
                            let v241 = C::output(ctx, v240);
                            // Rule at src/isa/x64/lower.isle line 415.
                            return Some(v241);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v238 = constructor_sse_or(ctx, v3, v68, v69);
                            let v239 = constructor_output_xmm(ctx, v238);
                            // Rule at src/isa/x64/lower.isle line 400.
                            return Some(v239);
                        }
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v236 = constructor_sse_or(ctx, v163, v68, v69);
                            let v237 = constructor_output_xmm(ctx, v236);
                            // Rule at src/isa/x64/lower.isle line 388.
                            return Some(v237);
                        }
                        let v152 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v153) = v152 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v158 = &C::simm32_from_value(ctx, v38.0);
                            if let Some(v159) = v158 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v234 = constructor_x64_or(ctx, v3, v60, v159);
                                let v235 = constructor_output_gpr(ctx, v234);
                                // Rule at src/isa/x64/lower.isle line 382.
                                return Some(v235);
                            }
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v61 = &constructor_sink_load_to_gpr_mem_imm(ctx, v59);
                                let v232 = constructor_x64_or(ctx, v3, v60, v61);
                                let v233 = constructor_output_gpr(ctx, v232);
                                // Rule at src/isa/x64/lower.isle line 378.
                                return Some(v233);
                            }
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v230 = constructor_x64_or(ctx, v3, v41, v42);
                            let v231 = constructor_output_gpr(ctx, v230);
                            // Rule at src/isa/x64/lower.isle line 371.
                            return Some(v231);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v188 = C::use_bmi1(ctx);
                            if v188 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    if let &InstructionData::Binary {
                                        opcode: ref v211,
                                        args: ref v212,
                                    } = v173
                                    {
                                        if let &Opcode::Isub = v211 {
                                            let v213 = C::unpack_value_array_2(ctx, v212);
                                            let v216 = C::def_inst(ctx, v213.1);
                                            if let Some(v217) = v216 {
                                                let v218 = &C::inst_data(ctx, v217);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v219,
                                                    imm: v220,
                                                } = v218
                                                {
                                                    if let &Opcode::Iconst = v219 {
                                                        let v221 = C::u64_from_imm64(ctx, v220);
                                                        if v221 == 0x1 {
                                                            if v38.0 == v213.0 {
                                                                let v222 =
                                                                    &constructor_put_in_gpr_mem(
                                                                        ctx, v38.0,
                                                                    );
                                                                let v258 = constructor_x64_blsmsk(
                                                                    ctx, v46, v222,
                                                                );
                                                                let v259 = constructor_output_gpr(
                                                                    ctx, v258,
                                                                );
                                                                // Rule at src/isa/x64/lower.isle line 465.
                                                                return Some(v259);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                let v180 = C::def_inst(ctx, v38.0);
                                if let Some(v181) = v180 {
                                    let v182 = &C::inst_data(ctx, v181);
                                    if let &InstructionData::Binary {
                                        opcode: ref v197,
                                        args: ref v198,
                                    } = v182
                                    {
                                        if let &Opcode::Isub = v197 {
                                            let v199 = C::unpack_value_array_2(ctx, v198);
                                            let v202 = C::def_inst(ctx, v199.1);
                                            if let Some(v203) = v202 {
                                                let v204 = &C::inst_data(ctx, v203);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v205,
                                                    imm: v206,
                                                } = v204
                                                {
                                                    if let &Opcode::Iconst = v205 {
                                                        let v207 = C::u64_from_imm64(ctx, v206);
                                                        if v207 == 0x1 {
                                                            if v38.1 == v199.0 {
                                                                let v208 =
                                                                    &constructor_put_in_gpr_mem(
                                                                        ctx, v199.0,
                                                                    );
                                                                let v256 = constructor_x64_blsmsk(
                                                                    ctx, v46, v208,
                                                                );
                                                                let v257 = constructor_output_gpr(
                                                                    ctx, v256,
                                                                );
                                                                // Rule at src/isa/x64/lower.isle line 462.
                                                                return Some(v257);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v80 = constructor_value_regs_get_gpr(ctx, v78, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v78, 0x1);
                            let v83 = C::put_in_regs(ctx, v38.1);
                            let v84 = constructor_value_regs_get_gpr(ctx, v83, 0x0);
                            let v85 = constructor_value_regs_get_gpr(ctx, v83, 0x1);
                            let v86 = &C::gpr_to_gpr_mem_imm(ctx, v84);
                            let v252 = constructor_x64_xor(ctx, I64, v80, v86);
                            let v88 = &C::gpr_to_gpr_mem_imm(ctx, v85);
                            let v253 = constructor_x64_xor(ctx, I64, v82, v88);
                            let v254 = constructor_value_gprs(ctx, v252, v253);
                            let v255 = C::output(ctx, v254);
                            // Rule at src/isa/x64/lower.isle line 450.
                            return Some(v255);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v250 = constructor_x64_xor_vector(ctx, v3, v68, v69);
                            let v251 = constructor_output_xmm(ctx, v250);
                            // Rule at src/isa/x64/lower.isle line 445.
                            return Some(v251);
                        }
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v68 = constructor_put_in_xmm(ctx, v38.0);
                            let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                            let v248 = constructor_x64_xor_vector(ctx, v163, v68, v69);
                            let v249 = constructor_output_xmm(ctx, v248);
                            // Rule at src/isa/x64/lower.isle line 440.
                            return Some(v249);
                        }
                        let v152 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v153) = v152 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v158 = &C::simm32_from_value(ctx, v38.0);
                            if let Some(v159) = v158 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v246 = constructor_x64_xor(ctx, v3, v60, v159);
                                let v247 = constructor_output_gpr(ctx, v246);
                                // Rule at src/isa/x64/lower.isle line 434.
                                return Some(v247);
                            }
                            let v58 = &C::sinkable_load(ctx, v38.0);
                            if let Some(v59) = v58 {
                                let v60 = constructor_put_in_gpr(ctx, v38.1);
                                let v61 = &constructor_sink_load_to_gpr_mem_imm(ctx, v59);
                                let v244 = constructor_x64_xor(ctx, v3, v60, v61);
                                let v245 = constructor_output_gpr(ctx, v244);
                                // Rule at src/isa/x64/lower.isle line 430.
                                return Some(v245);
                            }
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v42 = &constructor_put_in_gpr_mem_imm(ctx, v38.1);
                            let v242 = constructor_x64_xor(ctx, v3, v41, v42);
                            let v243 = constructor_output_gpr(ctx, v242);
                            // Rule at src/isa/x64/lower.isle line 423.
                            return Some(v243);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v357 = constructor_lo_gpr(ctx, v38.1);
                            let v358 = constructor_shl_i128(ctx, v78, v357);
                            let v360 = constructor_imm(ctx, I64, 0x80);
                            let v361 = C::gpr_new(ctx, v360);
                            let v362 = &C::gpr_to_gpr_mem_imm(ctx, v357);
                            let v363 = constructor_x64_sub(ctx, I64, v361, v362);
                            let v364 = constructor_shr_i128(ctx, v78, v363);
                            let v365 = constructor_or_i128(ctx, v358, v364);
                            let v366 = C::output(ctx, v365);
                            // Rule at src/isa/x64/lower.isle line 870.
                            return Some(v366);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v260 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v355 = constructor_x64_rotl(ctx, v5, v41, v260);
                            let v356 = constructor_output_gpr(ctx, v355);
                            // Rule at src/isa/x64/lower.isle line 864.
                            return Some(v356);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v78 = C::put_in_regs(ctx, v38.0);
                            let v357 = constructor_lo_gpr(ctx, v38.1);
                            let v369 = constructor_shr_i128(ctx, v78, v357);
                            let v360 = constructor_imm(ctx, I64, 0x80);
                            let v361 = C::gpr_new(ctx, v360);
                            let v362 = &C::gpr_to_gpr_mem_imm(ctx, v357);
                            let v363 = constructor_x64_sub(ctx, I64, v361, v362);
                            let v370 = constructor_shl_i128(ctx, v78, v363);
                            let v371 = constructor_or_i128(ctx, v369, v370);
                            let v372 = C::output(ctx, v371);
                            // Rule at src/isa/x64/lower.isle line 891.
                            return Some(v372);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v260 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v367 = constructor_x64_rotr(ctx, v5, v41, v260);
                            let v368 = constructor_output_gpr(ctx, v367);
                            // Rule at src/isa/x64/lower.isle line 885.
                            return Some(v368);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v263 = constructor_lo_gpr(ctx, v38.1);
                                let v264 = C::put_in_regs(ctx, v38.0);
                                let v265 = constructor_shl_i128(ctx, v264, v263);
                                let v266 = C::output(ctx, v265);
                                // Rule at src/isa/x64/lower.isle line 512.
                                return Some(v266);
                            }
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v267 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v268 = constructor_put_in_xmm(ctx, v38.0);
                                let v269 = &constructor_mov_rmi_to_xmm(ctx, v267);
                                let v270 = constructor_x64_psllw(ctx, v268, v269);
                                let v271 = &constructor_ishl_i8x16_mask(ctx, v267);
                                let v274 = constructor_x64_load(ctx, I8X16, v271, &ExtKind::None);
                                let v275 = RegMem::Reg { reg: v274 };
                                let v276 = &C::reg_mem_to_xmm_mem(ctx, &v275);
                                let v277 = constructor_sse_and(ctx, I8X16, v270, v276);
                                let v278 = constructor_output_xmm(ctx, v277);
                                // Rule at src/isa/x64/lower.isle line 524.
                                return Some(v278);
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v279 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v280 = &constructor_mov_rmi_to_xmm(ctx, v279);
                                let v281 = constructor_x64_psllw(ctx, v68, v280);
                                let v282 = constructor_output_xmm(ctx, v281);
                                // Rule at src/isa/x64/lower.isle line 569.
                                return Some(v282);
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v279 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v280 = &constructor_mov_rmi_to_xmm(ctx, v279);
                                let v283 = constructor_x64_pslld(ctx, v68, v280);
                                let v284 = constructor_output_xmm(ctx, v283);
                                // Rule at src/isa/x64/lower.isle line 572.
                                return Some(v284);
                            }
                            I64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v279 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v280 = &constructor_mov_rmi_to_xmm(ctx, v279);
                                let v285 = constructor_x64_psllq(ctx, v68, v280);
                                let v286 = constructor_output_xmm(ctx, v285);
                                // Rule at src/isa/x64/lower.isle line 575.
                                return Some(v286);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_gpr(ctx, v38.0);
                            let v260 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v261 = constructor_x64_shl(ctx, v5, v41, v260);
                            let v262 = constructor_output_gpr(ctx, v261);
                            // Rule at src/isa/x64/lower.isle line 473.
                            return Some(v262);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v263 = constructor_lo_gpr(ctx, v38.1);
                                let v264 = C::put_in_regs(ctx, v38.0);
                                let v291 = constructor_shr_i128(ctx, v264, v263);
                                let v292 = C::output(ctx, v291);
                                // Rule at src/isa/x64/lower.isle line 619.
                                return Some(v292);
                            }
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v267 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v268 = constructor_put_in_xmm(ctx, v38.0);
                                let v269 = &constructor_mov_rmi_to_xmm(ctx, v267);
                                let v293 = constructor_x64_psrlw(ctx, v268, v269);
                                let v294 = &constructor_ushr_i8x16_mask(ctx, v267);
                                let v295 = &constructor_synthetic_amode_to_xmm_mem(ctx, v294);
                                let v296 = constructor_sse_and(ctx, I8X16, v293, v295);
                                let v297 = constructor_output_xmm(ctx, v296);
                                // Rule at src/isa/x64/lower.isle line 629.
                                return Some(v297);
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v279 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v280 = &constructor_mov_rmi_to_xmm(ctx, v279);
                                let v298 = constructor_x64_psrlw(ctx, v68, v280);
                                let v299 = constructor_output_xmm(ctx, v298);
                                // Rule at src/isa/x64/lower.isle line 675.
                                return Some(v299);
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v279 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v280 = &constructor_mov_rmi_to_xmm(ctx, v279);
                                let v300 = constructor_x64_psrld(ctx, v68, v280);
                                let v301 = constructor_output_xmm(ctx, v300);
                                // Rule at src/isa/x64/lower.isle line 678.
                                return Some(v301);
                            }
                            I64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v279 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v280 = &constructor_mov_rmi_to_xmm(ctx, v279);
                                let v302 = constructor_x64_psrlq(ctx, v68, v280);
                                let v303 = constructor_output_xmm(ctx, v302);
                                // Rule at src/isa/x64/lower.isle line 681.
                                return Some(v303);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v288 = constructor_extend_to_gpr(ctx, v38.0, v5, &ExtendKind::Zero);
                            let v260 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v289 = constructor_x64_shr(ctx, v5, v288, v260);
                            let v290 = constructor_output_gpr(ctx, v289);
                            // Rule at src/isa/x64/lower.isle line 582.
                            return Some(v290);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v263 = constructor_lo_gpr(ctx, v38.1);
                                let v264 = C::put_in_regs(ctx, v38.0);
                                let v308 = constructor_sar_i128(ctx, v264, v263);
                                let v309 = C::output(ctx, v308);
                                // Rule at src/isa/x64/lower.isle line 731.
                                return Some(v309);
                            }
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v279 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v310 = &C::xmm_to_xmm_mem(ctx, v68);
                                let v311 = constructor_x64_punpcklbw(ctx, v68, v310);
                                let v312 = &C::xmm_to_xmm_mem(ctx, v68);
                                let v313 = constructor_x64_punpckhbw(ctx, v68, v312);
                                let v92 = C::value_type(ctx, v38.1);
                                let v314 = &constructor_sshr_i8x16_bigger_shift(ctx, v92, v279);
                                let v315 = constructor_x64_psraw(ctx, v311, v314);
                                let v316 = constructor_x64_psraw(ctx, v313, v314);
                                let v317 = &C::xmm_to_xmm_mem(ctx, v316);
                                let v318 = constructor_x64_packsswb(ctx, v315, v317);
                                let v319 = constructor_output_xmm(ctx, v318);
                                // Rule at src/isa/x64/lower.isle line 752.
                                return Some(v319);
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v279 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v280 = &constructor_mov_rmi_to_xmm(ctx, v279);
                                let v320 = constructor_x64_psraw(ctx, v68, v280);
                                let v321 = constructor_output_xmm(ctx, v320);
                                // Rule at src/isa/x64/lower.isle line 781.
                                return Some(v321);
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v279 = &constructor_mask_xmm_shift(ctx, v3, v38.1);
                                let v280 = &constructor_mov_rmi_to_xmm(ctx, v279);
                                let v322 = constructor_x64_psrad(ctx, v68, v280);
                                let v323 = constructor_output_xmm(ctx, v322);
                                // Rule at src/isa/x64/lower.isle line 784.
                                return Some(v323);
                            }
                            I64X2 => {
                                let v326 = C::use_avx512vl(ctx);
                                if v326 == true {
                                    let v327 = C::use_avx512f(ctx);
                                    if v327 == true {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v171 = C::def_inst(ctx, v38.1);
                                        if let Some(v172) = v171 {
                                            let v173 = &C::inst_data(ctx, v172);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v324,
                                                imm: v325,
                                            } = v173
                                            {
                                                if let &Opcode::Iconst = v324 {
                                                    let v328 = &C::put_in_xmm_mem(ctx, v38.0);
                                                    let v329 =
                                                        C::shift_amount_masked(ctx, v3, v325);
                                                    let v330 =
                                                        constructor_x64_vpsraq_imm(ctx, v328, v329);
                                                    let v331 = constructor_output_xmm(ctx, v330);
                                                    // Rule at src/isa/x64/lower.isle line 790.
                                                    return Some(v331);
                                                }
                                            }
                                        }
                                        let v60 = constructor_put_in_gpr(ctx, v38.1);
                                        let v332 = C::shift_mask(ctx, v3);
                                        let v333 = C::u8_as_u32(ctx, v332);
                                        let v334 = RegMemImm::Imm { simm32: v333 };
                                        let v335 = &C::gpr_mem_imm_new(ctx, &v334);
                                        let v336 = constructor_x64_and(ctx, I64, v60, v335);
                                        let v337 = constructor_put_in_xmm(ctx, v38.0);
                                        let v338 = &C::gpr_to_gpr_mem(ctx, v336);
                                        let v339 = constructor_x64_movd_to_xmm(ctx, v338);
                                        let v340 = &C::xmm_to_xmm_mem(ctx, v339);
                                        let v341 = constructor_x64_vpsraq(ctx, v337, v340);
                                        let v342 = constructor_output_xmm(ctx, v341);
                                        // Rule at src/isa/x64/lower.isle line 795.
                                        return Some(v342);
                                    }
                                }
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v324,
                                        imm: v325,
                                    } = v173
                                    {
                                        if let &Opcode::Iconst = v324 {
                                            let v343 = C::u64_from_imm64(ctx, v325);
                                            let v344 = C::u64_as_u32(ctx, v343);
                                            if let Some(v345) = v344 {
                                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                                let v347 = C::u32_and(ctx, v345, 0x3F);
                                                let v348 = constructor_lower_i64x2_sshr_imm(
                                                    ctx, v68, v347,
                                                );
                                                let v349 = constructor_output_xmm(ctx, v348);
                                                // Rule at src/isa/x64/lower.isle line 801.
                                                return Some(v349);
                                            }
                                        }
                                    }
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v194 = constructor_put_in_gpr(ctx, v38.1);
                                let v350 = RegMemImm::Imm { simm32: 0x3F };
                                let v351 = &C::gpr_mem_imm_new(ctx, &v350);
                                let v352 = constructor_x64_and(ctx, I64, v194, v351);
                                let v353 = constructor_lower_i64x2_sshr_gpr(ctx, v68, v352);
                                let v354 = constructor_output_xmm(ctx, v353);
                                // Rule at src/isa/x64/lower.isle line 804.
                                return Some(v354);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v305 = constructor_extend_to_gpr(ctx, v38.0, v5, &ExtendKind::Sign);
                            let v260 = &constructor_put_masked_in_imm8_gpr(ctx, v38.1, v5);
                            let v306 = constructor_x64_sar(ctx, v5, v305, v260);
                            let v307 = constructor_output_gpr(ctx, v306);
                            // Rule at src/isa/x64/lower.isle line 694.
                            return Some(v307);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1243 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1254 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1255 = constructor_x64_addss(ctx, v1243, v1254);
                                    let v1256 = constructor_output_xmm(ctx, v1255);
                                    // Rule at src/isa/x64/lower.isle line 2478.
                                    return Some(v1256);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1246 = constructor_x64_addss(ctx, v68, v69);
                                let v1247 = constructor_output_xmm(ctx, v1246);
                                // Rule at src/isa/x64/lower.isle line 2467.
                                return Some(v1247);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1243 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1254 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1257 = constructor_x64_addsd(ctx, v1243, v1254);
                                    let v1258 = constructor_output_xmm(ctx, v1257);
                                    // Rule at src/isa/x64/lower.isle line 2480.
                                    return Some(v1258);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1248 = constructor_x64_addsd(ctx, v68, v69);
                                let v1249 = constructor_output_xmm(ctx, v1248);
                                // Rule at src/isa/x64/lower.isle line 2469.
                                return Some(v1249);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1243 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1254 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1259 = constructor_x64_addps(ctx, v1243, v1254);
                                    let v1260 = constructor_output_xmm(ctx, v1259);
                                    // Rule at src/isa/x64/lower.isle line 2482.
                                    return Some(v1260);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1250 = constructor_x64_addps(ctx, v68, v69);
                                let v1251 = constructor_output_xmm(ctx, v1250);
                                // Rule at src/isa/x64/lower.isle line 2471.
                                return Some(v1251);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1243 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1254 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1261 = constructor_x64_addpd(ctx, v1243, v1254);
                                    let v1262 = constructor_output_xmm(ctx, v1261);
                                    // Rule at src/isa/x64/lower.isle line 2484.
                                    return Some(v1262);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1252 = constructor_x64_addpd(ctx, v68, v69);
                                let v1253 = constructor_output_xmm(ctx, v1252);
                                // Rule at src/isa/x64/lower.isle line 2473.
                                return Some(v1253);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1263 = constructor_x64_subss(ctx, v68, v69);
                                let v1264 = constructor_output_xmm(ctx, v1263);
                                // Rule at src/isa/x64/lower.isle line 2489.
                                return Some(v1264);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1265 = constructor_x64_subsd(ctx, v68, v69);
                                let v1266 = constructor_output_xmm(ctx, v1265);
                                // Rule at src/isa/x64/lower.isle line 2491.
                                return Some(v1266);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1267 = constructor_x64_subps(ctx, v68, v69);
                                let v1268 = constructor_output_xmm(ctx, v1267);
                                // Rule at src/isa/x64/lower.isle line 2493.
                                return Some(v1268);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1269 = constructor_x64_subpd(ctx, v68, v69);
                                let v1270 = constructor_output_xmm(ctx, v1269);
                                // Rule at src/isa/x64/lower.isle line 2495.
                                return Some(v1270);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1243 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1254 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1279 = constructor_x64_mulss(ctx, v1243, v1254);
                                    let v1280 = constructor_output_xmm(ctx, v1279);
                                    // Rule at src/isa/x64/lower.isle line 2511.
                                    return Some(v1280);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1271 = constructor_x64_mulss(ctx, v68, v69);
                                let v1272 = constructor_output_xmm(ctx, v1271);
                                // Rule at src/isa/x64/lower.isle line 2500.
                                return Some(v1272);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1243 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1254 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1281 = constructor_x64_mulsd(ctx, v1243, v1254);
                                    let v1282 = constructor_output_xmm(ctx, v1281);
                                    // Rule at src/isa/x64/lower.isle line 2513.
                                    return Some(v1282);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1273 = constructor_x64_mulsd(ctx, v68, v69);
                                let v1274 = constructor_output_xmm(ctx, v1273);
                                // Rule at src/isa/x64/lower.isle line 2502.
                                return Some(v1274);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1243 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1254 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1283 = constructor_x64_mulps(ctx, v1243, v1254);
                                    let v1284 = constructor_output_xmm(ctx, v1283);
                                    // Rule at src/isa/x64/lower.isle line 2515.
                                    return Some(v1284);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1275 = constructor_x64_mulps(ctx, v68, v69);
                                let v1276 = constructor_output_xmm(ctx, v1275);
                                // Rule at src/isa/x64/lower.isle line 2504.
                                return Some(v1276);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v58 = &C::sinkable_load(ctx, v38.0);
                                if let Some(v59) = v58 {
                                    let v1243 = constructor_put_in_xmm(ctx, v38.1);
                                    let v1254 = &constructor_sink_load_to_xmm_mem(ctx, v59);
                                    let v1285 = constructor_x64_mulpd(ctx, v1243, v1254);
                                    let v1286 = constructor_output_xmm(ctx, v1285);
                                    // Rule at src/isa/x64/lower.isle line 2517.
                                    return Some(v1286);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1277 = constructor_x64_mulpd(ctx, v68, v69);
                                let v1278 = constructor_output_xmm(ctx, v1277);
                                // Rule at src/isa/x64/lower.isle line 2506.
                                return Some(v1278);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1287 = constructor_x64_divss(ctx, v68, v69);
                                let v1288 = constructor_output_xmm(ctx, v1287);
                                // Rule at src/isa/x64/lower.isle line 2522.
                                return Some(v1288);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1289 = constructor_x64_divsd(ctx, v68, v69);
                                let v1290 = constructor_output_xmm(ctx, v1289);
                                // Rule at src/isa/x64/lower.isle line 2524.
                                return Some(v1290);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1291 = constructor_x64_divps(ctx, v68, v69);
                                let v1292 = constructor_output_xmm(ctx, v1291);
                                // Rule at src/isa/x64/lower.isle line 2526.
                                return Some(v1292);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1293 = constructor_x64_divpd(ctx, v68, v69);
                                let v1294 = constructor_output_xmm(ctx, v1293);
                                // Rule at src/isa/x64/lower.isle line 2528.
                                return Some(v1294);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2046 = C::value_type(ctx, v38.0);
                                if v2046 == F32 {
                                    let v2096 = constructor_imm(ctx, F32, 0x80000000);
                                    let v2097 = C::xmm_new(ctx, v2096);
                                    let v2098 = &C::put_in_xmm_mem(ctx, v38.0);
                                    let v2099 = constructor_x64_andnps(ctx, v2097, v2098);
                                    let v2100 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2101 = constructor_x64_andps(ctx, v2097, v2100);
                                    let v2102 = &C::xmm_to_xmm_mem(ctx, v2101);
                                    let v2103 = constructor_x64_orps(ctx, v2099, v2102);
                                    let v2104 = constructor_output_xmm(ctx, v2103);
                                    // Rule at src/isa/x64/lower.isle line 3871.
                                    return Some(v2104);
                                }
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2046 = C::value_type(ctx, v38.0);
                                if v2046 == F64 {
                                    let v2105 = constructor_imm(ctx, F64, 0x8000000000000000);
                                    let v2106 = C::xmm_new(ctx, v2105);
                                    let v2098 = &C::put_in_xmm_mem(ctx, v38.0);
                                    let v2107 = constructor_x64_andnpd(ctx, v2106, v2098);
                                    let v2100 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2108 = constructor_x64_andpd(ctx, v2106, v2100);
                                    let v2109 = &C::xmm_to_xmm_mem(ctx, v2108);
                                    let v2110 = constructor_x64_orpd(ctx, v2107, v2109);
                                    let v2111 = constructor_output_xmm(ctx, v2110);
                                    // Rule at src/isa/x64/lower.isle line 3877.
                                    return Some(v2111);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v437 = constructor_put_in_xmm(ctx, v38.1);
                                let v1313 = constructor_xmm_min_max_seq(ctx, F32, true, v68, v437);
                                let v1314 = constructor_output_xmm(ctx, v1313);
                                // Rule at src/isa/x64/lower.isle line 2559.
                                return Some(v1314);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v437 = constructor_put_in_xmm(ctx, v38.1);
                                let v1315 = constructor_xmm_min_max_seq(ctx, F64, true, v68, v437);
                                let v1316 = constructor_output_xmm(ctx, v1315);
                                // Rule at src/isa/x64/lower.isle line 2561.
                                return Some(v1316);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1317 = constructor_x64_minps(ctx, v68, v69);
                                let v1318 = constructor_put_in_xmm(ctx, v38.1);
                                let v1319 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1320 = constructor_x64_minps(ctx, v1318, v1319);
                                let v1321 = &C::xmm_to_xmm_mem(ctx, v1320);
                                let v1322 = constructor_x64_orps(ctx, v1317, v1321);
                                let v1323 = &C::xmm_to_xmm_mem(ctx, v1320);
                                let v1324 =
                                    constructor_x64_cmpps(ctx, v1322, v1323, &FcmpImm::Unordered);
                                let v1325 = &C::xmm_to_xmm_mem(ctx, v1324);
                                let v1326 = constructor_x64_orps(ctx, v1322, v1325);
                                let v1328 = &C::xmi_imm(ctx, 0xA);
                                let v1329 = constructor_x64_psrld(ctx, v1324, v1328);
                                let v1330 = &C::xmm_to_xmm_mem(ctx, v1326);
                                let v1331 = constructor_x64_andnps(ctx, v1329, v1330);
                                let v1332 = constructor_output_xmm(ctx, v1331);
                                // Rule at src/isa/x64/lower.isle line 2576.
                                return Some(v1332);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1333 = constructor_x64_minpd(ctx, v68, v69);
                                let v1318 = constructor_put_in_xmm(ctx, v38.1);
                                let v1319 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1334 = constructor_x64_minpd(ctx, v1318, v1319);
                                let v1335 = &C::xmm_to_xmm_mem(ctx, v1334);
                                let v1336 = constructor_x64_orpd(ctx, v1333, v1335);
                                let v1337 = &C::xmm_to_xmm_mem(ctx, v1334);
                                let v1338 =
                                    constructor_x64_cmppd(ctx, v1333, v1337, &FcmpImm::Unordered);
                                let v1339 = &C::xmm_to_xmm_mem(ctx, v1338);
                                let v1340 = constructor_x64_orpd(ctx, v1336, v1339);
                                let v1342 = &C::xmi_imm(ctx, 0xD);
                                let v1343 = constructor_x64_psrlq(ctx, v1338, v1342);
                                let v1344 = &C::xmm_to_xmm_mem(ctx, v1340);
                                let v1345 = constructor_x64_andnpd(ctx, v1343, v1344);
                                let v1346 = constructor_output_xmm(ctx, v1345);
                                // Rule at src/isa/x64/lower.isle line 2619.
                                return Some(v1346);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v437 = constructor_put_in_xmm(ctx, v38.1);
                                let v1348 = constructor_xmm_min_max_seq(ctx, F32, false, v68, v437);
                                let v1349 = constructor_output_xmm(ctx, v1348);
                                // Rule at src/isa/x64/lower.isle line 2631.
                                return Some(v1349);
                            }
                            F64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v437 = constructor_put_in_xmm(ctx, v38.1);
                                let v1350 = constructor_xmm_min_max_seq(ctx, F64, false, v68, v437);
                                let v1351 = constructor_output_xmm(ctx, v1350);
                                // Rule at src/isa/x64/lower.isle line 2633.
                                return Some(v1351);
                            }
                            F32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1352 = constructor_x64_maxps(ctx, v68, v69);
                                let v1318 = constructor_put_in_xmm(ctx, v38.1);
                                let v1319 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1353 = constructor_x64_maxps(ctx, v1318, v1319);
                                let v1354 = &C::xmm_to_xmm_mem(ctx, v1353);
                                let v1355 = constructor_x64_xorps(ctx, v1352, v1354);
                                let v1356 = &C::xmm_to_xmm_mem(ctx, v1355);
                                let v1357 = constructor_x64_orps(ctx, v1352, v1356);
                                let v1358 = &C::xmm_to_xmm_mem(ctx, v1355);
                                let v1359 = constructor_x64_subps(ctx, v1357, v1358);
                                let v1360 = &C::xmm_to_xmm_mem(ctx, v1357);
                                let v1361 =
                                    constructor_x64_cmpps(ctx, v1357, v1360, &FcmpImm::Unordered);
                                let v1362 = &C::xmi_imm(ctx, 0xA);
                                let v1363 = constructor_x64_psrld(ctx, v1361, v1362);
                                let v1364 = &C::xmm_to_xmm_mem(ctx, v1359);
                                let v1365 = constructor_x64_andnps(ctx, v1363, v1364);
                                let v1366 = constructor_output_xmm(ctx, v1365);
                                // Rule at src/isa/x64/lower.isle line 2639.
                                return Some(v1366);
                            }
                            F64X2 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                let v1367 = constructor_x64_maxpd(ctx, v68, v69);
                                let v1318 = constructor_put_in_xmm(ctx, v38.1);
                                let v1319 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1368 = constructor_x64_maxpd(ctx, v1318, v1319);
                                let v1369 = &C::xmm_to_xmm_mem(ctx, v1368);
                                let v1370 = constructor_x64_xorpd(ctx, v1367, v1369);
                                let v1371 = &C::xmm_to_xmm_mem(ctx, v1370);
                                let v1372 = constructor_x64_orpd(ctx, v1367, v1371);
                                let v1373 = &C::xmm_to_xmm_mem(ctx, v1370);
                                let v1374 = constructor_x64_subpd(ctx, v1372, v1373);
                                let v1375 = &C::xmm_to_xmm_mem(ctx, v1372);
                                let v1376 =
                                    constructor_x64_cmppd(ctx, v1372, v1375, &FcmpImm::Unordered);
                                let v1377 = &C::xmi_imm(ctx, 0xD);
                                let v1378 = constructor_x64_psrlq(ctx, v1376, v1377);
                                let v1379 = &C::xmm_to_xmm_mem(ctx, v1374);
                                let v1380 = constructor_x64_andnpd(ctx, v1378, v1379);
                                let v1381 = constructor_output_xmm(ctx, v1380);
                                // Rule at src/isa/x64/lower.isle line 2682.
                                return Some(v1381);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2046 = C::value_type(ctx, v38.0);
                                if v2046 == I16X8 {
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2047 = constructor_x64_packsswb(ctx, v68, v69);
                                    let v2048 = constructor_output_xmm(ctx, v2047);
                                    // Rule at src/isa/x64/lower.isle line 3757.
                                    return Some(v2048);
                                }
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2046 = C::value_type(ctx, v38.0);
                                if v2046 == I32X4 {
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2049 = constructor_x64_packssdw(ctx, v68, v69);
                                    let v2050 = constructor_output_xmm(ctx, v2049);
                                    // Rule at src/isa/x64/lower.isle line 3760.
                                    return Some(v2050);
                                }
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    if let &InstructionData::UnaryConst {
                                        opcode: ref v2054,
                                        constant_handle: v2055,
                                    } = v173
                                    {
                                        if let &Opcode::Vconst = v2054 {
                                            let v180 = C::def_inst(ctx, v38.0);
                                            if let Some(v181) = v180 {
                                                let v182 = &C::inst_data(ctx, v181);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v183,
                                                    arg: v184,
                                                } = v182
                                                {
                                                    match v183 {
                                                        &Opcode::FcvtToSintSat => {
                                                            let v2051 = C::first_result(ctx, v181);
                                                            if let Some(v2052) = v2051 {
                                                                let v2053 =
                                                                    C::value_type(ctx, v2052);
                                                                if v2053 == I64X2 {
                                                                    let v2056 =
                                                                        C::u128_from_constant(
                                                                            ctx, v2055,
                                                                        );
                                                                    if let Some(v2057) = v2056 {
                                                                        if v2057 == 0x0 {
                                                                            let v185 = constructor_put_in_xmm(ctx, v184);
                                                                            let v2058 =
                                                                                &C::xmm_to_xmm_mem(
                                                                                    ctx, v185,
                                                                                );
                                                                            let v2059 = constructor_x64_cmppd(ctx, v185, v2058, &FcmpImm::Equal);
                                                                            let v2061 = C::emit_u128_le_const(ctx, 0x41DFFFFFFFC0000041DFFFFFFFC00000);
                                                                            let v2062 = &constructor_const_to_xmm_mem(ctx, v2061);
                                                                            let v2063 = constructor_x64_andps(ctx, v2059, v2062);
                                                                            let v2064 =
                                                                                &C::xmm_to_xmm_mem(
                                                                                    ctx, v2063,
                                                                                );
                                                                            let v2065 = constructor_x64_minpd(ctx, v185, v2064);
                                                                            let v2066 =
                                                                                &C::xmm_to_xmm_mem(
                                                                                    ctx, v2065,
                                                                                );
                                                                            let v2067 = constructor_x64_cvttpd2dq(ctx, v2066);
                                                                            let v2068 = constructor_output_xmm(ctx, v2067);
                                                                            // Rule at src/isa/x64/lower.isle line 3769.
                                                                            return Some(v2068);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::X86Cvtt2dq => {
                                                            let v2051 = C::first_result(ctx, v181);
                                                            if let Some(v2052) = v2051 {
                                                                let v2053 =
                                                                    C::value_type(ctx, v2052);
                                                                if v2053 == I64X2 {
                                                                    let v2056 =
                                                                        C::u128_from_constant(
                                                                            ctx, v2055,
                                                                        );
                                                                    if let Some(v2057) = v2056 {
                                                                        if v2057 == 0x0 {
                                                                            let v492 =
                                                                                &C::put_in_xmm_mem(
                                                                                    ctx, v184,
                                                                                );
                                                                            let v2069 = constructor_x64_cvttpd2dq(ctx, v492);
                                                                            let v2070 = constructor_output_xmm(ctx, v2069);
                                                                            // Rule at src/isa/x64/lower.isle line 3793.
                                                                            return Some(v2070);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2046 = C::value_type(ctx, v38.0);
                                if v2046 == I16X8 {
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v2071 = constructor_x64_packuswb(ctx, v68, v69);
                                    let v2072 = constructor_output_xmm(ctx, v2071);
                                    // Rule at src/isa/x64/lower.isle line 3799.
                                    return Some(v2072);
                                }
                            }
                            I16X8 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v2046 = C::value_type(ctx, v38.0);
                                if v2046 == I32X4 {
                                    let v434 = C::use_sse41(ctx);
                                    if v434 == true {
                                        let v68 = constructor_put_in_xmm(ctx, v38.0);
                                        let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                        let v2073 = constructor_x64_packusdw(ctx, v68, v69);
                                        let v2074 = constructor_output_xmm(ctx, v2073);
                                        // Rule at src/isa/x64/lower.isle line 3802.
                                        return Some(v2074);
                                    }
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v2075 =
                                        constructor_unarrow_i32x4_lanes_to_low_u16_lanes(ctx, v68);
                                    let v2076 = constructor_put_in_xmm(ctx, v38.1);
                                    let v2077 = constructor_unarrow_i32x4_lanes_to_low_u16_lanes(
                                        ctx, v2076,
                                    );
                                    let v2078 = &C::xmm_to_xmm_mem(ctx, v2077);
                                    let v2079 = constructor_x64_punpcklqdq(ctx, v2075, v2078);
                                    let v2080 = constructor_output_xmm(ctx, v2079);
                                    // Rule at src/isa/x64/lower.isle line 3812.
                                    return Some(v2080);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v171 = C::def_inst(ctx, v38.1);
                    if let Some(v172) = v171 {
                        let v173 = &C::inst_data(ctx, v172);
                        if let &InstructionData::UnaryConst {
                            opcode: ref v2054,
                            constant_handle: v2055,
                        } = v173
                        {
                            if let &Opcode::Vconst = v2054 {
                                let v180 = C::def_inst(ctx, v38.0);
                                if let Some(v181) = v180 {
                                    let v182 = &C::inst_data(ctx, v181);
                                    if let &InstructionData::Unary {
                                        opcode: ref v183,
                                        arg: v184,
                                    } = v182
                                    {
                                        if let &Opcode::FcvtToUintSat = v183 {
                                            let v474 = C::value_type(ctx, v184);
                                            if v474 == F64X2 {
                                                let v2056 = C::u128_from_constant(ctx, v2055);
                                                if let Some(v2057) = v2056 {
                                                    if v2057 == 0x0 {
                                                        let v185 =
                                                            constructor_put_in_xmm(ctx, v184);
                                                        let v2540 =
                                                            constructor_xmm_zero(ctx, F64X2);
                                                        let v2541 = &C::xmm_to_xmm_mem(ctx, v2540);
                                                        let v2542 =
                                                            constructor_x64_maxpd(ctx, v185, v2541);
                                                        let v2544 = C::emit_u128_le_const(
                                                            ctx,
                                                            0x41EFFFFFFFE0000041EFFFFFFFE00000,
                                                        );
                                                        let v2545 = &constructor_const_to_xmm_mem(
                                                            ctx, v2544,
                                                        );
                                                        let v2546 = constructor_x64_minpd(
                                                            ctx, v2542, v2545,
                                                        );
                                                        let v2547 = C::xmm_to_reg(ctx, v2546);
                                                        let v2548 =
                                                            &constructor_xmm_to_reg_mem(ctx, v2547);
                                                        let v2549 =
                                                            &C::xmm_mem_to_reg_mem(ctx, v2548);
                                                        let v2550 = constructor_x64_round(
                                                            ctx,
                                                            F64X2,
                                                            v2549,
                                                            &RoundImm::RoundZero,
                                                        );
                                                        let v2551 = C::emit_u128_le_const(
                                                            ctx,
                                                            0x43300000000000004330000000000000,
                                                        );
                                                        let v2552 = &constructor_const_to_xmm_mem(
                                                            ctx, v2551,
                                                        );
                                                        let v2553 = constructor_x64_addpd(
                                                            ctx, v2550, v2552,
                                                        );
                                                        let v2554 = &C::xmm_to_xmm_mem(ctx, v2540);
                                                        let v2555 = constructor_x64_shufps(
                                                            ctx, v2553, v2554, 0x88,
                                                        );
                                                        let v2556 =
                                                            constructor_output_xmm(ctx, v2555);
                                                        // Rule at src/isa/x64/lower.isle line 4646.
                                                        return Some(v2556);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v1895 =
                                    C::emit_u128_le_const(ctx, 0xFF00FF00FF00FF00FF00FF00FF00FF);
                                let v1896 = &constructor_const_to_xmm_mem(ctx, v1895);
                                let v1897 = constructor_x64_movdqu_load(ctx, v1896);
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v1898 = constructor_put_in_xmm(ctx, v38.0);
                                let v1899 = &C::xmm_to_xmm_mem(ctx, v1897);
                                let v1900 = constructor_x64_pand(ctx, v1898, v1899);
                                let v1901 = constructor_put_in_xmm(ctx, v38.1);
                                let v1902 = &C::xmm_to_xmm_mem(ctx, v1897);
                                let v1903 = constructor_x64_pand(ctx, v1901, v1902);
                                let v1904 = &C::xmm_to_xmm_mem(ctx, v1903);
                                let v1905 = constructor_x64_packuswb(ctx, v1900, v1904);
                                let v1906 = constructor_put_in_xmm(ctx, v38.0);
                                let v1908 = &C::xmi_imm(ctx, 0x8);
                                let v1909 = constructor_x64_psrlw(ctx, v1906, v1908);
                                let v1910 = constructor_put_in_xmm(ctx, v38.1);
                                let v1911 = &C::xmi_imm(ctx, 0x8);
                                let v1912 = constructor_x64_psrlw(ctx, v1910, v1911);
                                let v1913 = &C::xmm_to_xmm_mem(ctx, v1912);
                                let v1914 = constructor_x64_packuswb(ctx, v1909, v1913);
                                let v1915 = &C::xmm_to_xmm_mem(ctx, v1914);
                                let v1916 = constructor_x64_paddb(ctx, v1905, v1915);
                                let v1917 = constructor_output_xmm(ctx, v1916);
                                // Rule at src/isa/x64/lower.isle line 3546.
                                return Some(v1917);
                            }
                            I16X8 => {
                                let v518 = C::use_ssse3(ctx);
                                if v518 == true {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v171 = C::def_inst(ctx, v38.1);
                                    if let Some(v172) = v171 {
                                        let v173 = &C::inst_data(ctx, v172);
                                        if let &InstructionData::Unary {
                                            opcode: ref v174,
                                            arg: v175,
                                        } = v173
                                        {
                                            match v174 {
                                                &Opcode::SwidenHigh => {
                                                    let v180 = C::def_inst(ctx, v38.0);
                                                    if let Some(v181) = v180 {
                                                        let v182 = &C::inst_data(ctx, v181);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v183,
                                                            arg: v184,
                                                        } = v182
                                                        {
                                                            if let &Opcode::SwidenLow = v183 {
                                                                if v175 == v184 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    if v474 == I8X16 {
                                                                        let v1954 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101);
                                                                        let v1955 = constructor_x64_xmm_load_const(ctx, I8X16, v1954);
                                                                        let v1956 =
                                                                            &C::put_in_xmm_mem(
                                                                                ctx, v184,
                                                                            );
                                                                        let v1957 = constructor_x64_pmaddubsw(ctx, v1955, v1956);
                                                                        let v1958 =
                                                                            constructor_output_xmm(
                                                                                ctx, v1957,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3608.
                                                                        return Some(v1958);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v180 = C::def_inst(ctx, v38.0);
                                                    if let Some(v181) = v180 {
                                                        let v182 = &C::inst_data(ctx, v181);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v183,
                                                            arg: v184,
                                                        } = v182
                                                        {
                                                            if let &Opcode::UwidenLow = v183 {
                                                                if v175 == v184 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    if v474 == I8X16 {
                                                                        let v1954 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101);
                                                                        let v1965 = &constructor_const_to_xmm_mem(ctx, v1954);
                                                                        let v1962 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v184,
                                                                            );
                                                                        let v1966 = constructor_x64_pmaddubsw(ctx, v1962, v1965);
                                                                        let v1967 =
                                                                            constructor_output_xmm(
                                                                                ctx, v1966,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3626.
                                                                        return Some(v1967);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v1918 = constructor_x64_phaddw(ctx, v68, v69);
                                    let v1919 = constructor_output_xmm(ctx, v1918);
                                    // Rule at src/isa/x64/lower.isle line 3562.
                                    return Some(v1919);
                                }
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v437 = constructor_put_in_xmm(ctx, v38.1);
                                let v310 = &C::xmm_to_xmm_mem(ctx, v68);
                                let v1921 = constructor_x64_pshuflw(ctx, v310, 0xE8);
                                let v1922 = &C::xmm_to_xmm_mem(ctx, v1921);
                                let v1923 = constructor_x64_pshufhw(ctx, v1922, 0xE8);
                                let v1924 = &C::xmm_to_xmm_mem(ctx, v1923);
                                let v1925 = constructor_x64_pshufd(ctx, v1924, 0xE8);
                                let v1926 = &C::xmm_to_xmm_mem(ctx, v437);
                                let v1927 = constructor_x64_pshuflw(ctx, v1926, 0xE8);
                                let v1928 = &C::xmm_to_xmm_mem(ctx, v1927);
                                let v1929 = constructor_x64_pshufhw(ctx, v1928, 0xE8);
                                let v1930 = &C::xmm_to_xmm_mem(ctx, v1929);
                                let v1931 = constructor_x64_pshufd(ctx, v1930, 0xE8);
                                let v1932 = &C::xmm_to_xmm_mem(ctx, v1931);
                                let v1933 = constructor_x64_punpcklqdq(ctx, v1925, v1932);
                                let v1934 = &C::xmi_imm(ctx, 0x10);
                                let v1935 = constructor_x64_psrad(ctx, v68, v1934);
                                let v1936 = &C::xmi_imm(ctx, 0x10);
                                let v1937 = constructor_x64_psrad(ctx, v437, v1936);
                                let v1938 = &C::xmm_to_xmm_mem(ctx, v1937);
                                let v1939 = constructor_x64_packssdw(ctx, v1935, v1938);
                                let v1940 = &C::xmm_to_xmm_mem(ctx, v1939);
                                let v1941 = constructor_x64_paddw(ctx, v1933, v1940);
                                let v1942 = constructor_output_xmm(ctx, v1941);
                                // Rule at src/isa/x64/lower.isle line 3566.
                                return Some(v1942);
                            }
                            I32X4 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v171 = C::def_inst(ctx, v38.1);
                                if let Some(v172) = v171 {
                                    let v173 = &C::inst_data(ctx, v172);
                                    match v173 {
                                        &InstructionData::Binary {
                                            opcode: ref v211,
                                            args: ref v212,
                                        } => {
                                            if let &Opcode::Imul = v211 {
                                                let v180 = C::def_inst(ctx, v38.0);
                                                if let Some(v181) = v180 {
                                                    let v182 = &C::inst_data(ctx, v181);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v197,
                                                        args: ref v198,
                                                    } = v182
                                                    {
                                                        if let &Opcode::Imul = v197 {
                                                            let v199 =
                                                                C::unpack_value_array_2(ctx, v198);
                                                            let v202 = C::def_inst(ctx, v199.1);
                                                            if let Some(v203) = v202 {
                                                                let v204 = &C::inst_data(ctx, v203);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v1985,
                                                                    arg: v1986,
                                                                } = v204
                                                                {
                                                                    if let &Opcode::SwidenLow =
                                                                        v1985
                                                                    {
                                                                        let v213 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v212,
                                                                            );
                                                                        let v216 = C::def_inst(
                                                                            ctx, v213.1,
                                                                        );
                                                                        if let Some(v217) = v216 {
                                                                            let v218 =
                                                                                &C::inst_data(
                                                                                    ctx, v217,
                                                                                );
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v1992,
                                                                                arg: v1993,
                                                                            } = v218 {
                                                                                if let &Opcode::SwidenHigh = v1992 {
                                                                                    if v1986 == v1993 {
                                                                                        let v1980 = C::def_inst(ctx, v199.0);
                                                                                        if let Some(v1981) = v1980 {
                                                                                            let v1982 = &C::inst_data(ctx, v1981);
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v1983,
                                                                                                arg: v1984,
                                                                                            } = v1982 {
                                                                                                if let &Opcode::SwidenLow = v1983 {
                                                                                                    let v1987 = C::def_inst(ctx, v213.0);
                                                                                                    if let Some(v1988) = v1987 {
                                                                                                        let v1989 = &C::inst_data(ctx, v1988);
                                                                                                        if let &InstructionData::Unary {
                                                                                                            opcode: ref v1990,
                                                                                                            arg: v1991,
                                                                                                        } = v1989 {
                                                                                                            if let &Opcode::SwidenHigh = v1990 {
                                                                                                                if v1984 == v1991 {
                                                                                                                    let v1994 = constructor_put_in_xmm(ctx, v1984);
                                                                                                                    let v1995 = &C::put_in_xmm_mem(ctx, v1986);
                                                                                                                    let v1996 = constructor_x64_pmaddwd(ctx, v1994, v1995);
                                                                                                                    let v1997 = constructor_output_xmm(ctx, v1996);
                                                                                                                    // Rule at src/isa/x64/lower.isle line 3649.
                                                                                                                    return Some(v1997);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &InstructionData::Unary {
                                            opcode: ref v174,
                                            arg: v175,
                                        } => {
                                            match v174 {
                                                &Opcode::SwidenHigh => {
                                                    let v180 = C::def_inst(ctx, v38.0);
                                                    if let Some(v181) = v180 {
                                                        let v182 = &C::inst_data(ctx, v181);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v183,
                                                            arg: v184,
                                                        } = v182
                                                        {
                                                            if let &Opcode::SwidenLow = v183 {
                                                                if v175 == v184 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    if v474 == I16X8 {
                                                                        let v1960 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001);
                                                                        let v1961 = &constructor_const_to_xmm_mem(ctx, v1960);
                                                                        let v1962 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v184,
                                                                            );
                                                                        let v1963 =
                                                                            constructor_x64_pmaddwd(
                                                                                ctx, v1962, v1961,
                                                                            );
                                                                        let v1964 =
                                                                            constructor_output_xmm(
                                                                                ctx, v1963,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3618.
                                                                        return Some(v1964);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v180 = C::def_inst(ctx, v38.0);
                                                    if let Some(v181) = v180 {
                                                        let v182 = &C::inst_data(ctx, v181);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v183,
                                                            arg: v184,
                                                        } = v182
                                                        {
                                                            if let &Opcode::UwidenLow = v183 {
                                                                if v175 == v184 {
                                                                    let v474 =
                                                                        C::value_type(ctx, v184);
                                                                    if v474 == I16X8 {
                                                                        let v1969 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000);
                                                                        let v1970 = &constructor_const_to_xmm_mem(ctx, v1969);
                                                                        let v1962 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v184,
                                                                            );
                                                                        let v1971 =
                                                                            constructor_x64_pxor(
                                                                                ctx, v1962, v1970,
                                                                            );
                                                                        let v1972 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001);
                                                                        let v1973 = &constructor_const_to_xmm_mem(ctx, v1972);
                                                                        let v1974 =
                                                                            constructor_x64_pmaddwd(
                                                                                ctx, v1971, v1973,
                                                                            );
                                                                        let v1976 = C::emit_u128_le_const(ctx, 0x10000000100000001000000010000);
                                                                        let v1977 = &constructor_const_to_xmm_mem(ctx, v1976);
                                                                        let v1978 =
                                                                            constructor_x64_paddd(
                                                                                ctx, v1974, v1977,
                                                                            );
                                                                        let v1979 =
                                                                            constructor_output_xmm(
                                                                                ctx, v1978,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3635.
                                                                        return Some(v1979);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                let v518 = C::use_ssse3(ctx);
                                if v518 == true {
                                    let v68 = constructor_put_in_xmm(ctx, v38.0);
                                    let v69 = &C::put_in_xmm_mem(ctx, v38.1);
                                    let v1943 = constructor_x64_phaddd(ctx, v68, v69);
                                    let v1944 = constructor_output_xmm(ctx, v1943);
                                    // Rule at src/isa/x64/lower.isle line 3592.
                                    return Some(v1944);
                                }
                                let v68 = constructor_put_in_xmm(ctx, v38.0);
                                let v437 = constructor_put_in_xmm(ctx, v38.1);
                                let v1945 = &C::xmm_to_xmm_mem(ctx, v437);
                                let v1947 = constructor_x64_shufps(ctx, v68, v1945, 0x88);
                                let v440 = &C::xmm_to_xmm_mem(ctx, v437);
                                let v1949 = constructor_x64_shufps(ctx, v68, v440, 0xDD);
                                let v1950 = &C::xmm_to_xmm_mem(ctx, v1949);
                                let v1951 = constructor_x64_paddd(ctx, v1947, v1950);
                                let v1952 = constructor_output_xmm(ctx, v1951);
                                // Rule at src/isa/x64/lower.isle line 3596.
                                return Some(v1952);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::X86Pmaddubsw => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v518 = C::use_ssse3(ctx);
                            if v518 == true {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v1243 = constructor_put_in_xmm(ctx, v38.1);
                                let v177 = &C::put_in_xmm_mem(ctx, v38.0);
                                let v1244 = constructor_x64_pmaddubsw(ctx, v1243, v177);
                                let v1245 = constructor_output_xmm(ctx, v1244);
                                // Rule at src/isa/x64/lower.isle line 2461.
                                return Some(v1245);
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v38 = C::unpack_value_array_2(ctx, v37);
                    let v2046 = C::value_type(ctx, v38.0);
                    if v2046 == I64 {
                        let v2493 = C::put_in_reg(ctx, v38.0);
                        let v2494 = C::put_in_reg(ctx, v38.1);
                        let v2495 = C::value_regs(ctx, v2493, v2494);
                        let v2496 = C::output(ctx, v2495);
                        // Rule at src/isa/x64/lower.isle line 4562.
                        return Some(v2496);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v2330,
            arg: v2331,
            imm: v2332,
        } => {
            if let &Opcode::Extractlane = v2330 {
                if v2332 == 0x0 {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v2333 = constructor_output_value(ctx, v2331);
                            // Rule at src/isa/x64/lower.isle line 4325.
                            return Some(v2333);
                        }
                    }
                }
                let v2334 = C::value_type(ctx, v2331);
                match v2334 {
                    I8X16 => {
                        let v434 = C::use_sse41(ctx);
                        if v434 == true {
                            let v2341 = constructor_put_in_xmm(ctx, v2331);
                            let v2335 = C::u8_from_uimm8(ctx, v2332);
                            let v2342 = constructor_x64_pextrb(ctx, v2341, v2335);
                            let v2343 = constructor_output_gpr(ctx, v2342);
                            // Rule at src/isa/x64/lower.isle line 4340.
                            return Some(v2343);
                        }
                        let v2335 = C::u8_from_uimm8(ctx, v2332);
                        let v2344 = C::u8_and(ctx, v2335, 0x1);
                        match v2344 {
                            0x0 => {
                                let v2341 = constructor_put_in_xmm(ctx, v2331);
                                let v2345 = C::u8_shr(ctx, v2335, 0x1);
                                let v2346 = constructor_x64_pextrw(ctx, v2341, v2345);
                                let v2350 = constructor_output_gpr(ctx, v2346);
                                // Rule at src/isa/x64/lower.isle line 4351.
                                return Some(v2350);
                            }
                            0x1 => {
                                let v2341 = constructor_put_in_xmm(ctx, v2331);
                                let v2345 = C::u8_shr(ctx, v2335, 0x1);
                                let v2346 = constructor_x64_pextrw(ctx, v2341, v2345);
                                let v1198 = Imm8Reg::Imm8 { imm: 0x8 };
                                let v2347 = &C::imm8_reg_to_imm8_gpr(ctx, &v1198);
                                let v2348 = constructor_x64_shr(ctx, I16, v2346, v2347);
                                let v2349 = constructor_output_gpr(ctx, v2348);
                                // Rule at src/isa/x64/lower.isle line 4344.
                                return Some(v2349);
                            }
                            _ => {}
                        }
                    }
                    I16X8 => {
                        let v2341 = constructor_put_in_xmm(ctx, v2331);
                        let v2335 = C::u8_from_uimm8(ctx, v2332);
                        let v2351 = constructor_x64_pextrw(ctx, v2341, v2335);
                        let v2352 = constructor_output_gpr(ctx, v2351);
                        // Rule at src/isa/x64/lower.isle line 4356.
                        return Some(v2352);
                    }
                    I32X4 => {
                        let v434 = C::use_sse41(ctx);
                        if v434 == true {
                            let v2341 = constructor_put_in_xmm(ctx, v2331);
                            let v2335 = C::u8_from_uimm8(ctx, v2332);
                            let v2353 = constructor_x64_pextrd(ctx, v2341, v2335);
                            let v2354 = constructor_output_gpr(ctx, v2353);
                            // Rule at src/isa/x64/lower.isle line 4360.
                            return Some(v2354);
                        }
                        if v2332 == 0x0 {
                            let v2341 = constructor_put_in_xmm(ctx, v2331);
                            let v2355 = constructor_x64_movd_to_gpr(ctx, v2341);
                            let v2356 = constructor_output_gpr(ctx, v2355);
                            // Rule at src/isa/x64/lower.isle line 4363.
                            return Some(v2356);
                        }
                        let v2336 = &C::put_in_xmm_mem(ctx, v2331);
                        let v2335 = C::u8_from_uimm8(ctx, v2332);
                        let v2337 = constructor_x64_pshufd(ctx, v2336, v2335);
                        let v2357 = constructor_x64_movd_to_gpr(ctx, v2337);
                        let v2358 = constructor_output_gpr(ctx, v2357);
                        // Rule at src/isa/x64/lower.isle line 4365.
                        return Some(v2358);
                    }
                    I64X2 => {
                        let v434 = C::use_sse41(ctx);
                        if v434 == true {
                            let v2341 = constructor_put_in_xmm(ctx, v2331);
                            let v2335 = C::u8_from_uimm8(ctx, v2332);
                            let v2359 = constructor_x64_pextrq(ctx, v2341, v2335);
                            let v2360 = constructor_output_gpr(ctx, v2359);
                            // Rule at src/isa/x64/lower.isle line 4369.
                            return Some(v2360);
                        }
                        match v2332 {
                            0x0 => {
                                let v2341 = constructor_put_in_xmm(ctx, v2331);
                                let v2361 = constructor_x64_movq_to_gpr(ctx, v2341);
                                let v2362 = constructor_output_gpr(ctx, v2361);
                                // Rule at src/isa/x64/lower.isle line 4372.
                                return Some(v2362);
                            }
                            0x1 => {
                                let v2336 = &C::put_in_xmm_mem(ctx, v2331);
                                let v2363 = constructor_x64_pshufd(ctx, v2336, 0xE);
                                let v2364 = constructor_x64_movq_to_gpr(ctx, v2363);
                                let v2365 = constructor_output_gpr(ctx, v2364);
                                // Rule at src/isa/x64/lower.isle line 4374.
                                return Some(v2365);
                            }
                            _ => {}
                        }
                    }
                    F32X4 => {
                        let v2336 = &C::put_in_xmm_mem(ctx, v2331);
                        let v2335 = C::u8_from_uimm8(ctx, v2332);
                        let v2337 = constructor_x64_pshufd(ctx, v2336, v2335);
                        let v2338 = constructor_output_xmm(ctx, v2337);
                        // Rule at src/isa/x64/lower.isle line 4329.
                        return Some(v2338);
                    }
                    F64X2 => {
                        if v2332 == 0x1 {
                            let v2336 = &C::put_in_xmm_mem(ctx, v2331);
                            let v2339 = constructor_x64_pshufd(ctx, v2336, 0xEE);
                            let v2340 = constructor_output_xmm(ctx, v2339);
                            // Rule at src/isa/x64/lower.isle line 4333.
                            return Some(v2340);
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v1741,
            args: v1742,
            func_ref: v1743,
        } => {
            match v1741 {
                &Opcode::Call => {
                    let v1745 = C::func_ref_data(ctx, v1743);
                    let v1744 = C::value_list_slice(ctx, v1742);
                    let v1749 = C::gen_call(ctx, v1745.0, v1745.1, v1745.2, v1744);
                    // Rule at src/isa/x64/lower.isle line 3209.
                    return Some(v1749);
                }
                &Opcode::ReturnCall => {
                    let v1745 = C::func_ref_data(ctx, v1743);
                    let v1744 = C::value_list_slice(ctx, v1742);
                    let v1759 = C::gen_return_call(ctx, v1745.0, v1745.1, v1745.2, v1744);
                    // Rule at src/isa/x64/lower.isle line 3217.
                    return Some(v1759);
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1750,
            args: v1751,
            sig_ref: v1752,
        } => {
            match v1750 {
                &Opcode::CallIndirect => {
                    let v1753 = C::value_list_slice(ctx, v1751);
                    let v1754 = C::value_slice_unwrap(ctx, v1753);
                    if let Some(v1755) = v1754 {
                        let v1758 = C::gen_call_indirect(ctx, v1752, v1755.0, v1755.1);
                        // Rule at src/isa/x64/lower.isle line 3212.
                        return Some(v1758);
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1753 = C::value_list_slice(ctx, v1751);
                    let v1754 = C::value_slice_unwrap(ctx, v1753);
                    if let Some(v1755) = v1754 {
                        let v1760 = C::gen_return_call_indirect(ctx, v1752, v1755.0, v1755.1);
                        // Rule at src/isa/x64/lower.isle line 3220.
                        return Some(v1760);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v951,
            args: ref v952,
            cond: ref v953,
        } => {
            if let &Opcode::Fcmp = v951 {
                match v953 {
                    &FloatCC::Equal => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v965 = constructor_put_in_xmm(ctx, v954.0);
                            let v966 = &C::put_in_xmm_mem(ctx, v954.1);
                            let v968 = constructor_x64_cmpp(ctx, v964, v965, v966, &FcmpImm::Equal);
                            let v969 = constructor_output_xmm(ctx, v968);
                            // Rule at src/isa/x64/lower.isle line 1980.
                            return Some(v969);
                        }
                    }
                    &FloatCC::GreaterThan => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v991 = constructor_put_in_xmm(ctx, v954.1);
                            let v992 = &C::put_in_xmm_mem(ctx, v954.0);
                            let v993 =
                                constructor_x64_cmpp(ctx, v964, v991, v992, &FcmpImm::LessThan);
                            let v994 = constructor_output_xmm(ctx, v993);
                            // Rule at src/isa/x64/lower.isle line 2000.
                            return Some(v994);
                        }
                    }
                    &FloatCC::GreaterThanOrEqual => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v991 = constructor_put_in_xmm(ctx, v954.1);
                            let v992 = &C::put_in_xmm_mem(ctx, v954.0);
                            let v995 = constructor_x64_cmpp(
                                ctx,
                                v964,
                                v991,
                                v992,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v996 = constructor_output_xmm(ctx, v995);
                            // Rule at src/isa/x64/lower.isle line 2002.
                            return Some(v996);
                        }
                    }
                    &FloatCC::LessThan => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v965 = constructor_put_in_xmm(ctx, v954.0);
                            let v966 = &C::put_in_xmm_mem(ctx, v954.1);
                            let v974 =
                                constructor_x64_cmpp(ctx, v964, v965, v966, &FcmpImm::LessThan);
                            let v975 = constructor_output_xmm(ctx, v974);
                            // Rule at src/isa/x64/lower.isle line 1984.
                            return Some(v975);
                        }
                    }
                    &FloatCC::LessThanOrEqual => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v965 = constructor_put_in_xmm(ctx, v954.0);
                            let v966 = &C::put_in_xmm_mem(ctx, v954.1);
                            let v977 = constructor_x64_cmpp(
                                ctx,
                                v964,
                                v965,
                                v966,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v978 = constructor_output_xmm(ctx, v977);
                            // Rule at src/isa/x64/lower.isle line 1986.
                            return Some(v978);
                        }
                    }
                    &FloatCC::NotEqual => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v965 = constructor_put_in_xmm(ctx, v954.0);
                            let v966 = &C::put_in_xmm_mem(ctx, v954.1);
                            let v971 =
                                constructor_x64_cmpp(ctx, v964, v965, v966, &FcmpImm::NotEqual);
                            let v972 = constructor_output_xmm(ctx, v971);
                            // Rule at src/isa/x64/lower.isle line 1982.
                            return Some(v972);
                        }
                    }
                    &FloatCC::Ordered => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v965 = constructor_put_in_xmm(ctx, v954.0);
                            let v966 = &C::put_in_xmm_mem(ctx, v954.1);
                            let v980 =
                                constructor_x64_cmpp(ctx, v964, v965, v966, &FcmpImm::Ordered);
                            let v981 = constructor_output_xmm(ctx, v980);
                            // Rule at src/isa/x64/lower.isle line 1988.
                            return Some(v981);
                        }
                    }
                    &FloatCC::Unordered => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v965 = constructor_put_in_xmm(ctx, v954.0);
                            let v966 = &C::put_in_xmm_mem(ctx, v954.1);
                            let v983 =
                                constructor_x64_cmpp(ctx, v964, v965, v966, &FcmpImm::Unordered);
                            let v984 = constructor_output_xmm(ctx, v983);
                            // Rule at src/isa/x64/lower.isle line 1990.
                            return Some(v984);
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThan => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v965 = constructor_put_in_xmm(ctx, v954.0);
                            let v966 = &C::put_in_xmm_mem(ctx, v954.1);
                            let v986 = constructor_x64_cmpp(
                                ctx,
                                v964,
                                v965,
                                v966,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v987 = constructor_output_xmm(ctx, v986);
                            // Rule at src/isa/x64/lower.isle line 1992.
                            return Some(v987);
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThanOrEqual => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v965 = constructor_put_in_xmm(ctx, v954.0);
                            let v966 = &C::put_in_xmm_mem(ctx, v954.1);
                            let v989 = constructor_x64_cmpp(
                                ctx,
                                v964,
                                v965,
                                v966,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v990 = constructor_output_xmm(ctx, v989);
                            // Rule at src/isa/x64/lower.isle line 1994.
                            return Some(v990);
                        }
                    }
                    &FloatCC::UnorderedOrLessThan => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v991 = constructor_put_in_xmm(ctx, v954.1);
                            let v992 = &C::put_in_xmm_mem(ctx, v954.0);
                            let v997 = constructor_x64_cmpp(
                                ctx,
                                v964,
                                v991,
                                v992,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v998 = constructor_output_xmm(ctx, v997);
                            // Rule at src/isa/x64/lower.isle line 2004.
                            return Some(v998);
                        }
                    }
                    &FloatCC::UnorderedOrLessThanOrEqual => {
                        let v954 = C::unpack_value_array_2(ctx, v952);
                        let v957 = C::value_type(ctx, v954.0);
                        let v963 = C::ty_vec128(ctx, v957);
                        if let Some(v964) = v963 {
                            let v991 = constructor_put_in_xmm(ctx, v954.1);
                            let v992 = &C::put_in_xmm_mem(ctx, v954.0);
                            let v999 = constructor_x64_cmpp(
                                ctx,
                                v964,
                                v991,
                                v992,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v1000 = constructor_output_xmm(ctx, v999);
                            // Rule at src/isa/x64/lower.isle line 2006.
                            return Some(v1000);
                        }
                    }
                    _ => {}
                }
                let v954 = C::unpack_value_array_2(ctx, v952);
                let v957 = C::value_type(ctx, v954.0);
                let v958 = C::ty_scalar_float(ctx, v957);
                if let Some(v959) = v958 {
                    let v960 = &constructor_emit_fcmp(ctx, v953, v954.0, v954.1);
                    let v961 = constructor_lower_fcmp_bool(ctx, v960);
                    let v962 = C::output(ctx, v961);
                    // Rule at src/isa/x64/lower.isle line 1973.
                    return Some(v962);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1665,
            func_ref: v1666,
        } => {
            if let &Opcode::FuncAddr = v1665 {
                let v1667 = C::func_ref_data(ctx, v1666);
                let v1672 = constructor_load_ext_name(ctx, v1667.1, 0x0, v1667.2);
                let v1673 = constructor_output_reg(ctx, v1672);
                // Rule at src/isa/x64/lower.isle line 3151.
                return Some(v1673);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v785,
            args: ref v786,
            code: ref v787,
        } => {
            if let &Opcode::UaddOverflowTrap = v785 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v788 = C::unpack_value_array_2(ctx, v786);
                        let v804 = &C::sinkable_load(ctx, v788.0);
                        if let Some(v805) = v804 {
                            let v799 = constructor_put_in_gpr(ctx, v788.1);
                            let v806 = &constructor_sink_load_to_gpr_mem_imm(ctx, v805);
                            let v807 = &constructor_x64_add_with_flags_paired(ctx, v5, v799, v806);
                            let v794 = &constructor_trap_if(ctx, &CC::B, v787);
                            let v808 = constructor_with_flags(ctx, v807, v794);
                            let v809 = C::output(ctx, v808);
                            // Rule at src/isa/x64/lower.isle line 1761.
                            return Some(v809);
                        }
                        let v797 = &C::simm32_from_value(ctx, v788.0);
                        if let Some(v798) = v797 {
                            let v799 = constructor_put_in_gpr(ctx, v788.1);
                            let v800 = &constructor_x64_add_with_flags_paired(ctx, v5, v799, v798);
                            let v801 = &constructor_trap_if(ctx, &CC::B, v787);
                            let v802 = constructor_with_flags(ctx, v800, v801);
                            let v803 = C::output(ctx, v802);
                            // Rule at src/isa/x64/lower.isle line 1755.
                            return Some(v803);
                        }
                        let v791 = constructor_put_in_gpr(ctx, v788.0);
                        let v792 = &constructor_put_in_gpr_mem_imm(ctx, v788.1);
                        let v793 = &constructor_x64_add_with_flags_paired(ctx, v5, v791, v792);
                        let v794 = &constructor_trap_if(ctx, &CC::B, v787);
                        let v795 = constructor_with_flags(ctx, v793, v794);
                        let v796 = C::output(ctx, v795);
                        // Rule at src/isa/x64/lower.isle line 1747.
                        return Some(v796);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v814,
            args: ref v815,
            cond: ref v816,
        } => {
            if let &Opcode::Icmp = v814 {
                match v816 {
                    &IntCC::Equal => {
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v870 = constructor_put_in_xmm(ctx, v817.0);
                            let v871 = &C::put_in_xmm_mem(ctx, v817.1);
                            let v872 = constructor_x64_pcmpeq(ctx, v869, v870, v871);
                            let v873 = constructor_output_xmm(ctx, v872);
                            // Rule at src/isa/x64/lower.isle line 1823.
                            return Some(v873);
                        }
                    }
                    &IntCC::NotEqual => {
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v870 = constructor_put_in_xmm(ctx, v817.0);
                            let v871 = &C::put_in_xmm_mem(ctx, v817.1);
                            let v872 = constructor_x64_pcmpeq(ctx, v869, v870, v871);
                            let v874 = constructor_vector_all_ones(ctx);
                            let v875 = &C::xmm_to_xmm_mem(ctx, v874);
                            let v876 = constructor_x64_pxor(ctx, v872, v875);
                            let v877 = constructor_output_xmm(ctx, v876);
                            // Rule at src/isa/x64/lower.isle line 1828.
                            return Some(v877);
                        }
                    }
                    &IntCC::SignedGreaterThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v817 = C::unpack_value_array_2(ctx, v815);
                                let v838 = C::def_inst(ctx, v817.0);
                                if let Some(v839) = v838 {
                                    let v840 = &C::inst_data(ctx, v839);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v841,
                                        imm: v842,
                                    } = v840
                                    {
                                        if let &Opcode::Iconst = v841 {
                                            let v843 = C::u64_from_imm64(ctx, v842);
                                            if v843 == 0x0 {
                                                let v844 = C::value_type(ctx, v817.1);
                                                match v844 {
                                                    I32 => {
                                                        let v845 =
                                                            constructor_put_in_gpr(ctx, v817.1);
                                                        let v857 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v858 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v857);
                                                        let v861 = constructor_x64_shr(
                                                            ctx, I32, v845, v858,
                                                        );
                                                        let v862 =
                                                            constructor_output_gpr(ctx, v861);
                                                        // Rule at src/isa/x64/lower.isle line 1807.
                                                        return Some(v862);
                                                    }
                                                    I64 => {
                                                        let v845 =
                                                            constructor_put_in_gpr(ctx, v817.1);
                                                        let v834 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v835 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v834);
                                                        let v846 = constructor_x64_shr(
                                                            ctx, I64, v845, v835,
                                                        );
                                                        let v847 =
                                                            constructor_output_gpr(ctx, v846);
                                                        // Rule at src/isa/x64/lower.isle line 1791.
                                                        return Some(v847);
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v870 = constructor_put_in_xmm(ctx, v817.0);
                            let v871 = &C::put_in_xmm_mem(ctx, v817.1);
                            let v878 = constructor_x64_pcmpgt(ctx, v869, v870, v871);
                            let v879 = constructor_output_xmm(ctx, v878);
                            // Rule at src/isa/x64/lower.isle line 1835.
                            return Some(v879);
                        }
                    }
                    &IntCC::SignedGreaterThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v817 = C::unpack_value_array_2(ctx, v815);
                                let v820 = C::value_type(ctx, v817.0);
                                match v820 {
                                    I32 => {
                                        let v826 = C::def_inst(ctx, v817.1);
                                        if let Some(v827) = v826 {
                                            let v828 = &C::inst_data(ctx, v827);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v829,
                                                imm: v830,
                                            } = v828
                                            {
                                                if let &Opcode::Iconst = v829 {
                                                    let v831 = C::u64_from_imm64(ctx, v830);
                                                    if v831 == 0x0 {
                                                        let v832 =
                                                            constructor_put_in_gpr(ctx, v817.0);
                                                        let v852 =
                                                            constructor_x64_not(ctx, I64, v832);
                                                        let v857 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v863 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v857);
                                                        let v866 = constructor_x64_shr(
                                                            ctx, I32, v852, v863,
                                                        );
                                                        let v867 =
                                                            constructor_output_gpr(ctx, v866);
                                                        // Rule at src/isa/x64/lower.isle line 1815.
                                                        return Some(v867);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v826 = C::def_inst(ctx, v817.1);
                                        if let Some(v827) = v826 {
                                            let v828 = &C::inst_data(ctx, v827);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v829,
                                                imm: v830,
                                            } = v828
                                            {
                                                if let &Opcode::Iconst = v829 {
                                                    let v831 = C::u64_from_imm64(ctx, v830);
                                                    if v831 == 0x0 {
                                                        let v832 =
                                                            constructor_put_in_gpr(ctx, v817.0);
                                                        let v852 =
                                                            constructor_x64_not(ctx, I64, v832);
                                                        let v834 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v849 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v834);
                                                        let v853 = constructor_x64_shr(
                                                            ctx, I64, v852, v849,
                                                        );
                                                        let v854 =
                                                            constructor_output_gpr(ctx, v853);
                                                        // Rule at src/isa/x64/lower.isle line 1799.
                                                        return Some(v854);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v912 = constructor_has_pmaxs(ctx, v869);
                            if v912 == true {
                                let v870 = constructor_put_in_xmm(ctx, v817.0);
                                let v895 = constructor_put_in_xmm(ctx, v817.0);
                                let v913 = &C::put_in_xmm_mem(ctx, v817.1);
                                let v914 = constructor_x64_pmaxs(ctx, v869, v895, v913);
                                let v915 = &C::xmm_to_xmm_mem(ctx, v914);
                                let v916 = constructor_x64_pcmpeq(ctx, v869, v870, v915);
                                let v917 = constructor_output_xmm(ctx, v916);
                                // Rule at src/isa/x64/lower.isle line 1885.
                                return Some(v917);
                            }
                            let v880 = constructor_put_in_xmm(ctx, v817.1);
                            let v881 = &C::put_in_xmm_mem(ctx, v817.0);
                            let v882 = constructor_x64_pcmpgt(ctx, v869, v880, v881);
                            let v874 = constructor_vector_all_ones(ctx);
                            let v875 = &C::xmm_to_xmm_mem(ctx, v874);
                            let v918 = constructor_x64_pxor(ctx, v882, v875);
                            let v919 = constructor_output_xmm(ctx, v918);
                            // Rule at src/isa/x64/lower.isle line 1891.
                            return Some(v919);
                        }
                    }
                    &IntCC::SignedLessThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v817 = C::unpack_value_array_2(ctx, v815);
                                let v820 = C::value_type(ctx, v817.0);
                                match v820 {
                                    I32 => {
                                        let v826 = C::def_inst(ctx, v817.1);
                                        if let Some(v827) = v826 {
                                            let v828 = &C::inst_data(ctx, v827);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v829,
                                                imm: v830,
                                            } = v828
                                            {
                                                if let &Opcode::Iconst = v829 {
                                                    let v831 = C::u64_from_imm64(ctx, v830);
                                                    if v831 == 0x0 {
                                                        let v832 =
                                                            constructor_put_in_gpr(ctx, v817.0);
                                                        let v857 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v858 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v857);
                                                        let v859 = constructor_x64_shr(
                                                            ctx, I32, v832, v858,
                                                        );
                                                        let v860 =
                                                            constructor_output_gpr(ctx, v859);
                                                        // Rule at src/isa/x64/lower.isle line 1803.
                                                        return Some(v860);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v826 = C::def_inst(ctx, v817.1);
                                        if let Some(v827) = v826 {
                                            let v828 = &C::inst_data(ctx, v827);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v829,
                                                imm: v830,
                                            } = v828
                                            {
                                                if let &Opcode::Iconst = v829 {
                                                    let v831 = C::u64_from_imm64(ctx, v830);
                                                    if v831 == 0x0 {
                                                        let v832 =
                                                            constructor_put_in_gpr(ctx, v817.0);
                                                        let v834 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v835 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v834);
                                                        let v836 = constructor_x64_shr(
                                                            ctx, I64, v832, v835,
                                                        );
                                                        let v837 =
                                                            constructor_output_gpr(ctx, v836);
                                                        // Rule at src/isa/x64/lower.isle line 1787.
                                                        return Some(v837);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v880 = constructor_put_in_xmm(ctx, v817.1);
                            let v881 = &C::put_in_xmm_mem(ctx, v817.0);
                            let v882 = constructor_x64_pcmpgt(ctx, v869, v880, v881);
                            let v883 = constructor_output_xmm(ctx, v882);
                            // Rule at src/isa/x64/lower.isle line 1840.
                            return Some(v883);
                        }
                    }
                    &IntCC::SignedLessThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v817 = C::unpack_value_array_2(ctx, v815);
                                let v838 = C::def_inst(ctx, v817.0);
                                if let Some(v839) = v838 {
                                    let v840 = &C::inst_data(ctx, v839);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v841,
                                        imm: v842,
                                    } = v840
                                    {
                                        if let &Opcode::Iconst = v841 {
                                            let v843 = C::u64_from_imm64(ctx, v842);
                                            if v843 == 0x0 {
                                                let v844 = C::value_type(ctx, v817.1);
                                                match v844 {
                                                    I32 => {
                                                        let v845 =
                                                            constructor_put_in_gpr(ctx, v817.1);
                                                        let v848 =
                                                            constructor_x64_not(ctx, I64, v845);
                                                        let v857 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v863 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v857);
                                                        let v864 = constructor_x64_shr(
                                                            ctx, I32, v848, v863,
                                                        );
                                                        let v865 =
                                                            constructor_output_gpr(ctx, v864);
                                                        // Rule at src/isa/x64/lower.isle line 1811.
                                                        return Some(v865);
                                                    }
                                                    I64 => {
                                                        let v845 =
                                                            constructor_put_in_gpr(ctx, v817.1);
                                                        let v848 =
                                                            constructor_x64_not(ctx, I64, v845);
                                                        let v834 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v849 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v834);
                                                        let v850 = constructor_x64_shr(
                                                            ctx, I64, v848, v849,
                                                        );
                                                        let v851 =
                                                            constructor_output_gpr(ctx, v850);
                                                        // Rule at src/isa/x64/lower.isle line 1795.
                                                        return Some(v851);
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v920 = constructor_has_pmins(ctx, v869);
                            if v920 == true {
                                let v870 = constructor_put_in_xmm(ctx, v817.0);
                                let v895 = constructor_put_in_xmm(ctx, v817.0);
                                let v913 = &C::put_in_xmm_mem(ctx, v817.1);
                                let v921 = constructor_x64_pmins(ctx, v869, v895, v913);
                                let v922 = &C::xmm_to_xmm_mem(ctx, v921);
                                let v923 = constructor_x64_pcmpeq(ctx, v869, v870, v922);
                                let v924 = constructor_output_xmm(ctx, v923);
                                // Rule at src/isa/x64/lower.isle line 1897.
                                return Some(v924);
                            }
                            let v870 = constructor_put_in_xmm(ctx, v817.0);
                            let v871 = &C::put_in_xmm_mem(ctx, v817.1);
                            let v878 = constructor_x64_pcmpgt(ctx, v869, v870, v871);
                            let v874 = constructor_vector_all_ones(ctx);
                            let v875 = &C::xmm_to_xmm_mem(ctx, v874);
                            let v925 = constructor_x64_pxor(ctx, v878, v875);
                            let v926 = constructor_output_xmm(ctx, v925);
                            // Rule at src/isa/x64/lower.isle line 1902.
                            return Some(v926);
                        }
                    }
                    &IntCC::UnsignedGreaterThan => {
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v884 = constructor_has_pmaxu(ctx, v869);
                            if v884 == true {
                                let v870 = constructor_put_in_xmm(ctx, v817.0);
                                let v885 = constructor_put_in_xmm(ctx, v817.1);
                                let v886 = &C::xmm_to_xmm_mem(ctx, v885);
                                let v887 = constructor_x64_pmaxu(ctx, v869, v870, v886);
                                let v888 = &C::xmm_to_xmm_mem(ctx, v885);
                                let v889 = constructor_x64_pcmpeq(ctx, v869, v887, v888);
                                let v890 = constructor_vector_all_ones(ctx);
                                let v891 = &C::xmm_to_xmm_mem(ctx, v890);
                                let v892 = constructor_x64_pxor(ctx, v889, v891);
                                let v893 = constructor_output_xmm(ctx, v892);
                                // Rule at src/isa/x64/lower.isle line 1847.
                                return Some(v893);
                            }
                            let v894 = constructor_flip_high_bit_mask(ctx, v869);
                            let v895 = constructor_put_in_xmm(ctx, v817.0);
                            let v896 = &C::xmm_to_xmm_mem(ctx, v894);
                            let v897 = constructor_x64_pxor(ctx, v895, v896);
                            let v898 = constructor_put_in_xmm(ctx, v817.1);
                            let v899 = &C::xmm_to_xmm_mem(ctx, v894);
                            let v900 = constructor_x64_pxor(ctx, v898, v899);
                            let v901 = &C::xmm_to_xmm_mem(ctx, v900);
                            let v902 = constructor_x64_pcmpgt(ctx, v869, v897, v901);
                            let v903 = constructor_output_xmm(ctx, v902);
                            // Rule at src/isa/x64/lower.isle line 1857.
                            return Some(v903);
                        }
                    }
                    &IntCC::UnsignedGreaterThanOrEqual => {
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v884 = constructor_has_pmaxu(ctx, v869);
                            if v884 == true {
                                let v870 = constructor_put_in_xmm(ctx, v817.0);
                                let v895 = constructor_put_in_xmm(ctx, v817.0);
                                let v913 = &C::put_in_xmm_mem(ctx, v817.1);
                                let v927 = constructor_x64_pmaxu(ctx, v869, v895, v913);
                                let v928 = &C::xmm_to_xmm_mem(ctx, v927);
                                let v929 = constructor_x64_pcmpeq(ctx, v869, v870, v928);
                                let v930 = constructor_output_xmm(ctx, v929);
                                // Rule at src/isa/x64/lower.isle line 1907.
                                return Some(v930);
                            }
                        }
                        if v820 == I16X8 {
                            let v880 = constructor_put_in_xmm(ctx, v817.1);
                            let v881 = &C::put_in_xmm_mem(ctx, v817.0);
                            let v931 = constructor_x64_psubusw(ctx, v880, v881);
                            let v932 = constructor_xmm_zero(ctx, I16X8);
                            let v933 = &C::xmm_to_xmm_mem(ctx, v932);
                            let v934 = constructor_x64_pcmpeqw(ctx, v931, v933);
                            let v935 = constructor_output_xmm(ctx, v934);
                            // Rule at src/isa/x64/lower.isle line 1913.
                            return Some(v935);
                        }
                        if let Some(v869) = v868 {
                            let v894 = constructor_flip_high_bit_mask(ctx, v869);
                            let v895 = constructor_put_in_xmm(ctx, v817.0);
                            let v896 = &C::xmm_to_xmm_mem(ctx, v894);
                            let v897 = constructor_x64_pxor(ctx, v895, v896);
                            let v898 = constructor_put_in_xmm(ctx, v817.1);
                            let v899 = &C::xmm_to_xmm_mem(ctx, v894);
                            let v900 = constructor_x64_pxor(ctx, v898, v899);
                            let v909 = &C::xmm_to_xmm_mem(ctx, v897);
                            let v910 = constructor_x64_pcmpgt(ctx, v869, v900, v909);
                            let v936 = constructor_vector_all_ones(ctx);
                            let v937 = &C::xmm_to_xmm_mem(ctx, v936);
                            let v938 = constructor_x64_pxor(ctx, v910, v937);
                            let v939 = constructor_output_xmm(ctx, v938);
                            // Rule at src/isa/x64/lower.isle line 1919.
                            return Some(v939);
                        }
                    }
                    &IntCC::UnsignedLessThan => {
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v904 = constructor_has_pminu(ctx, v869);
                            if v904 == true {
                                let v870 = constructor_put_in_xmm(ctx, v817.0);
                                let v885 = constructor_put_in_xmm(ctx, v817.1);
                                let v886 = &C::xmm_to_xmm_mem(ctx, v885);
                                let v905 = constructor_x64_pminu(ctx, v869, v870, v886);
                                let v888 = &C::xmm_to_xmm_mem(ctx, v885);
                                let v906 = constructor_x64_pcmpeq(ctx, v869, v905, v888);
                                let v890 = constructor_vector_all_ones(ctx);
                                let v891 = &C::xmm_to_xmm_mem(ctx, v890);
                                let v907 = constructor_x64_pxor(ctx, v906, v891);
                                let v908 = constructor_output_xmm(ctx, v907);
                                // Rule at src/isa/x64/lower.isle line 1865.
                                return Some(v908);
                            }
                            let v894 = constructor_flip_high_bit_mask(ctx, v869);
                            let v895 = constructor_put_in_xmm(ctx, v817.0);
                            let v896 = &C::xmm_to_xmm_mem(ctx, v894);
                            let v897 = constructor_x64_pxor(ctx, v895, v896);
                            let v898 = constructor_put_in_xmm(ctx, v817.1);
                            let v899 = &C::xmm_to_xmm_mem(ctx, v894);
                            let v900 = constructor_x64_pxor(ctx, v898, v899);
                            let v909 = &C::xmm_to_xmm_mem(ctx, v897);
                            let v910 = constructor_x64_pcmpgt(ctx, v869, v900, v909);
                            let v911 = constructor_output_xmm(ctx, v910);
                            // Rule at src/isa/x64/lower.isle line 1876.
                            return Some(v911);
                        }
                    }
                    &IntCC::UnsignedLessThanOrEqual => {
                        let v817 = C::unpack_value_array_2(ctx, v815);
                        let v820 = C::value_type(ctx, v817.0);
                        let v868 = C::ty_vec128(ctx, v820);
                        if let Some(v869) = v868 {
                            let v904 = constructor_has_pminu(ctx, v869);
                            if v904 == true {
                                let v870 = constructor_put_in_xmm(ctx, v817.0);
                                let v895 = constructor_put_in_xmm(ctx, v817.0);
                                let v913 = &C::put_in_xmm_mem(ctx, v817.1);
                                let v940 = constructor_x64_pminu(ctx, v869, v895, v913);
                                let v941 = &C::xmm_to_xmm_mem(ctx, v940);
                                let v942 = constructor_x64_pcmpeq(ctx, v869, v870, v941);
                                let v943 = constructor_output_xmm(ctx, v942);
                                // Rule at src/isa/x64/lower.isle line 1930.
                                return Some(v943);
                            }
                        }
                        if v820 == I16X8 {
                            let v870 = constructor_put_in_xmm(ctx, v817.0);
                            let v871 = &C::put_in_xmm_mem(ctx, v817.1);
                            let v944 = constructor_x64_psubusw(ctx, v870, v871);
                            let v945 = constructor_xmm_zero(ctx, I8X16);
                            let v946 = &C::xmm_to_xmm_mem(ctx, v945);
                            let v947 = constructor_x64_pcmpeqw(ctx, v944, v946);
                            let v948 = constructor_output_xmm(ctx, v947);
                            // Rule at src/isa/x64/lower.isle line 1937.
                            return Some(v948);
                        }
                        if let Some(v869) = v868 {
                            let v894 = constructor_flip_high_bit_mask(ctx, v869);
                            let v895 = constructor_put_in_xmm(ctx, v817.0);
                            let v896 = &C::xmm_to_xmm_mem(ctx, v894);
                            let v897 = constructor_x64_pxor(ctx, v895, v896);
                            let v898 = constructor_put_in_xmm(ctx, v817.1);
                            let v899 = &C::xmm_to_xmm_mem(ctx, v894);
                            let v900 = constructor_x64_pxor(ctx, v898, v899);
                            let v901 = &C::xmm_to_xmm_mem(ctx, v900);
                            let v902 = constructor_x64_pcmpgt(ctx, v869, v897, v901);
                            let v936 = constructor_vector_all_ones(ctx);
                            let v937 = &C::xmm_to_xmm_mem(ctx, v936);
                            let v949 = constructor_x64_pxor(ctx, v902, v937);
                            let v950 = constructor_output_xmm(ctx, v949);
                            // Rule at src/isa/x64/lower.isle line 1945.
                            return Some(v950);
                        }
                    }
                    _ => {}
                }
                let v817 = C::unpack_value_array_2(ctx, v815);
                let v820 = C::value_type(ctx, v817.0);
                if v820 == I128 {
                    let v823 = &constructor_emit_cmp(ctx, v816, v817.0, v817.1);
                    let v824 = constructor_lower_icmp_bool(ctx, v823);
                    let v825 = C::output(ctx, v824);
                    // Rule at src/isa/x64/lower.isle line 1783.
                    return Some(v825);
                }
                let v821 = C::fits_in_64(ctx, v820);
                if let Some(v822) = v821 {
                    let v823 = &constructor_emit_cmp(ctx, v816, v817.0, v817.1);
                    let v824 = constructor_lower_icmp_bool(ctx, v823);
                    let v825 = C::output(ctx, v824);
                    // Rule at src/isa/x64/lower.isle line 1780.
                    return Some(v825);
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1470,
            arg: v1471,
            flags: v1472,
            offset: v1473,
        } => {
            match v1470 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1502 = &C::amode_to_synthetic_amode(ctx, v1483);
                                let v1503 = constructor_x64_movss_load(ctx, v1502);
                                let v1504 = constructor_output_xmm(ctx, v1503);
                                // Rule at src/isa/x64/lower.isle line 2840.
                                return Some(v1504);
                            }
                            F64 => {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1502 = &C::amode_to_synthetic_amode(ctx, v1483);
                                let v1505 = constructor_x64_movsd_load(ctx, v1502);
                                let v1506 = constructor_output_xmm(ctx, v1505);
                                // Rule at src/isa/x64/lower.isle line 2842.
                                return Some(v1506);
                            }
                            F32X4 => {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1502 = &C::amode_to_synthetic_amode(ctx, v1483);
                                let v1507 = constructor_x64_movups_load(ctx, v1502);
                                let v1508 = constructor_output_xmm(ctx, v1507);
                                // Rule at src/isa/x64/lower.isle line 2844.
                                return Some(v1508);
                            }
                            F64X2 => {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1502 = &C::amode_to_synthetic_amode(ctx, v1483);
                                let v1509 = constructor_x64_movupd_load(ctx, v1502);
                                let v1510 = constructor_output_xmm(ctx, v1509);
                                // Rule at src/isa/x64/lower.isle line 2846.
                                return Some(v1510);
                            }
                            _ => {}
                        }
                        let v1481 = C::ty_int_ref_64(ctx, v3);
                        if let Some(v1482) = v1481 {
                            let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                            let v1484 = constructor_x64_mov(ctx, v1483);
                            let v1485 = constructor_output_reg(ctx, v1484);
                            // Rule at src/isa/x64/lower.isle line 2818.
                            return Some(v1485);
                        }
                        let v734 = C::ty_vec128(ctx, v3);
                        if let Some(v735) = v734 {
                            let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                            let v1511 = &constructor_amode_to_xmm_mem(ctx, v1483);
                            let v1512 = constructor_x64_movdqu_load(ctx, v1511);
                            let v1513 = constructor_output_xmm(ctx, v1512);
                            // Rule at src/isa/x64/lower.isle line 2848.
                            return Some(v1513);
                        }
                        if v3 == I128 {
                            let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                            let v1515 = &C::amode_offset(ctx, v1483, 0x8);
                            let v1516 = constructor_x64_mov(ctx, v1483);
                            let v1517 = constructor_x64_mov(ctx, v1515);
                            let v1518 = C::value_regs(ctx, v1516, v1517);
                            let v1519 = C::output(ctx, v1518);
                            // Rule at src/isa/x64/lower.isle line 2852.
                            return Some(v1519);
                        }
                        let v1227 = C::fits_in_32(ctx, v3);
                        if let Some(v1228) = v1227 {
                            let v1467 = &C::type_register_class(ctx, v3);
                            if let Some(v1468) = v1467 {
                                if let &RegisterClass::Gpr {
                                    single_register: v1469,
                                } = v1468
                                {
                                    let v1474 = C::ty_bits_u16(ctx, v1228);
                                    let v1476 = &C::ext_mode(ctx, v1474, 0x40);
                                    let v1477 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                    let v1478 = &constructor_amode_to_gpr_mem(ctx, v1477);
                                    let v1479 = constructor_x64_movzx(ctx, v1476, v1478);
                                    let v1480 = constructor_output_gpr(ctx, v1479);
                                    // Rule at src/isa/x64/lower.isle line 2814.
                                    return Some(v1480);
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1467 = &C::type_register_class(ctx, v3);
                        if let Some(v1468) = v1467 {
                            if let &RegisterClass::Gpr {
                                single_register: v1469,
                            } = v1468
                            {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                                let v1488 = constructor_x64_movzx(ctx, &ExtMode::BQ, v1487);
                                let v1489 = constructor_output_gpr(ctx, v1488);
                                // Rule at src/isa/x64/lower.isle line 2823.
                                return Some(v1489);
                            }
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1467 = &C::type_register_class(ctx, v3);
                        if let Some(v1468) = v1467 {
                            if let &RegisterClass::Gpr {
                                single_register: v1469,
                            } = v1468
                            {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                                let v1490 = constructor_x64_movsx(ctx, &ExtMode::BQ, v1487);
                                let v1491 = constructor_output_gpr(ctx, v1490);
                                // Rule at src/isa/x64/lower.isle line 2825.
                                return Some(v1491);
                            }
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1467 = &C::type_register_class(ctx, v3);
                        if let Some(v1468) = v1467 {
                            if let &RegisterClass::Gpr {
                                single_register: v1469,
                            } = v1468
                            {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                                let v1493 = constructor_x64_movzx(ctx, &ExtMode::WQ, v1487);
                                let v1494 = constructor_output_gpr(ctx, v1493);
                                // Rule at src/isa/x64/lower.isle line 2827.
                                return Some(v1494);
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1467 = &C::type_register_class(ctx, v3);
                        if let Some(v1468) = v1467 {
                            if let &RegisterClass::Gpr {
                                single_register: v1469,
                            } = v1468
                            {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                                let v1495 = constructor_x64_movsx(ctx, &ExtMode::WQ, v1487);
                                let v1496 = constructor_output_gpr(ctx, v1495);
                                // Rule at src/isa/x64/lower.isle line 2829.
                                return Some(v1496);
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1467 = &C::type_register_class(ctx, v3);
                        if let Some(v1468) = v1467 {
                            if let &RegisterClass::Gpr {
                                single_register: v1469,
                            } = v1468
                            {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                                let v1498 = constructor_x64_movzx(ctx, &ExtMode::LQ, v1487);
                                let v1499 = constructor_output_gpr(ctx, v1498);
                                // Rule at src/isa/x64/lower.isle line 2831.
                                return Some(v1499);
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1467 = &C::type_register_class(ctx, v3);
                        if let Some(v1468) = v1467 {
                            if let &RegisterClass::Gpr {
                                single_register: v1469,
                            } = v1468
                            {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                                let v1500 = constructor_x64_movsx(ctx, &ExtMode::LQ, v1487);
                                let v1501 = constructor_output_gpr(ctx, v1500);
                                // Rule at src/isa/x64/lower.isle line 2833.
                                return Some(v1501);
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v434 = C::use_sse41(ctx);
                            if v434 == true {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1511 = &constructor_amode_to_xmm_mem(ctx, v1483);
                                let v1522 = constructor_x64_pmovzxbw(ctx, v1511);
                                let v1523 = constructor_output_xmm(ctx, v1522);
                                // Rule at src/isa/x64/lower.isle line 2865.
                                return Some(v1523);
                            }
                            let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                            let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                            let v1532 = constructor_x64_movq_to_xmm(ctx, v1487);
                            let v1535 = constructor_lower_uwiden_low(ctx, I16X8, v1532);
                            let v1536 = constructor_output_xmm(ctx, v1535);
                            // Rule at src/isa/x64/lower.isle line 2883.
                            return Some(v1536);
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v434 = C::use_sse41(ctx);
                            if v434 == true {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1511 = &constructor_amode_to_xmm_mem(ctx, v1483);
                                let v1520 = constructor_x64_pmovsxbw(ctx, v1511);
                                let v1521 = constructor_output_xmm(ctx, v1520);
                                // Rule at src/isa/x64/lower.isle line 2862.
                                return Some(v1521);
                            }
                            let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                            let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                            let v1532 = constructor_x64_movq_to_xmm(ctx, v1487);
                            let v1533 = constructor_lower_swiden_low(ctx, I16X8, v1532);
                            let v1534 = constructor_output_xmm(ctx, v1533);
                            // Rule at src/isa/x64/lower.isle line 2881.
                            return Some(v1534);
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v434 = C::use_sse41(ctx);
                            if v434 == true {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1511 = &constructor_amode_to_xmm_mem(ctx, v1483);
                                let v1526 = constructor_x64_pmovzxwd(ctx, v1511);
                                let v1527 = constructor_output_xmm(ctx, v1526);
                                // Rule at src/isa/x64/lower.isle line 2871.
                                return Some(v1527);
                            }
                            let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                            let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                            let v1532 = constructor_x64_movq_to_xmm(ctx, v1487);
                            let v1539 = constructor_lower_uwiden_low(ctx, I32X4, v1532);
                            let v1540 = constructor_output_xmm(ctx, v1539);
                            // Rule at src/isa/x64/lower.isle line 2887.
                            return Some(v1540);
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v434 = C::use_sse41(ctx);
                            if v434 == true {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1511 = &constructor_amode_to_xmm_mem(ctx, v1483);
                                let v1524 = constructor_x64_pmovsxwd(ctx, v1511);
                                let v1525 = constructor_output_xmm(ctx, v1524);
                                // Rule at src/isa/x64/lower.isle line 2868.
                                return Some(v1525);
                            }
                            let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                            let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                            let v1532 = constructor_x64_movq_to_xmm(ctx, v1487);
                            let v1537 = constructor_lower_swiden_low(ctx, I32X4, v1532);
                            let v1538 = constructor_output_xmm(ctx, v1537);
                            // Rule at src/isa/x64/lower.isle line 2885.
                            return Some(v1538);
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v434 = C::use_sse41(ctx);
                            if v434 == true {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1511 = &constructor_amode_to_xmm_mem(ctx, v1483);
                                let v1530 = constructor_x64_pmovzxdq(ctx, v1511);
                                let v1531 = constructor_output_xmm(ctx, v1530);
                                // Rule at src/isa/x64/lower.isle line 2877.
                                return Some(v1531);
                            }
                            let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                            let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                            let v1532 = constructor_x64_movq_to_xmm(ctx, v1487);
                            let v1543 = constructor_lower_uwiden_low(ctx, I64X2, v1532);
                            let v1544 = constructor_output_xmm(ctx, v1543);
                            // Rule at src/isa/x64/lower.isle line 2891.
                            return Some(v1544);
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v434 = C::use_sse41(ctx);
                            if v434 == true {
                                let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                                let v1511 = &constructor_amode_to_xmm_mem(ctx, v1483);
                                let v1528 = constructor_x64_pmovsxdq(ctx, v1511);
                                let v1529 = constructor_output_xmm(ctx, v1528);
                                // Rule at src/isa/x64/lower.isle line 2874.
                                return Some(v1529);
                            }
                            let v1483 = &constructor_to_amode(ctx, v1472, v1471, v1473);
                            let v1487 = &constructor_amode_to_gpr_mem(ctx, v1483);
                            let v1532 = constructor_x64_movq_to_xmm(ctx, v1487);
                            let v1541 = constructor_lower_swiden_low(ctx, I64X2, v1532);
                            let v1542 = constructor_output_xmm(ctx, v1541);
                            // Rule at src/isa/x64/lower.isle line 2889.
                            return Some(v1542);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1683,
            arg: v1684,
            flags: v1685,
        } => {
            match v1683 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1467 = &C::type_register_class(ctx, v3);
                        if let Some(v1468) = v1467 {
                            match v1468 {
                                &RegisterClass::Gpr {
                                    single_register: v1469,
                                } => {
                                    let v2081 = C::value_type(ctx, v1684);
                                    let v2092 = &C::type_register_class(ctx, v2081);
                                    if let Some(v2093) = v2092 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v2094,
                                        } = v2093
                                        {
                                            let v2095 = constructor_output_value(ctx, v1684);
                                            // Rule at src/isa/x64/lower.isle line 3862.
                                            return Some(v2095);
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    let v2081 = C::value_type(ctx, v1684);
                                    let v2092 = &C::type_register_class(ctx, v2081);
                                    if let Some(v2093) = v2092 {
                                        if let &RegisterClass::Xmm = v2093 {
                                            let v2095 = constructor_output_value(ctx, v1684);
                                            // Rule at src/isa/x64/lower.isle line 3866.
                                            return Some(v2095);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I32 => {
                                let v2081 = C::value_type(ctx, v1684);
                                if v2081 == F32 {
                                    let v2082 = constructor_put_in_xmm(ctx, v1684);
                                    let v2083 = constructor_bitcast_xmm_to_gpr(ctx, F32, v2082);
                                    let v2084 = constructor_output_gpr(ctx, v2083);
                                    // Rule at src/isa/x64/lower.isle line 3849.
                                    return Some(v2084);
                                }
                            }
                            I64 => {
                                let v2081 = C::value_type(ctx, v1684);
                                if v2081 == F64 {
                                    let v2082 = constructor_put_in_xmm(ctx, v1684);
                                    let v2088 = constructor_bitcast_xmm_to_gpr(ctx, F64, v2082);
                                    let v2089 = constructor_output_gpr(ctx, v2088);
                                    // Rule at src/isa/x64/lower.isle line 3855.
                                    return Some(v2089);
                                }
                            }
                            F32 => {
                                let v2081 = C::value_type(ctx, v1684);
                                if v2081 == I32 {
                                    let v2085 = constructor_put_in_gpr(ctx, v1684);
                                    let v2086 = constructor_bitcast_gpr_to_xmm(ctx, I32, v2085);
                                    let v2087 = constructor_output_xmm(ctx, v2086);
                                    // Rule at src/isa/x64/lower.isle line 3852.
                                    return Some(v2087);
                                }
                            }
                            F64 => {
                                let v2081 = C::value_type(ctx, v1684);
                                if v2081 == I64 {
                                    let v2085 = constructor_put_in_gpr(ctx, v1684);
                                    let v2090 = constructor_bitcast_gpr_to_xmm(ctx, I64, v2085);
                                    let v2091 = constructor_output_xmm(ctx, v2090);
                                    // Rule at src/isa/x64/lower.isle line 3858.
                                    return Some(v2091);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v48 = C::zero_offset(ctx);
                            let v1686 = &constructor_to_amode(ctx, v1685, v1684, v48);
                            let v1687 = constructor_x64_mov(ctx, v1686);
                            let v1688 = constructor_output_reg(ctx, v1687);
                            // Rule at src/isa/x64/lower.isle line 3168.
                            return Some(v1688);
                        }
                        let v1227 = C::fits_in_32(ctx, v3);
                        if let Some(v1228) = v1227 {
                            let v1689 = C::ty_int(ctx, v3);
                            if let Some(v1690) = v1689 {
                                let v1474 = C::ty_bits_u16(ctx, v1228);
                                let v1476 = &C::ext_mode(ctx, v1474, 0x40);
                                let v1691 = C::zero_offset(ctx);
                                let v1692 = &constructor_to_amode(ctx, v1685, v1684, v1691);
                                let v1693 = &constructor_amode_to_gpr_mem(ctx, v1692);
                                let v1694 = constructor_x64_movzx(ctx, v1476, v1693);
                                let v1695 = constructor_output_gpr(ctx, v1694);
                                // Rule at src/isa/x64/lower.isle line 3170.
                                return Some(v1695);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v810,
            args: v811,
        } => {
            if let &Opcode::Return = v810 {
                let v812 = C::value_list_slice(ctx, v811);
                let v813 = constructor_lower_return(ctx, v812);
                // Rule at src/isa/x64/lower.isle line 1775.
                return Some(v813);
            }
        }
        &InstructionData::NullAry { opcode: ref v31 } => {
            match v31 {
                &Opcode::Debugtrap => {
                    let v1241 = &constructor_x64_hlt(ctx);
                    let v1242 = constructor_side_effect(ctx, v1241);
                    // Rule at src/isa/x64/lower.isle line 2456.
                    return Some(v1242);
                }
                &Opcode::GetPinnedReg => {
                    let v2204 = constructor_read_pinned_gpr(ctx);
                    let v2205 = constructor_output_gpr(ctx, v2204);
                    // Rule at src/isa/x64/lower.isle line 4127.
                    return Some(v2205);
                }
                &Opcode::GetFramePointer => {
                    let v1761 = constructor_x64_rbp(ctx);
                    let v1762 = constructor_output_reg(ctx, v1761);
                    // Rule at src/isa/x64/lower.isle line 3225.
                    return Some(v1762);
                }
                &Opcode::GetStackPointer => {
                    let v1763 = constructor_x64_rsp(ctx);
                    let v1764 = constructor_output_reg(ctx, v1763);
                    // Rule at src/isa/x64/lower.isle line 3228.
                    return Some(v1764);
                }
                &Opcode::GetReturnAddress => {
                    let v1761 = constructor_x64_rbp(ctx);
                    let v47 = C::mem_flags_trusted(ctx);
                    let v1765 = Amode::ImmReg {
                        simm32: 0x8,
                        base: v1761,
                        flags: v47,
                    };
                    let v1766 = &C::amode_to_synthetic_amode(ctx, &v1765);
                    let v1767 = constructor_x64_load(ctx, I64, v1766, &ExtKind::None);
                    let v1768 = constructor_output_reg(ctx, v1767);
                    // Rule at src/isa/x64/lower.isle line 3231.
                    return Some(v1768);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = constructor_imm(ctx, v3, 0x0);
                        let v33 = constructor_output_reg(ctx, v32);
                        // Rule at src/isa/x64/lower.isle line 37.
                        return Some(v33);
                    }
                }
                &Opcode::Nop => {
                    let v2557 = C::invalid_reg(ctx);
                    let v2558 = constructor_output_reg(ctx, v2557);
                    // Rule at src/isa/x64/lower.isle line 4674.
                    return Some(v2558);
                }
                &Opcode::Fence => {
                    let v1663 = &constructor_x64_mfence(ctx);
                    let v1664 = constructor_side_effect(ctx, v1663);
                    // Rule at src/isa/x64/lower.isle line 3146.
                    return Some(v1664);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v2213,
            args: ref v2214,
            imm: v2215,
        } => {
            if let &Opcode::Shuffle = v2213 {
                let v434 = C::use_sse41(ctx);
                if v434 == true {
                    let v2219 = C::pblendw_imm(ctx, v2215);
                    if let Some(v2220) = v2219 {
                        let v2216 = C::unpack_value_array_2(ctx, v2214);
                        let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                        let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                        let v2223 = constructor_x64_pblendw(ctx, v2221, v2222, v2220);
                        let v2224 = constructor_output_xmm(ctx, v2223);
                        // Rule at src/isa/x64/lower.isle line 4147.
                        return Some(v2224);
                    }
                }
                let v518 = C::use_ssse3(ctx);
                if v518 == true {
                    let v2225 = C::palignr_imm_from_immediate(ctx, v2215);
                    if let Some(v2226) = v2225 {
                        let v2216 = C::unpack_value_array_2(ctx, v2214);
                        let v2227 = constructor_put_in_xmm(ctx, v2216.1);
                        let v2228 = &C::put_in_xmm_mem(ctx, v2216.0);
                        let v2229 = constructor_x64_palignr(ctx, v2227, v2228, v2226);
                        let v2230 = constructor_output_xmm(ctx, v2229);
                        // Rule at src/isa/x64/lower.isle line 4158.
                        return Some(v2230);
                    }
                }
                let v2231 = C::pshuflw_lhs_imm(ctx, v2215);
                if let Some(v2232) = v2231 {
                    let v2216 = C::unpack_value_array_2(ctx, v2214);
                    let v2233 = &C::put_in_xmm_mem(ctx, v2216.0);
                    let v2234 = constructor_x64_pshuflw(ctx, v2233, v2232);
                    let v2235 = constructor_output_xmm(ctx, v2234);
                    // Rule at src/isa/x64/lower.isle line 4170.
                    return Some(v2235);
                }
                let v2236 = C::pshuflw_rhs_imm(ctx, v2215);
                if let Some(v2237) = v2236 {
                    let v2216 = C::unpack_value_array_2(ctx, v2214);
                    let v2238 = &C::put_in_xmm_mem(ctx, v2216.1);
                    let v2239 = constructor_x64_pshuflw(ctx, v2238, v2237);
                    let v2240 = constructor_output_xmm(ctx, v2239);
                    // Rule at src/isa/x64/lower.isle line 4172.
                    return Some(v2240);
                }
                let v2241 = C::pshufhw_lhs_imm(ctx, v2215);
                if let Some(v2242) = v2241 {
                    let v2216 = C::unpack_value_array_2(ctx, v2214);
                    let v2233 = &C::put_in_xmm_mem(ctx, v2216.0);
                    let v2243 = constructor_x64_pshufhw(ctx, v2233, v2242);
                    let v2244 = constructor_output_xmm(ctx, v2243);
                    // Rule at src/isa/x64/lower.isle line 4174.
                    return Some(v2244);
                }
                let v2245 = C::pshufhw_rhs_imm(ctx, v2215);
                if let Some(v2246) = v2245 {
                    let v2216 = C::unpack_value_array_2(ctx, v2214);
                    let v2238 = &C::put_in_xmm_mem(ctx, v2216.1);
                    let v2247 = constructor_x64_pshufhw(ctx, v2238, v2246);
                    let v2248 = constructor_output_xmm(ctx, v2247);
                    // Rule at src/isa/x64/lower.isle line 4176.
                    return Some(v2248);
                }
                let v2249 = C::pshufd_lhs_imm(ctx, v2215);
                if let Some(v2250) = v2249 {
                    let v2216 = C::unpack_value_array_2(ctx, v2214);
                    let v2233 = &C::put_in_xmm_mem(ctx, v2216.0);
                    let v2251 = constructor_x64_pshufd(ctx, v2233, v2250);
                    let v2252 = constructor_output_xmm(ctx, v2251);
                    // Rule at src/isa/x64/lower.isle line 4193.
                    return Some(v2252);
                }
                let v2253 = C::pshufd_rhs_imm(ctx, v2215);
                if let Some(v2254) = v2253 {
                    let v2216 = C::unpack_value_array_2(ctx, v2214);
                    let v2238 = &C::put_in_xmm_mem(ctx, v2216.1);
                    let v2255 = constructor_x64_pshufd(ctx, v2238, v2254);
                    let v2256 = constructor_output_xmm(ctx, v2255);
                    // Rule at src/isa/x64/lower.isle line 4195.
                    return Some(v2256);
                }
                let v2257 = C::u128_from_immediate(ctx, v2215);
                if let Some(v2258) = v2257 {
                    match v2258 {
                        0x0 => {
                            if v518 == true {
                                let v2216 = C::unpack_value_array_2(ctx, v2214);
                                let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                                let v523 = constructor_xmm_zero(ctx, I8X16);
                                let v2039 = &C::xmm_to_xmm_mem(ctx, v523);
                                let v2275 = constructor_x64_pshufb(ctx, v2221, v2039);
                                let v2276 = constructor_output_xmm(ctx, v2275);
                                // Rule at src/isa/x64/lower.isle line 4232.
                                return Some(v2276);
                            }
                        }
                        0x17071606150514041303120211011000 => {
                            let v2216 = C::unpack_value_array_2(ctx, v2214);
                            let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                            let v2261 = constructor_x64_punpcklbw(ctx, v2221, v2222);
                            let v2262 = constructor_output_xmm(ctx, v2261);
                            // Rule at src/isa/x64/lower.isle line 4206.
                            return Some(v2262);
                        }
                        0x17160706151405041312030211100100 => {
                            let v2216 = C::unpack_value_array_2(ctx, v2214);
                            let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                            let v2265 = constructor_x64_punpcklwd(ctx, v2221, v2222);
                            let v2266 = constructor_output_xmm(ctx, v2265);
                            // Rule at src/isa/x64/lower.isle line 4212.
                            return Some(v2266);
                        }
                        0x17161514070605041312111003020100 => {
                            let v2216 = C::unpack_value_array_2(ctx, v2214);
                            let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                            let v2269 = constructor_x64_punpckldq(ctx, v2221, v2222);
                            let v2270 = constructor_output_xmm(ctx, v2269);
                            // Rule at src/isa/x64/lower.isle line 4218.
                            return Some(v2270);
                        }
                        0x17161514131211100706050403020100 => {
                            let v2216 = C::unpack_value_array_2(ctx, v2214);
                            let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                            let v2273 = constructor_x64_punpcklqdq(ctx, v2221, v2222);
                            let v2274 = constructor_output_xmm(ctx, v2273);
                            // Rule at src/isa/x64/lower.isle line 4224.
                            return Some(v2274);
                        }
                        0x1F0F1E0E1D0D1C0C1B0B1A0A19091808 => {
                            let v2216 = C::unpack_value_array_2(ctx, v2214);
                            let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                            let v2259 = constructor_x64_punpckhbw(ctx, v2221, v2222);
                            let v2260 = constructor_output_xmm(ctx, v2259);
                            // Rule at src/isa/x64/lower.isle line 4204.
                            return Some(v2260);
                        }
                        0x1F1E0F0E1D1C0D0C1B1A0B0A19180908 => {
                            let v2216 = C::unpack_value_array_2(ctx, v2214);
                            let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                            let v2263 = constructor_x64_punpckhwd(ctx, v2221, v2222);
                            let v2264 = constructor_output_xmm(ctx, v2263);
                            // Rule at src/isa/x64/lower.isle line 4210.
                            return Some(v2264);
                        }
                        0x1F1E1D1C0F0E0D0C1B1A19180B0A0908 => {
                            let v2216 = C::unpack_value_array_2(ctx, v2214);
                            let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                            let v2267 = constructor_x64_punpckhdq(ctx, v2221, v2222);
                            let v2268 = constructor_output_xmm(ctx, v2267);
                            // Rule at src/isa/x64/lower.isle line 4216.
                            return Some(v2268);
                        }
                        0x1F1E1D1C1B1A19180F0E0D0C0B0A0908 => {
                            let v2216 = C::unpack_value_array_2(ctx, v2214);
                            let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                            let v2271 = constructor_x64_punpckhqdq(ctx, v2221, v2222);
                            let v2272 = constructor_output_xmm(ctx, v2271);
                            // Rule at src/isa/x64/lower.isle line 4222.
                            return Some(v2272);
                        }
                        _ => {}
                    }
                }
                let v2277 = C::shufps_imm(ctx, v2215);
                if let Some(v2278) = v2277 {
                    let v2216 = C::unpack_value_array_2(ctx, v2214);
                    let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                    let v2222 = &C::put_in_xmm_mem(ctx, v2216.1);
                    let v2279 = constructor_x64_shufps(ctx, v2221, v2222, v2278);
                    let v2280 = constructor_output_xmm(ctx, v2279);
                    // Rule at src/isa/x64/lower.isle line 4246.
                    return Some(v2280);
                }
                let v2281 = C::shufps_rev_imm(ctx, v2215);
                if let Some(v2282) = v2281 {
                    let v2216 = C::unpack_value_array_2(ctx, v2214);
                    let v2227 = constructor_put_in_xmm(ctx, v2216.1);
                    let v2228 = &C::put_in_xmm_mem(ctx, v2216.0);
                    let v2283 = constructor_x64_shufps(ctx, v2227, v2228, v2282);
                    let v2284 = constructor_output_xmm(ctx, v2283);
                    // Rule at src/isa/x64/lower.isle line 4248.
                    return Some(v2284);
                }
                let v2285 = &C::vec_mask_from_immediate(ctx, v2215);
                if let Some(v2286) = v2285 {
                    if v518 == true {
                        let v2216 = C::unpack_value_array_2(ctx, v2214);
                        if v2216.0 == v2216.1 {
                            let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2287 = C::shuffle_0_31_mask(ctx, v2286);
                            let v2288 = &constructor_const_to_xmm_mem(ctx, v2287);
                            let v2289 = constructor_x64_pshufb(ctx, v2221, v2288);
                            let v2290 = constructor_output_xmm(ctx, v2289);
                            // Rule at src/isa/x64/lower.isle line 4261.
                            return Some(v2290);
                        }
                    }
                    let v326 = C::use_avx512vl(ctx);
                    if v326 == true {
                        let v2295 = C::use_avx512vbmi(ctx);
                        if v2295 == true {
                            let v2291 = C::perm_from_mask_with_zeros(ctx, v2286);
                            if let Some(v2292) = v2291 {
                                let v2296 = constructor_x64_xmm_load_const(ctx, I8X16, v2292.0);
                                let v2216 = C::unpack_value_array_2(ctx, v2214);
                                let v2297 = constructor_put_in_xmm(ctx, v2216.0);
                                let v2298 = &C::put_in_xmm_mem(ctx, v2216.1);
                                let v2299 = constructor_x64_vpermi2b(ctx, v2296, v2297, v2298);
                                let v2300 = &constructor_const_to_xmm_mem(ctx, v2292.1);
                                let v2301 = constructor_x64_andps(ctx, v2299, v2300);
                                let v2302 = constructor_output_xmm(ctx, v2301);
                                // Rule at src/isa/x64/lower.isle line 4268.
                                return Some(v2302);
                            }
                            let v2303 = C::perm_from_mask(ctx, v2286);
                            let v2304 = constructor_x64_xmm_load_const(ctx, I8X16, v2303);
                            let v2216 = C::unpack_value_array_2(ctx, v2214);
                            let v2305 = constructor_put_in_xmm(ctx, v2216.0);
                            let v2306 = &C::put_in_xmm_mem(ctx, v2216.1);
                            let v2307 = constructor_x64_vpermi2b(ctx, v2304, v2305, v2306);
                            let v2308 = constructor_output_xmm(ctx, v2307);
                            // Rule at src/isa/x64/lower.isle line 4275.
                            return Some(v2308);
                        }
                    }
                    let v2216 = C::unpack_value_array_2(ctx, v2214);
                    let v2221 = constructor_put_in_xmm(ctx, v2216.0);
                    let v2309 = C::shuffle_0_15_mask(ctx, v2286);
                    let v2310 = &constructor_const_to_reg_mem(ctx, v2309);
                    let v2311 = constructor_lower_pshufb(ctx, v2221, v2310);
                    let v2312 = constructor_put_in_xmm(ctx, v2216.1);
                    let v2313 = C::shuffle_16_31_mask(ctx, v2286);
                    let v2314 = &constructor_const_to_reg_mem(ctx, v2313);
                    let v2315 = constructor_lower_pshufb(ctx, v2312, v2314);
                    let v2316 = &C::xmm_to_xmm_mem(ctx, v2315);
                    let v2317 = constructor_x64_por(ctx, v2311, v2316);
                    let v2318 = constructor_output_xmm(ctx, v2317);
                    // Rule at src/isa/x64/lower.isle line 4283.
                    return Some(v2318);
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v2125,
            stack_slot: v2126,
            offset: v2127,
        } => {
            if let &Opcode::StackAddr = v2125 {
                let v2128 = constructor_stack_addr_impl(ctx, v2126, v2127);
                let v2129 = constructor_output_gpr(ctx, v2128);
                // Rule at src/isa/x64/lower.isle line 3958.
                return Some(v2129);
            }
        }
        &InstructionData::Store {
            opcode: ref v1545,
            args: ref v1546,
            flags: v1547,
            offset: v1548,
        } => {
            match v1545 {
                &Opcode::Store => {
                    let v1549 = C::unpack_value_array_2(ctx, v1546);
                    let v1591 = C::def_inst(ctx, v1549.0);
                    if let Some(v1592) = v1591 {
                        let v1593 = C::first_result(ctx, v1592);
                        if let Some(v1594) = v1593 {
                            let v1596 = &C::inst_data(ctx, v1592);
                            match v1596 {
                                &InstructionData::Binary {
                                    opcode: ref v1616,
                                    args: ref v1617,
                                } => {
                                    match v1616 {
                                        &Opcode::Iadd => {
                                            let v1595 = C::value_type(ctx, v1594);
                                            let v1614 = C::ty_32_or_64(ctx, v1595);
                                            if let Some(v1615) = v1614 {
                                                let v1618 = C::unpack_value_array_2(ctx, v1617);
                                                let v1621 = &C::sinkable_load(ctx, v1618.0);
                                                if let Some(v1622) = v1621 {
                                                    let v1623 = C::def_inst(ctx, v1618.0);
                                                    if let Some(v1624) = v1623 {
                                                        let v1625 = &C::inst_data(ctx, v1624);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1626,
                                                            arg: v1627,
                                                            flags: v1628,
                                                            offset: v1629,
                                                        } = v1625
                                                        {
                                                            if let &Opcode::Load = v1626 {
                                                                if v1547 == v1628 {
                                                                    if v1548 == v1629 {
                                                                        if v1549.1 == v1627 {
                                                                            let v1630 = &constructor_sink_load_to_reg_mem_imm(ctx, v1622);
                                                                            let v1631 = &constructor_to_amode(ctx, v1628, v1627, v1629);
                                                                            let v1632 = constructor_put_in_gpr(ctx, v1618.1);
                                                                            let v1633 = &constructor_x64_add_mem(ctx, v1615, v1631, v1632);
                                                                            let v1634 = constructor_side_effect(ctx, v1633);
                                                                            // Rule at src/isa/x64/lower.isle line 3019.
                                                                            return Some(v1634);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1635 = &C::sinkable_load(ctx, v1618.1);
                                                if let Some(v1636) = v1635 {
                                                    let v1637 = C::def_inst(ctx, v1618.1);
                                                    if let Some(v1638) = v1637 {
                                                        let v1639 = &C::inst_data(ctx, v1638);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1640,
                                                            arg: v1641,
                                                            flags: v1642,
                                                            offset: v1643,
                                                        } = v1639
                                                        {
                                                            if let &Opcode::Load = v1640 {
                                                                if v1547 == v1642 {
                                                                    if v1548 == v1643 {
                                                                        if v1549.1 == v1641 {
                                                                            let v1644 = &constructor_sink_load_to_reg_mem_imm(ctx, v1636);
                                                                            let v1645 = &constructor_to_amode(ctx, v1642, v1641, v1643);
                                                                            let v1646 = constructor_put_in_gpr(ctx, v1618.0);
                                                                            let v1647 = &constructor_x64_add_mem(ctx, v1615, v1645, v1646);
                                                                            let v1648 = constructor_side_effect(ctx, v1647);
                                                                            // Rule at src/isa/x64/lower.isle line 3033.
                                                                            return Some(v1648);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            let v1595 = C::value_type(ctx, v1594);
                                            let v1614 = C::ty_32_or_64(ctx, v1595);
                                            if let Some(v1615) = v1614 {
                                                let v1618 = C::unpack_value_array_2(ctx, v1617);
                                                let v1621 = &C::sinkable_load(ctx, v1618.0);
                                                if let Some(v1622) = v1621 {
                                                    let v1623 = C::def_inst(ctx, v1618.0);
                                                    if let Some(v1624) = v1623 {
                                                        let v1625 = &C::inst_data(ctx, v1624);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1626,
                                                            arg: v1627,
                                                            flags: v1628,
                                                            offset: v1629,
                                                        } = v1625
                                                        {
                                                            if let &Opcode::Load = v1626 {
                                                                if v1547 == v1628 {
                                                                    if v1548 == v1629 {
                                                                        if v1549.1 == v1627 {
                                                                            let v1630 = &constructor_sink_load_to_reg_mem_imm(ctx, v1622);
                                                                            let v1631 = &constructor_to_amode(ctx, v1628, v1627, v1629);
                                                                            let v1632 = constructor_put_in_gpr(ctx, v1618.1);
                                                                            let v1649 = &constructor_x64_sub_mem(ctx, v1615, v1631, v1632);
                                                                            let v1650 = constructor_side_effect(ctx, v1649);
                                                                            // Rule at src/isa/x64/lower.isle line 3047.
                                                                            return Some(v1650);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v1595 = C::value_type(ctx, v1594);
                                            let v1614 = C::ty_32_or_64(ctx, v1595);
                                            if let Some(v1615) = v1614 {
                                                let v1618 = C::unpack_value_array_2(ctx, v1617);
                                                let v1621 = &C::sinkable_load(ctx, v1618.0);
                                                if let Some(v1622) = v1621 {
                                                    let v1623 = C::def_inst(ctx, v1618.0);
                                                    if let Some(v1624) = v1623 {
                                                        let v1625 = &C::inst_data(ctx, v1624);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1626,
                                                            arg: v1627,
                                                            flags: v1628,
                                                            offset: v1629,
                                                        } = v1625
                                                        {
                                                            if let &Opcode::Load = v1626 {
                                                                if v1547 == v1628 {
                                                                    if v1548 == v1629 {
                                                                        if v1549.1 == v1627 {
                                                                            let v1630 = &constructor_sink_load_to_reg_mem_imm(ctx, v1622);
                                                                            let v1631 = &constructor_to_amode(ctx, v1628, v1627, v1629);
                                                                            let v1632 = constructor_put_in_gpr(ctx, v1618.1);
                                                                            let v1651 = &constructor_x64_and_mem(ctx, v1615, v1631, v1632);
                                                                            let v1652 = constructor_side_effect(ctx, v1651);
                                                                            // Rule at src/isa/x64/lower.isle line 3061.
                                                                            return Some(v1652);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1635 = &C::sinkable_load(ctx, v1618.1);
                                                if let Some(v1636) = v1635 {
                                                    let v1637 = C::def_inst(ctx, v1618.1);
                                                    if let Some(v1638) = v1637 {
                                                        let v1639 = &C::inst_data(ctx, v1638);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1640,
                                                            arg: v1641,
                                                            flags: v1642,
                                                            offset: v1643,
                                                        } = v1639
                                                        {
                                                            if let &Opcode::Load = v1640 {
                                                                if v1547 == v1642 {
                                                                    if v1548 == v1643 {
                                                                        if v1549.1 == v1641 {
                                                                            let v1644 = &constructor_sink_load_to_reg_mem_imm(ctx, v1636);
                                                                            let v1645 = &constructor_to_amode(ctx, v1642, v1641, v1643);
                                                                            let v1646 = constructor_put_in_gpr(ctx, v1618.0);
                                                                            let v1653 = &constructor_x64_and_mem(ctx, v1615, v1645, v1646);
                                                                            let v1654 = constructor_side_effect(ctx, v1653);
                                                                            // Rule at src/isa/x64/lower.isle line 3075.
                                                                            return Some(v1654);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v1595 = C::value_type(ctx, v1594);
                                            let v1614 = C::ty_32_or_64(ctx, v1595);
                                            if let Some(v1615) = v1614 {
                                                let v1618 = C::unpack_value_array_2(ctx, v1617);
                                                let v1621 = &C::sinkable_load(ctx, v1618.0);
                                                if let Some(v1622) = v1621 {
                                                    let v1623 = C::def_inst(ctx, v1618.0);
                                                    if let Some(v1624) = v1623 {
                                                        let v1625 = &C::inst_data(ctx, v1624);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1626,
                                                            arg: v1627,
                                                            flags: v1628,
                                                            offset: v1629,
                                                        } = v1625
                                                        {
                                                            if let &Opcode::Load = v1626 {
                                                                if v1547 == v1628 {
                                                                    if v1548 == v1629 {
                                                                        if v1549.1 == v1627 {
                                                                            let v1630 = &constructor_sink_load_to_reg_mem_imm(ctx, v1622);
                                                                            let v1631 = &constructor_to_amode(ctx, v1628, v1627, v1629);
                                                                            let v1632 = constructor_put_in_gpr(ctx, v1618.1);
                                                                            let v1655 = &constructor_x64_or_mem(ctx, v1615, v1631, v1632);
                                                                            let v1656 = constructor_side_effect(ctx, v1655);
                                                                            // Rule at src/isa/x64/lower.isle line 3089.
                                                                            return Some(v1656);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1635 = &C::sinkable_load(ctx, v1618.1);
                                                if let Some(v1636) = v1635 {
                                                    let v1637 = C::def_inst(ctx, v1618.1);
                                                    if let Some(v1638) = v1637 {
                                                        let v1639 = &C::inst_data(ctx, v1638);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1640,
                                                            arg: v1641,
                                                            flags: v1642,
                                                            offset: v1643,
                                                        } = v1639
                                                        {
                                                            if let &Opcode::Load = v1640 {
                                                                if v1547 == v1642 {
                                                                    if v1548 == v1643 {
                                                                        if v1549.1 == v1641 {
                                                                            let v1644 = &constructor_sink_load_to_reg_mem_imm(ctx, v1636);
                                                                            let v1645 = &constructor_to_amode(ctx, v1642, v1641, v1643);
                                                                            let v1646 = constructor_put_in_gpr(ctx, v1618.0);
                                                                            let v1657 = &constructor_x64_or_mem(ctx, v1615, v1645, v1646);
                                                                            let v1658 = constructor_side_effect(ctx, v1657);
                                                                            // Rule at src/isa/x64/lower.isle line 3103.
                                                                            return Some(v1658);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bxor => {
                                            let v1595 = C::value_type(ctx, v1594);
                                            let v1614 = C::ty_32_or_64(ctx, v1595);
                                            if let Some(v1615) = v1614 {
                                                let v1618 = C::unpack_value_array_2(ctx, v1617);
                                                let v1621 = &C::sinkable_load(ctx, v1618.0);
                                                if let Some(v1622) = v1621 {
                                                    let v1623 = C::def_inst(ctx, v1618.0);
                                                    if let Some(v1624) = v1623 {
                                                        let v1625 = &C::inst_data(ctx, v1624);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1626,
                                                            arg: v1627,
                                                            flags: v1628,
                                                            offset: v1629,
                                                        } = v1625
                                                        {
                                                            if let &Opcode::Load = v1626 {
                                                                if v1547 == v1628 {
                                                                    if v1548 == v1629 {
                                                                        if v1549.1 == v1627 {
                                                                            let v1630 = &constructor_sink_load_to_reg_mem_imm(ctx, v1622);
                                                                            let v1631 = &constructor_to_amode(ctx, v1628, v1627, v1629);
                                                                            let v1632 = constructor_put_in_gpr(ctx, v1618.1);
                                                                            let v1659 = &constructor_x64_xor_mem(ctx, v1615, v1631, v1632);
                                                                            let v1660 = constructor_side_effect(ctx, v1659);
                                                                            // Rule at src/isa/x64/lower.isle line 3117.
                                                                            return Some(v1660);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1635 = &C::sinkable_load(ctx, v1618.1);
                                                if let Some(v1636) = v1635 {
                                                    let v1637 = C::def_inst(ctx, v1618.1);
                                                    if let Some(v1638) = v1637 {
                                                        let v1639 = &C::inst_data(ctx, v1638);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v1640,
                                                            arg: v1641,
                                                            flags: v1642,
                                                            offset: v1643,
                                                        } = v1639
                                                        {
                                                            if let &Opcode::Load = v1640 {
                                                                if v1547 == v1642 {
                                                                    if v1548 == v1643 {
                                                                        if v1549.1 == v1641 {
                                                                            let v1644 = &constructor_sink_load_to_reg_mem_imm(ctx, v1636);
                                                                            let v1645 = &constructor_to_amode(ctx, v1642, v1641, v1643);
                                                                            let v1646 = constructor_put_in_gpr(ctx, v1618.0);
                                                                            let v1661 = &constructor_x64_xor_mem(ctx, v1615, v1645, v1646);
                                                                            let v1662 = constructor_side_effect(ctx, v1661);
                                                                            // Rule at src/isa/x64/lower.isle line 3131.
                                                                            return Some(v1662);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v1597,
                                    arg: v1598,
                                    imm: v1599,
                                } => {
                                    if let &Opcode::Extractlane = v1597 {
                                        let v1595 = C::value_type(ctx, v1594);
                                        match v1595 {
                                            I8 => {
                                                let v434 = C::use_sse41(ctx);
                                                if v434 == true {
                                                    let v1556 = &constructor_to_amode(
                                                        ctx, v1547, v1549.1, v1548,
                                                    );
                                                    let v1557 =
                                                        &C::amode_to_synthetic_amode(ctx, v1556);
                                                    let v1601 = constructor_put_in_xmm(ctx, v1598);
                                                    let v1600 = C::u8_from_uimm8(ctx, v1599);
                                                    let v1606 = &constructor_x64_pextrb_store(
                                                        ctx, v1557, v1601, v1600,
                                                    );
                                                    let v1607 = constructor_side_effect(ctx, v1606);
                                                    // Rule at src/isa/x64/lower.isle line 2987.
                                                    return Some(v1607);
                                                }
                                            }
                                            I16 => {
                                                let v434 = C::use_sse41(ctx);
                                                if v434 == true {
                                                    let v1556 = &constructor_to_amode(
                                                        ctx, v1547, v1549.1, v1548,
                                                    );
                                                    let v1557 =
                                                        &C::amode_to_synthetic_amode(ctx, v1556);
                                                    let v1601 = constructor_put_in_xmm(ctx, v1598);
                                                    let v1600 = C::u8_from_uimm8(ctx, v1599);
                                                    let v1608 = &constructor_x64_pextrw_store(
                                                        ctx, v1557, v1601, v1600,
                                                    );
                                                    let v1609 = constructor_side_effect(ctx, v1608);
                                                    // Rule at src/isa/x64/lower.isle line 2994.
                                                    return Some(v1609);
                                                }
                                            }
                                            I32 => {
                                                let v434 = C::use_sse41(ctx);
                                                if v434 == true {
                                                    let v1556 = &constructor_to_amode(
                                                        ctx, v1547, v1549.1, v1548,
                                                    );
                                                    let v1557 =
                                                        &C::amode_to_synthetic_amode(ctx, v1556);
                                                    let v1601 = constructor_put_in_xmm(ctx, v1598);
                                                    let v1600 = C::u8_from_uimm8(ctx, v1599);
                                                    let v1610 = &constructor_x64_pextrd_store(
                                                        ctx, v1557, v1601, v1600,
                                                    );
                                                    let v1611 = constructor_side_effect(ctx, v1610);
                                                    // Rule at src/isa/x64/lower.isle line 3001.
                                                    return Some(v1611);
                                                }
                                            }
                                            I64 => {
                                                let v434 = C::use_sse41(ctx);
                                                if v434 == true {
                                                    let v1556 = &constructor_to_amode(
                                                        ctx, v1547, v1549.1, v1548,
                                                    );
                                                    let v1557 =
                                                        &C::amode_to_synthetic_amode(ctx, v1556);
                                                    let v1601 = constructor_put_in_xmm(ctx, v1598);
                                                    let v1600 = C::u8_from_uimm8(ctx, v1599);
                                                    let v1612 = &constructor_x64_pextrq_store(
                                                        ctx, v1557, v1601, v1600,
                                                    );
                                                    let v1613 = constructor_side_effect(ctx, v1612);
                                                    // Rule at src/isa/x64/lower.isle line 3008.
                                                    return Some(v1613);
                                                }
                                            }
                                            F32 => {
                                                let v1600 = C::u8_from_uimm8(ctx, v1599);
                                                if v1600 == 0x0 {
                                                    let v1556 = &constructor_to_amode(
                                                        ctx, v1547, v1549.1, v1548,
                                                    );
                                                    let v1557 =
                                                        &C::amode_to_synthetic_amode(ctx, v1556);
                                                    let v1601 = constructor_put_in_xmm(ctx, v1598);
                                                    let v1602 = &constructor_x64_movss_store(
                                                        ctx, v1557, v1601,
                                                    );
                                                    let v1603 = constructor_side_effect(ctx, v1602);
                                                    // Rule at src/isa/x64/lower.isle line 2975.
                                                    return Some(v1603);
                                                }
                                            }
                                            F64 => {
                                                let v1600 = C::u8_from_uimm8(ctx, v1599);
                                                if v1600 == 0x0 {
                                                    let v1556 = &constructor_to_amode(
                                                        ctx, v1547, v1549.1, v1548,
                                                    );
                                                    let v1557 =
                                                        &C::amode_to_synthetic_amode(ctx, v1556);
                                                    let v1601 = constructor_put_in_xmm(ctx, v1598);
                                                    let v1604 = &constructor_x64_movsd_store(
                                                        ctx, v1557, v1601,
                                                    );
                                                    let v1605 = constructor_side_effect(ctx, v1604);
                                                    // Rule at src/isa/x64/lower.isle line 2981.
                                                    return Some(v1605);
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v1552 = C::value_type(ctx, v1549.0);
                    match v1552 {
                        I128 => {
                            let v1580 = C::put_in_regs(ctx, v1549.0);
                            let v1581 = constructor_value_regs_get_gpr(ctx, v1580, 0x0);
                            let v1582 = constructor_value_regs_get_gpr(ctx, v1580, 0x1);
                            let v1583 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                            let v1584 = &C::amode_offset(ctx, v1583, 0x8);
                            let v1585 = &C::amode_to_synthetic_amode(ctx, v1583);
                            let v1586 = &constructor_x64_movrm(ctx, I64, v1585, v1581);
                            let v1587 = &C::amode_to_synthetic_amode(ctx, v1584);
                            let v1588 = &constructor_x64_movrm(ctx, I64, v1587, v1582);
                            let v1589 = &constructor_side_effect_concat(ctx, v1586, v1588);
                            let v1590 = constructor_side_effect(ctx, v1589);
                            // Rule at src/isa/x64/lower.isle line 2956.
                            return Some(v1590);
                        }
                        F32 => {
                            let v1556 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                            let v1557 = &C::amode_to_synthetic_amode(ctx, v1556);
                            let v1567 = constructor_put_in_xmm(ctx, v1549.0);
                            let v1568 = &constructor_x64_movss_store(ctx, v1557, v1567);
                            let v1569 = constructor_side_effect(ctx, v1568);
                            // Rule at src/isa/x64/lower.isle line 2916.
                            return Some(v1569);
                        }
                        F64 => {
                            let v1556 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                            let v1557 = &C::amode_to_synthetic_amode(ctx, v1556);
                            let v1567 = constructor_put_in_xmm(ctx, v1549.0);
                            let v1570 = &constructor_x64_movsd_store(ctx, v1557, v1567);
                            let v1571 = constructor_side_effect(ctx, v1570);
                            // Rule at src/isa/x64/lower.isle line 2924.
                            return Some(v1571);
                        }
                        F32X4 => {
                            let v1556 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                            let v1557 = &C::amode_to_synthetic_amode(ctx, v1556);
                            let v1567 = constructor_put_in_xmm(ctx, v1549.0);
                            let v1572 = &constructor_x64_movups_store(ctx, v1557, v1567);
                            let v1573 = constructor_side_effect(ctx, v1572);
                            // Rule at src/isa/x64/lower.isle line 2932.
                            return Some(v1573);
                        }
                        F64X2 => {
                            let v1556 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                            let v1557 = &C::amode_to_synthetic_amode(ctx, v1556);
                            let v1567 = constructor_put_in_xmm(ctx, v1549.0);
                            let v1574 = &constructor_x64_movupd_store(ctx, v1557, v1567);
                            let v1575 = constructor_side_effect(ctx, v1574);
                            // Rule at src/isa/x64/lower.isle line 2940.
                            return Some(v1575);
                        }
                        _ => {}
                    }
                    let v1576 = C::ty_vec128_int(ctx, v1552);
                    if let Some(v1577) = v1576 {
                        let v1556 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                        let v1557 = &C::amode_to_synthetic_amode(ctx, v1556);
                        let v1567 = constructor_put_in_xmm(ctx, v1549.0);
                        let v1578 = &constructor_x64_movdqu_store(ctx, v1557, v1567);
                        let v1579 = constructor_side_effect(ctx, v1578);
                        // Rule at src/isa/x64/lower.isle line 2948.
                        return Some(v1579);
                    }
                    let v1553 = &C::type_register_class(ctx, v1552);
                    if let Some(v1554) = v1553 {
                        if let &RegisterClass::Gpr {
                            single_register: v1555,
                        } = v1554
                        {
                            let v1556 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                            let v1557 = &C::amode_to_synthetic_amode(ctx, v1556);
                            let v1558 = constructor_put_in_gpr(ctx, v1549.0);
                            let v1559 = &constructor_x64_movrm(ctx, v1552, v1557, v1558);
                            let v1560 = constructor_side_effect(ctx, v1559);
                            // Rule at src/isa/x64/lower.isle line 2897.
                            return Some(v1560);
                        }
                    }
                }
                &Opcode::Istore8 => {
                    let v1549 = C::unpack_value_array_2(ctx, v1546);
                    let v1556 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                    let v1557 = &C::amode_to_synthetic_amode(ctx, v1556);
                    let v1558 = constructor_put_in_gpr(ctx, v1549.0);
                    let v1561 = &constructor_x64_movrm(ctx, I8, v1557, v1558);
                    let v1562 = constructor_side_effect(ctx, v1561);
                    // Rule at src/isa/x64/lower.isle line 2905.
                    return Some(v1562);
                }
                &Opcode::Istore16 => {
                    let v1549 = C::unpack_value_array_2(ctx, v1546);
                    let v1556 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                    let v1557 = &C::amode_to_synthetic_amode(ctx, v1556);
                    let v1558 = constructor_put_in_gpr(ctx, v1549.0);
                    let v1563 = &constructor_x64_movrm(ctx, I16, v1557, v1558);
                    let v1564 = constructor_side_effect(ctx, v1563);
                    // Rule at src/isa/x64/lower.isle line 2908.
                    return Some(v1564);
                }
                &Opcode::Istore32 => {
                    let v1549 = C::unpack_value_array_2(ctx, v1546);
                    let v1556 = &constructor_to_amode(ctx, v1547, v1549.1, v1548);
                    let v1557 = &C::amode_to_synthetic_amode(ctx, v1556);
                    let v1558 = constructor_put_in_gpr(ctx, v1549.0);
                    let v1565 = &constructor_x64_movrm(ctx, I32, v1557, v1558);
                    let v1566 = constructor_side_effect(ctx, v1565);
                    // Rule at src/isa/x64/lower.isle line 2911.
                    return Some(v1566);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1696,
            args: ref v1697,
            flags: v1698,
        } => {
            if let &Opcode::AtomicStore = v1696 {
                let v1699 = C::unpack_value_array_2(ctx, v1697);
                let v1702 = C::value_type(ctx, v1699.0);
                let v1703 = C::fits_in_64(ctx, v1702);
                if let Some(v1704) = v1703 {
                    let v1705 = C::ty_int(ctx, v1702);
                    if let Some(v1706) = v1705 {
                        let v48 = C::zero_offset(ctx);
                        let v1707 = &constructor_to_amode(ctx, v1698, v1699.1, v48);
                        let v1708 = &C::amode_to_synthetic_amode(ctx, v1707);
                        let v1709 = constructor_put_in_gpr(ctx, v1699.0);
                        let v1710 = &constructor_x64_movrm(ctx, v1704, v1708, v1709);
                        let v1711 = &constructor_x64_mfence(ctx);
                        let v1712 = &constructor_side_effect_concat(ctx, v1710, v1711);
                        let v1713 = constructor_side_effect(ctx, v1712);
                        // Rule at src/isa/x64/lower.isle line 3178.
                        return Some(v1713);
                    }
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v628,
            args: ref v629,
        } => {
            match v628 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v630 = C::unpack_value_array_3(ctx, v629);
                        let v1001 = C::maybe_uextend(ctx, v630.0);
                        if let Some(v1002) = v1001 {
                            let v1003 = C::def_inst(ctx, v1002);
                            if let Some(v1004) = v1003 {
                                let v1005 = &C::inst_data(ctx, v1004);
                                match v1005 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1006,
                                        args: ref v1007,
                                        cond: ref v1008,
                                    } => {
                                        if let &Opcode::Fcmp = v1006 {
                                            match v1008 {
                                                &FloatCC::Equal => {
                                                    let v1009 = C::unpack_value_array_2(ctx, v1007);
                                                    let v1015 = &constructor_emit_fcmp(
                                                        ctx,
                                                        &FloatCC::NotEqual,
                                                        v1009.0,
                                                        v1009.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v1016 = constructor_lower_select_fcmp(
                                                        ctx, v3, v1015, v630.2, v630.1,
                                                    );
                                                    // Rule at src/isa/x64/lower.isle line 2026.
                                                    return Some(v1016);
                                                }
                                                &FloatCC::LessThan => {
                                                    let v3 = C::value_type(ctx, v2);
                                                    match v3 {
                                                        F32 => {
                                                            let v1009 =
                                                                C::unpack_value_array_2(ctx, v1007);
                                                            if v630.1 == v1009.1 {
                                                                if v630.2 == v1009.0 {
                                                                    let v1055 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1009.1,
                                                                        );
                                                                    let v1056 = &C::put_in_xmm_mem(
                                                                        ctx, v1009.0,
                                                                    );
                                                                    let v1057 =
                                                                        constructor_x64_maxss(
                                                                            ctx, v1055, v1056,
                                                                        );
                                                                    let v1058 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1057,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 2065.
                                                                    return Some(v1058);
                                                                }
                                                            }
                                                            if v630.1 == v1009.0 {
                                                                if v630.2 == v1009.1 {
                                                                    let v1049 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1009.0,
                                                                        );
                                                                    let v1050 = &C::put_in_xmm_mem(
                                                                        ctx, v1009.1,
                                                                    );
                                                                    let v1051 =
                                                                        constructor_x64_minss(
                                                                            ctx, v1049, v1050,
                                                                        );
                                                                    let v1052 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1051,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 2061.
                                                                    return Some(v1052);
                                                                }
                                                            }
                                                        }
                                                        F64 => {
                                                            let v1009 =
                                                                C::unpack_value_array_2(ctx, v1007);
                                                            if v630.1 == v1009.1 {
                                                                if v630.2 == v1009.0 {
                                                                    let v1055 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1009.1,
                                                                        );
                                                                    let v1056 = &C::put_in_xmm_mem(
                                                                        ctx, v1009.0,
                                                                    );
                                                                    let v1059 =
                                                                        constructor_x64_maxsd(
                                                                            ctx, v1055, v1056,
                                                                        );
                                                                    let v1060 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1059,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 2067.
                                                                    return Some(v1060);
                                                                }
                                                            }
                                                            if v630.1 == v1009.0 {
                                                                if v630.2 == v1009.1 {
                                                                    let v1049 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1009.0,
                                                                        );
                                                                    let v1050 = &C::put_in_xmm_mem(
                                                                        ctx, v1009.1,
                                                                    );
                                                                    let v1053 =
                                                                        constructor_x64_minsd(
                                                                            ctx, v1049, v1050,
                                                                        );
                                                                    let v1054 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1053,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 2063.
                                                                    return Some(v1054);
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v1009 = C::unpack_value_array_2(ctx, v1007);
                                            let v1012 = &constructor_emit_fcmp(
                                                ctx, v1008, v1009.0, v1009.1,
                                            );
                                            let v3 = C::value_type(ctx, v2);
                                            let v1013 = constructor_lower_select_fcmp(
                                                ctx, v3, v1012, v630.1, v630.2,
                                            );
                                            // Rule at src/isa/x64/lower.isle line 2024.
                                            return Some(v1013);
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1017,
                                        args: ref v1018,
                                        cond: ref v1019,
                                    } => {
                                        if let &Opcode::Icmp = v1017 {
                                            let v1020 = C::unpack_value_array_2(ctx, v1018);
                                            let v1023 = C::value_type(ctx, v1020.0);
                                            let v1024 = C::fits_in_64(ctx, v1023);
                                            if let Some(v1025) = v1024 {
                                                let v1026 =
                                                    &C::raw_operand_size_of_type(ctx, v1025);
                                                let v1027 =
                                                    &constructor_put_in_gpr_mem_imm(ctx, v1020.1);
                                                let v1028 = constructor_put_in_gpr(ctx, v1020.0);
                                                let v1029 =
                                                    &constructor_x64_cmp(ctx, v1026, v1027, v1028);
                                                let v1030 = &C::intcc_to_cc(ctx, v1019);
                                                let v3 = C::value_type(ctx, v2);
                                                let v1031 = &constructor_cmove_from_values(
                                                    ctx, v3, v1030, v630.1, v630.2,
                                                );
                                                let v1032 =
                                                    constructor_with_flags(ctx, v1029, v1031);
                                                let v1033 = C::output(ctx, v1032);
                                                // Rule at src/isa/x64/lower.isle line 2040.
                                                return Some(v1033);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1034 = C::value_type(ctx, v630.0);
                        let v1035 = C::fits_in_64(ctx, v1034);
                        if let Some(v1036) = v1035 {
                            let v1037 = &C::raw_operand_size_of_type(ctx, v1036);
                            let v1038 = constructor_put_in_gpr(ctx, v630.0);
                            let v1039 = &C::gpr_to_gpr_mem_imm(ctx, v1038);
                            let v1040 = &constructor_x64_test(ctx, v1037, v1039, v1038);
                            let v3 = C::value_type(ctx, v2);
                            let v1042 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v630.1, v630.2);
                            let v1043 = constructor_with_flags(ctx, v1040, v1042);
                            let v1044 = C::output(ctx, v1043);
                            // Rule at src/isa/x64/lower.isle line 2047.
                            return Some(v1044);
                        }
                        if v1034 == I128 {
                            let v677 = C::put_in_regs(ctx, v630.0);
                            let v1046 = &constructor_cmp_zero_i128(ctx, &CC::Z, v677);
                            let v1047 = constructor_select_icmp(ctx, v1046, v630.1, v630.2);
                            let v1048 = C::output(ctx, v1047);
                            // Rule at src/isa/x64/lower.isle line 2054.
                            return Some(v1048);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v630 = C::unpack_value_array_3(ctx, v629);
                    let v650 = C::def_inst(ctx, v630.0);
                    if let Some(v651) = v650 {
                        let v652 = &C::inst_data(ctx, v651);
                        if let &InstructionData::IntCompare {
                            opcode: ref v1769,
                            args: ref v1770,
                            cond: ref v1771,
                        } = v652
                        {
                            if let &Opcode::Icmp = v1769 {
                                let v1772 = C::unpack_value_array_2(ctx, v1770);
                                let v1775 = &constructor_emit_cmp(ctx, v1771, v1772.0, v1772.1);
                                let v1776 = constructor_select_icmp(ctx, v1775, v630.1, v630.2);
                                let v1777 = C::output(ctx, v1776);
                                // Rule at src/isa/x64/lower.isle line 3297.
                                return Some(v1777);
                            }
                        }
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1034 = C::value_type(ctx, v630.0);
                        let v1035 = C::fits_in_64(ctx, v1034);
                        if let Some(v1036) = v1035 {
                            let v1037 = &C::raw_operand_size_of_type(ctx, v1036);
                            let v1038 = constructor_put_in_gpr(ctx, v630.0);
                            let v1039 = &C::gpr_to_gpr_mem_imm(ctx, v1038);
                            let v1040 = &constructor_x64_test(ctx, v1037, v1039, v1038);
                            let v3 = C::value_type(ctx, v2);
                            let v1042 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v630.1, v630.2);
                            let v1043 = constructor_with_flags(ctx, v1040, v1042);
                            let v1044 = C::output(ctx, v1043);
                            // Rule at src/isa/x64/lower.isle line 3300.
                            return Some(v1044);
                        }
                        if v1034 == I128 {
                            let v677 = C::put_in_regs(ctx, v630.0);
                            let v1046 = &constructor_cmp_zero_i128(ctx, &CC::Z, v677);
                            let v1047 = constructor_select_icmp(ctx, v1046, v630.1, v630.2);
                            let v1048 = C::output(ctx, v1047);
                            // Rule at src/isa/x64/lower.isle line 3305.
                            return Some(v1048);
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v630 = C::unpack_value_array_3(ctx, v629);
                            let v634 = constructor_put_in_xmm(ctx, v630.0);
                            let v646 = &C::put_in_xmm_mem(ctx, v630.1);
                            let v697 = constructor_sse_and(ctx, v163, v634, v646);
                            let v698 = constructor_put_in_xmm(ctx, v630.0);
                            let v699 = constructor_vector_all_ones(ctx);
                            let v700 = &C::xmm_to_xmm_mem(ctx, v699);
                            let v701 = constructor_x64_xor_vector(ctx, v163, v698, v700);
                            let v702 = &C::put_in_xmm_mem(ctx, v630.2);
                            let v703 = constructor_sse_and(ctx, v163, v701, v702);
                            let v704 = &C::xmm_to_xmm_mem(ctx, v703);
                            let v705 = constructor_sse_or(ctx, v163, v697, v704);
                            let v706 = constructor_output_xmm(ctx, v705);
                            // Rule at src/isa/x64/lower.isle line 1414.
                            return Some(v706);
                        }
                        let v685 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v686) = v685 {
                            let v630 = C::unpack_value_array_3(ctx, v629);
                            let v687 = constructor_put_in_gpr(ctx, v630.0);
                            let v688 = &constructor_put_in_gpr_mem_imm(ctx, v630.1);
                            let v689 = constructor_x64_and(ctx, v686, v687, v688);
                            let v690 = constructor_put_in_gpr(ctx, v630.0);
                            let v691 = constructor_x64_not(ctx, v686, v690);
                            let v692 = &constructor_put_in_gpr_mem_imm(ctx, v630.2);
                            let v693 = constructor_x64_and(ctx, v686, v691, v692);
                            let v694 = &C::gpr_to_gpr_mem_imm(ctx, v693);
                            let v695 = constructor_x64_or(ctx, v686, v689, v694);
                            let v696 = constructor_output_gpr(ctx, v695);
                            // Rule at src/isa/x64/lower.isle line 1409.
                            return Some(v696);
                        }
                        match v3 {
                            I128 => {
                                let v630 = C::unpack_value_array_3(ctx, v629);
                                let v677 = C::put_in_regs(ctx, v630.0);
                                let v678 = C::put_in_regs(ctx, v630.1);
                                let v679 = constructor_and_i128(ctx, v677, v678);
                                let v680 = constructor_i128_not(ctx, v630.0);
                                let v681 = C::put_in_regs(ctx, v630.2);
                                let v682 = constructor_and_i128(ctx, v680, v681);
                                let v683 = constructor_or_i128(ctx, v679, v682);
                                let v684 = C::output(ctx, v683);
                                // Rule at src/isa/x64/lower.isle line 1404.
                                return Some(v684);
                            }
                            F32X4 => {
                                let v630 = C::unpack_value_array_3(ctx, v629);
                                let v650 = C::def_inst(ctx, v630.0);
                                if let Some(v651) = v650 {
                                    let v652 = &C::inst_data(ctx, v651);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v653,
                                        arg: v654,
                                        flags: v655,
                                    } = v652
                                    {
                                        if let &Opcode::Bitcast = v653 {
                                            let v656 = C::def_inst(ctx, v654);
                                            if let Some(v657) = v656 {
                                                let v658 = &C::inst_data(ctx, v657);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v659,
                                                    args: ref v660,
                                                    cond: ref v661,
                                                } = v658
                                                {
                                                    if let &Opcode::Fcmp = v659 {
                                                        if let &FloatCC::LessThan = v661 {
                                                            let v662 =
                                                                C::unpack_value_array_2(ctx, v660);
                                                            if v630.1 == v662.1 {
                                                                if v630.2 == v662.0 {
                                                                    let v671 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v662.1,
                                                                        );
                                                                    let v672 = &C::put_in_xmm_mem(
                                                                        ctx, v662.0,
                                                                    );
                                                                    let v673 =
                                                                        constructor_x64_maxps(
                                                                            ctx, v671, v672,
                                                                        );
                                                                    let v674 =
                                                                        constructor_output_xmm(
                                                                            ctx, v673,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 1397.
                                                                    return Some(v674);
                                                                }
                                                            }
                                                            if v630.1 == v662.0 {
                                                                if v630.2 == v662.1 {
                                                                    let v665 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v662.0,
                                                                        );
                                                                    let v666 = &C::put_in_xmm_mem(
                                                                        ctx, v662.1,
                                                                    );
                                                                    let v667 =
                                                                        constructor_x64_minps(
                                                                            ctx, v665, v666,
                                                                        );
                                                                    let v668 =
                                                                        constructor_output_xmm(
                                                                            ctx, v667,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 1392.
                                                                    return Some(v668);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64X2 => {
                                let v630 = C::unpack_value_array_3(ctx, v629);
                                let v650 = C::def_inst(ctx, v630.0);
                                if let Some(v651) = v650 {
                                    let v652 = &C::inst_data(ctx, v651);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v653,
                                        arg: v654,
                                        flags: v655,
                                    } = v652
                                    {
                                        if let &Opcode::Bitcast = v653 {
                                            let v656 = C::def_inst(ctx, v654);
                                            if let Some(v657) = v656 {
                                                let v658 = &C::inst_data(ctx, v657);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v659,
                                                    args: ref v660,
                                                    cond: ref v661,
                                                } = v658
                                                {
                                                    if let &Opcode::Fcmp = v659 {
                                                        if let &FloatCC::LessThan = v661 {
                                                            let v662 =
                                                                C::unpack_value_array_2(ctx, v660);
                                                            if v630.1 == v662.1 {
                                                                if v630.2 == v662.0 {
                                                                    let v671 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v662.1,
                                                                        );
                                                                    let v672 = &C::put_in_xmm_mem(
                                                                        ctx, v662.0,
                                                                    );
                                                                    let v675 =
                                                                        constructor_x64_maxpd(
                                                                            ctx, v671, v672,
                                                                        );
                                                                    let v676 =
                                                                        constructor_output_xmm(
                                                                            ctx, v675,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 1399.
                                                                    return Some(v676);
                                                                }
                                                            }
                                                            if v630.1 == v662.0 {
                                                                if v630.2 == v662.1 {
                                                                    let v665 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v662.0,
                                                                        );
                                                                    let v666 = &C::put_in_xmm_mem(
                                                                        ctx, v662.1,
                                                                    );
                                                                    let v669 =
                                                                        constructor_x64_minpd(
                                                                            ctx, v665, v666,
                                                                        );
                                                                    let v670 =
                                                                        constructor_output_xmm(
                                                                            ctx, v669,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 1394.
                                                                    return Some(v670);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v434 = C::use_sse41(ctx);
                            if v434 == true {
                                let v630 = C::unpack_value_array_3(ctx, v629);
                                let v643 = constructor_all_ones_or_all_zeros(ctx, v630.0);
                                if let Some(v644) = v643 {
                                    let v645 = constructor_put_in_xmm(ctx, v630.2);
                                    let v646 = &C::put_in_xmm_mem(ctx, v630.1);
                                    let v647 = constructor_put_in_xmm(ctx, v630.0);
                                    let v648 = constructor_x64_pblendvb(ctx, v645, v646, v647);
                                    let v649 = constructor_output_xmm(ctx, v648);
                                    // Rule at src/isa/x64/lower.isle line 1371.
                                    return Some(v649);
                                }
                            }
                            let v630 = C::unpack_value_array_3(ctx, v629);
                            let v634 = constructor_put_in_xmm(ctx, v630.0);
                            let v635 = constructor_put_in_xmm(ctx, v630.1);
                            let v636 = &C::xmm_to_xmm_mem(ctx, v634);
                            let v637 = constructor_sse_and(ctx, v3, v635, v636);
                            let v638 = &C::put_in_xmm_mem(ctx, v630.2);
                            let v639 = constructor_sse_and_not(ctx, v3, v634, v638);
                            let v640 = &C::xmm_to_xmm_mem(ctx, v637);
                            let v641 = constructor_sse_or(ctx, v3, v639, v640);
                            let v642 = constructor_output_xmm(ctx, v641);
                            // Rule at src/isa/x64/lower.isle line 1357.
                            return Some(v642);
                        }
                    }
                }
                &Opcode::X86Blendv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v630 = C::unpack_value_array_3(ctx, v629);
                                    let v645 = constructor_put_in_xmm(ctx, v630.2);
                                    let v646 = &C::put_in_xmm_mem(ctx, v630.1);
                                    let v647 = constructor_put_in_xmm(ctx, v630.0);
                                    let v648 = constructor_x64_pblendvb(ctx, v645, v646, v647);
                                    let v649 = constructor_output_xmm(ctx, v648);
                                    // Rule at src/isa/x64/lower.isle line 1422.
                                    return Some(v649);
                                }
                            }
                            I32X4 => {
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v630 = C::unpack_value_array_3(ctx, v629);
                                    let v645 = constructor_put_in_xmm(ctx, v630.2);
                                    let v646 = &C::put_in_xmm_mem(ctx, v630.1);
                                    let v647 = constructor_put_in_xmm(ctx, v630.0);
                                    let v707 = constructor_x64_blendvps(ctx, v645, v646, v647);
                                    let v708 = constructor_output_xmm(ctx, v707);
                                    // Rule at src/isa/x64/lower.isle line 1427.
                                    return Some(v708);
                                }
                            }
                            I64X2 => {
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v630 = C::unpack_value_array_3(ctx, v629);
                                    let v645 = constructor_put_in_xmm(ctx, v630.2);
                                    let v646 = &C::put_in_xmm_mem(ctx, v630.1);
                                    let v647 = constructor_put_in_xmm(ctx, v630.0);
                                    let v709 = constructor_x64_blendvpd(ctx, v645, v646, v647);
                                    let v710 = constructor_output_xmm(ctx, v709);
                                    // Rule at src/isa/x64/lower.isle line 1432.
                                    return Some(v710);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1464 = C::use_fma(ctx);
                        if v1464 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v630 = C::unpack_value_array_3(ctx, v629);
                            let v1465 = constructor_fmadd(ctx, v3, v630.0, v630.1, v630.2);
                            let v1466 = constructor_output_xmm(ctx, v1465);
                            // Rule at src/isa/x64/lower.isle line 2776.
                            return Some(v1466);
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v630 = C::unpack_value_array_3(ctx, v629);
                                let v1383 = C::put_in_reg(ctx, v630.0);
                                let v1384 = C::put_in_reg(ctx, v630.1);
                                let v1385 = C::put_in_reg(ctx, v630.2);
                                let v1386 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1383, v1384, v1385);
                                let v1387 = constructor_output_reg(ctx, v1386);
                                // Rule at src/isa/x64/lower.isle line 2731.
                                return Some(v1387);
                            }
                            F64 => {
                                let v630 = C::unpack_value_array_3(ctx, v629);
                                let v1383 = C::put_in_reg(ctx, v630.0);
                                let v1384 = C::put_in_reg(ctx, v630.1);
                                let v1385 = C::put_in_reg(ctx, v630.2);
                                let v1389 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1383, v1384, v1385);
                                let v1390 = constructor_output_reg(ctx, v1389);
                                // Rule at src/isa/x64/lower.isle line 2733.
                                return Some(v1390);
                            }
                            F32X4 => {
                                let v630 = C::unpack_value_array_3(ctx, v629);
                                let v634 = constructor_put_in_xmm(ctx, v630.0);
                                let v635 = constructor_put_in_xmm(ctx, v630.1);
                                let v1391 = constructor_put_in_xmm(ctx, v630.2);
                                let v1392 = C::xmm_to_reg(ctx, v634);
                                let v1393 = C::xmm_to_reg(ctx, v635);
                                let v1394 = C::xmm_to_reg(ctx, v1391);
                                let v1395 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1392, v1393, v1394);
                                let v1396 = C::xmm_new(ctx, v1395);
                                let v1397 = &C::xmm_to_xmm_mem(ctx, v634);
                                let v1399 = constructor_x64_pshufd(ctx, v1397, 0x1);
                                let v1400 = C::xmm_to_reg(ctx, v1399);
                                let v1401 = &C::xmm_to_xmm_mem(ctx, v635);
                                let v1402 = constructor_x64_pshufd(ctx, v1401, 0x1);
                                let v1403 = C::xmm_to_reg(ctx, v1402);
                                let v1404 = &C::xmm_to_xmm_mem(ctx, v1391);
                                let v1405 = constructor_x64_pshufd(ctx, v1404, 0x1);
                                let v1406 = C::xmm_to_reg(ctx, v1405);
                                let v1407 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1400, v1403, v1406);
                                let v1408 = C::xmm_new(ctx, v1407);
                                let v1409 = &C::xmm_to_xmm_mem(ctx, v634);
                                let v1411 = constructor_x64_pshufd(ctx, v1409, 0x2);
                                let v1412 = C::xmm_to_reg(ctx, v1411);
                                let v1413 = &C::xmm_to_xmm_mem(ctx, v635);
                                let v1414 = constructor_x64_pshufd(ctx, v1413, 0x2);
                                let v1415 = C::xmm_to_reg(ctx, v1414);
                                let v1416 = &C::xmm_to_xmm_mem(ctx, v1391);
                                let v1417 = constructor_x64_pshufd(ctx, v1416, 0x2);
                                let v1418 = C::xmm_to_reg(ctx, v1417);
                                let v1419 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1412, v1415, v1418);
                                let v1420 = C::xmm_new(ctx, v1419);
                                let v1421 = &C::xmm_to_xmm_mem(ctx, v634);
                                let v1423 = constructor_x64_pshufd(ctx, v1421, 0x3);
                                let v1424 = C::xmm_to_reg(ctx, v1423);
                                let v1425 = &C::xmm_to_xmm_mem(ctx, v635);
                                let v1426 = constructor_x64_pshufd(ctx, v1425, 0x3);
                                let v1427 = C::xmm_to_reg(ctx, v1426);
                                let v1428 = &C::xmm_to_xmm_mem(ctx, v1391);
                                let v1429 = constructor_x64_pshufd(ctx, v1428, 0x3);
                                let v1430 = C::xmm_to_reg(ctx, v1429);
                                let v1431 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1424, v1427, v1430);
                                let v1432 = C::xmm_new(ctx, v1431);
                                let v1434 = C::xmm_to_reg(ctx, v1408);
                                let v1435 = &constructor_xmm_to_reg_mem(ctx, v1434);
                                let v1436 = &C::xmm_mem_to_reg_mem(ctx, v1435);
                                let v1437 =
                                    constructor_vec_insert_lane(ctx, F32X4, v1396, v1436, 0x1);
                                let v1438 = C::xmm_to_reg(ctx, v1420);
                                let v1439 = &constructor_xmm_to_reg_mem(ctx, v1438);
                                let v1440 = &C::xmm_mem_to_reg_mem(ctx, v1439);
                                let v1441 =
                                    constructor_vec_insert_lane(ctx, F32X4, v1437, v1440, 0x2);
                                let v1442 = C::xmm_to_reg(ctx, v1432);
                                let v1443 = &constructor_xmm_to_reg_mem(ctx, v1442);
                                let v1444 = &C::xmm_mem_to_reg_mem(ctx, v1443);
                                let v1445 =
                                    constructor_vec_insert_lane(ctx, F32X4, v1441, v1444, 0x3);
                                let v1446 = constructor_output_xmm(ctx, v1445);
                                // Rule at src/isa/x64/lower.isle line 2736.
                                return Some(v1446);
                            }
                            F64X2 => {
                                let v630 = C::unpack_value_array_3(ctx, v629);
                                let v634 = constructor_put_in_xmm(ctx, v630.0);
                                let v635 = constructor_put_in_xmm(ctx, v630.1);
                                let v1391 = constructor_put_in_xmm(ctx, v630.2);
                                let v1392 = C::xmm_to_reg(ctx, v634);
                                let v1393 = C::xmm_to_reg(ctx, v635);
                                let v1394 = C::xmm_to_reg(ctx, v1391);
                                let v1447 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1392, v1393, v1394);
                                let v1448 = C::xmm_new(ctx, v1447);
                                let v1397 = &C::xmm_to_xmm_mem(ctx, v634);
                                let v1450 = constructor_x64_pshufd(ctx, v1397, 0xEE);
                                let v1451 = C::xmm_to_reg(ctx, v1450);
                                let v1401 = &C::xmm_to_xmm_mem(ctx, v635);
                                let v1452 = constructor_x64_pshufd(ctx, v1401, 0xEE);
                                let v1453 = C::xmm_to_reg(ctx, v1452);
                                let v1404 = &C::xmm_to_xmm_mem(ctx, v1391);
                                let v1454 = constructor_x64_pshufd(ctx, v1404, 0xEE);
                                let v1455 = C::xmm_to_reg(ctx, v1454);
                                let v1456 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1451, v1453, v1455);
                                let v1457 = C::xmm_new(ctx, v1456);
                                let v1459 = C::xmm_to_reg(ctx, v1457);
                                let v1460 = &constructor_xmm_to_reg_mem(ctx, v1459);
                                let v1461 = &C::xmm_mem_to_reg_mem(ctx, v1460);
                                let v1462 =
                                    constructor_vec_insert_lane(ctx, F64X2, v1448, v1461, 0x1);
                                let v1463 = constructor_output_xmm(ctx, v1462);
                                // Rule at src/isa/x64/lower.isle line 2760.
                                return Some(v1463);
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v711,
            args: ref v712,
            imm: v713,
        } => {
            if let &Opcode::Insertlane = v711 {
                let v714 = C::unpack_value_array_2(ctx, v712);
                let v719 = constructor_put_in_xmm(ctx, v714.0);
                let v720 = &C::put_in_reg_mem(ctx, v714.1);
                let v717 = C::value_type(ctx, v714.0);
                let v718 = C::u8_from_uimm8(ctx, v713);
                let v721 = constructor_vec_insert_lane(ctx, v717, v719, v720, v718);
                let v722 = constructor_output_xmm(ctx, v721);
                // Rule at src/isa/x64/lower.isle line 1439.
                return Some(v722);
            }
        }
        &InstructionData::Trap {
            opcode: ref v781,
            code: ref v782,
        } => {
            match v781 {
                &Opcode::Trap => {
                    let v783 = &constructor_x64_ud2(ctx, v782);
                    let v784 = constructor_side_effect(ctx, v783);
                    // Rule at src/isa/x64/lower.isle line 1742.
                    return Some(v784);
                }
                &Opcode::ResumableTrap => {
                    let v783 = &constructor_x64_ud2(ctx, v782);
                    let v784 = constructor_side_effect(ctx, v783);
                    // Rule at src/isa/x64/lower.isle line 1769.
                    return Some(v784);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v373,
            arg: v374,
        } => {
            match v373 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            match v65.0 {
                                0x20 => {
                                    if v65.1 == 0x4 {
                                        let v2368 = &C::sinkable_load(ctx, v374);
                                        if let Some(v2369) = v2368 {
                                            let v2433 = C::use_avx(ctx);
                                            if v2433 == true {
                                                let v2434 =
                                                    &constructor_sink_load_to_xmm_mem(ctx, v2369);
                                                let v2435 =
                                                    constructor_x64_vbroadcastss(ctx, v2434);
                                                let v2436 = constructor_output_xmm(ctx, v2435);
                                                // Rule at src/isa/x64/lower.isle line 4476.
                                                return Some(v2436);
                                            }
                                            let v2372 = &C::sink_load(ctx, v2369);
                                            let v2373 = constructor_x64_movss_load(ctx, v2372);
                                            let v2430 = &C::xmm_to_xmm_mem(ctx, v2373);
                                            let v2431 =
                                                constructor_x64_shufps(ctx, v2373, v2430, 0x0);
                                            let v2432 = constructor_output_xmm(ctx, v2431);
                                            // Rule at src/isa/x64/lower.isle line 4473.
                                            return Some(v2432);
                                        }
                                    }
                                }
                                0x40 => {
                                    if v65.1 == 0x2 {
                                        let v518 = C::use_ssse3(ctx);
                                        if v518 == true {
                                            let v2368 = &C::sinkable_load(ctx, v374);
                                            if let Some(v2369) = v2368 {
                                                let v2434 =
                                                    &constructor_sink_load_to_xmm_mem(ctx, v2369);
                                                let v2444 = constructor_x64_movddup(ctx, v2434);
                                                let v2445 = constructor_output_xmm(ctx, v2444);
                                                // Rule at src/isa/x64/lower.isle line 4487.
                                                return Some(v2445);
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8X16 => {
                                let v2397 = &C::sinkable_load_exact(ctx, v374);
                                if let Some(v2398) = v2397 {
                                    let v2393 = C::use_avx2(ctx);
                                    if v2393 == true {
                                        let v2404 = &constructor_sink_load_to_xmm_mem(ctx, v2398);
                                        let v2405 = constructor_x64_vpbroadcastb(ctx, v2404);
                                        let v2406 = constructor_output_xmm(ctx, v2405);
                                        // Rule at src/isa/x64/lower.isle line 4424.
                                        return Some(v2406);
                                    }
                                    let v434 = C::use_sse41(ctx);
                                    if v434 == true {
                                        let v518 = C::use_ssse3(ctx);
                                        if v518 == true {
                                            let v2399 = constructor_xmm_uninit_value(ctx);
                                            let v2400 =
                                                &constructor_sink_load_to_gpr_mem(ctx, v2398);
                                            let v2401 =
                                                constructor_x64_pinsrb(ctx, v2399, v2400, 0x0);
                                            let v945 = constructor_xmm_zero(ctx, I8X16);
                                            let v946 = &C::xmm_to_xmm_mem(ctx, v945);
                                            let v2402 = constructor_x64_pshufb(ctx, v2401, v946);
                                            let v2403 = constructor_output_xmm(ctx, v2402);
                                            // Rule at src/isa/x64/lower.isle line 4420.
                                            return Some(v2403);
                                        }
                                    }
                                }
                                let v2393 = C::use_avx2(ctx);
                                if v2393 == true {
                                    let v375 = constructor_put_in_gpr(ctx, v374);
                                    let v2388 = constructor_bitcast_gpr_to_xmm(ctx, I32, v375);
                                    let v2394 = &C::xmm_to_xmm_mem(ctx, v2388);
                                    let v2395 = constructor_x64_vpbroadcastb(ctx, v2394);
                                    let v2396 = constructor_output_xmm(ctx, v2395);
                                    // Rule at src/isa/x64/lower.isle line 4417.
                                    return Some(v2396);
                                }
                                let v518 = C::use_ssse3(ctx);
                                if v518 == true {
                                    let v375 = constructor_put_in_gpr(ctx, v374);
                                    let v2388 = constructor_bitcast_gpr_to_xmm(ctx, I32, v375);
                                    let v2389 = constructor_xmm_zero(ctx, I8X16);
                                    let v2390 = &C::xmm_to_xmm_mem(ctx, v2389);
                                    let v2391 = constructor_x64_pshufb(ctx, v2388, v2390);
                                    let v2392 = constructor_output_xmm(ctx, v2391);
                                    // Rule at src/isa/x64/lower.isle line 4414.
                                    return Some(v2392);
                                }
                                let v1785 = &constructor_put_in_gpr_mem(ctx, v374);
                                let v2379 = constructor_x64_movd_to_xmm(ctx, v1785);
                                let v2380 = &C::xmm_to_xmm_mem(ctx, v2379);
                                let v2381 = constructor_x64_punpcklbw(ctx, v2379, v2380);
                                let v2382 = &C::xmm_to_xmm_mem(ctx, v2381);
                                let v2384 = constructor_x64_pshuflw(ctx, v2382, 0x0);
                                let v2385 = &C::xmm_to_xmm_mem(ctx, v2384);
                                let v2386 = constructor_x64_pshufd(ctx, v2385, 0x0);
                                let v2387 = constructor_output_xmm(ctx, v2386);
                                // Rule at src/isa/x64/lower.isle line 4411.
                                return Some(v2387);
                            }
                            I16X8 => {
                                let v2397 = &C::sinkable_load_exact(ctx, v374);
                                if let Some(v2398) = v2397 {
                                    let v2393 = C::use_avx2(ctx);
                                    if v2393 == true {
                                        let v2404 = &constructor_sink_load_to_xmm_mem(ctx, v2398);
                                        let v2419 = constructor_x64_vpbroadcastw(ctx, v2404);
                                        let v2420 = constructor_output_xmm(ctx, v2419);
                                        // Rule at src/isa/x64/lower.isle line 4440.
                                        return Some(v2420);
                                    }
                                    let v2399 = constructor_xmm_uninit_value(ctx);
                                    let v2400 = &constructor_sink_load_to_gpr_mem(ctx, v2398);
                                    let v2413 = constructor_x64_pinsrw(ctx, v2399, v2400, 0x0);
                                    let v2414 = &C::xmm_to_xmm_mem(ctx, v2413);
                                    let v2415 = constructor_x64_pshuflw(ctx, v2414, 0x0);
                                    let v2416 = &C::xmm_to_xmm_mem(ctx, v2415);
                                    let v2417 = constructor_x64_pshufd(ctx, v2416, 0x0);
                                    let v2418 = constructor_output_xmm(ctx, v2417);
                                    // Rule at src/isa/x64/lower.isle line 4438.
                                    return Some(v2418);
                                }
                                let v2393 = C::use_avx2(ctx);
                                if v2393 == true {
                                    let v375 = constructor_put_in_gpr(ctx, v374);
                                    let v2388 = constructor_bitcast_gpr_to_xmm(ctx, I32, v375);
                                    let v2394 = &C::xmm_to_xmm_mem(ctx, v2388);
                                    let v2411 = constructor_x64_vpbroadcastw(ctx, v2394);
                                    let v2412 = constructor_output_xmm(ctx, v2411);
                                    // Rule at src/isa/x64/lower.isle line 4435.
                                    return Some(v2412);
                                }
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v2388 = constructor_bitcast_gpr_to_xmm(ctx, I32, v375);
                                let v2394 = &C::xmm_to_xmm_mem(ctx, v2388);
                                let v2407 = constructor_x64_pshuflw(ctx, v2394, 0x0);
                                let v2408 = &C::xmm_to_xmm_mem(ctx, v2407);
                                let v2409 = constructor_x64_pshufd(ctx, v2408, 0x0);
                                let v2410 = constructor_output_xmm(ctx, v2409);
                                // Rule at src/isa/x64/lower.isle line 4433.
                                return Some(v2410);
                            }
                            I32X4 => {
                                let v2393 = C::use_avx2(ctx);
                                if v2393 == true {
                                    let v375 = constructor_put_in_gpr(ctx, v374);
                                    let v2388 = constructor_bitcast_gpr_to_xmm(ctx, I32, v375);
                                    let v2394 = &C::xmm_to_xmm_mem(ctx, v2388);
                                    let v2423 = constructor_x64_vpbroadcastd(ctx, v2394);
                                    let v2424 = constructor_output_xmm(ctx, v2423);
                                    // Rule at src/isa/x64/lower.isle line 4450.
                                    return Some(v2424);
                                }
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v2388 = constructor_bitcast_gpr_to_xmm(ctx, I32, v375);
                                let v2394 = &C::xmm_to_xmm_mem(ctx, v2388);
                                let v2421 = constructor_x64_pshufd(ctx, v2394, 0x0);
                                let v2422 = constructor_output_xmm(ctx, v2421);
                                // Rule at src/isa/x64/lower.isle line 4448.
                                return Some(v2422);
                            }
                            I64X2 => {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v2437 = constructor_bitcast_gpr_to_xmm(ctx, I64, v375);
                                let v2438 = &C::xmm_to_xmm_mem(ctx, v2437);
                                let v2440 = constructor_x64_pshufd(ctx, v2438, 0x44);
                                let v2441 = constructor_output_xmm(ctx, v2440);
                                // Rule at src/isa/x64/lower.isle line 4483.
                                return Some(v2441);
                            }
                            F32X4 => {
                                let v2393 = C::use_avx2(ctx);
                                if v2393 == true {
                                    let v519 = &C::put_in_xmm_mem(ctx, v374);
                                    let v2428 = constructor_x64_vbroadcastss(ctx, v519);
                                    let v2429 = constructor_output_xmm(ctx, v2428);
                                    // Rule at src/isa/x64/lower.isle line 4460.
                                    return Some(v2429);
                                }
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v2425 = constructor_put_in_xmm(ctx, v374);
                                let v390 = &C::put_in_xmm_mem(ctx, v374);
                                let v2426 = constructor_x64_shufps(ctx, v2425, v390, 0x0);
                                let v2427 = constructor_output_xmm(ctx, v2426);
                                // Rule at src/isa/x64/lower.isle line 4457.
                                return Some(v2427);
                            }
                            F64X2 => {
                                let v519 = &C::put_in_xmm_mem(ctx, v374);
                                let v2442 = constructor_x64_pshufd(ctx, v519, 0x44);
                                let v2443 = constructor_output_xmm(ctx, v2442);
                                // Rule at src/isa/x64/lower.isle line 4485.
                                return Some(v2443);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v375 = constructor_put_in_gpr(ctx, v374);
                    let v2206 = &constructor_write_pinned_gpr(ctx, v375);
                    let v2207 = constructor_side_effect(ctx, v2206);
                    // Rule at src/isa/x64/lower.isle line 4132.
                    return Some(v2207);
                }
                &Opcode::VanyTrue => {
                    let v434 = C::use_sse41(ctx);
                    if v434 == true {
                        let v522 = constructor_put_in_xmm(ctx, v374);
                        let v1305 = &C::xmm_to_xmm_mem(ctx, v522);
                        let v2446 = &constructor_x64_ptest(ctx, v1305, v522);
                        let v2447 = &constructor_x64_setcc(ctx, &CC::NZ);
                        let v2448 = constructor_with_flags(ctx, v2446, v2447);
                        let v2449 = C::output(ctx, v2448);
                        // Rule at src/isa/x64/lower.isle line 4493.
                        return Some(v2449);
                    }
                    let v522 = constructor_put_in_xmm(ctx, v374);
                    let v523 = constructor_xmm_zero(ctx, I8X16);
                    let v2039 = &C::xmm_to_xmm_mem(ctx, v523);
                    let v2450 = constructor_x64_pcmpeqb(ctx, v522, v2039);
                    let v2452 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v2450);
                    let v2454 = RegMemImm::Imm { simm32: 0xFFFF };
                    let v2455 = &C::gpr_mem_imm_new(ctx, &v2454);
                    let v2456 = &constructor_x64_cmp(ctx, &OperandSize::Size32, v2455, v2452);
                    let v2457 = &constructor_x64_setcc(ctx, &CC::NZ);
                    let v2458 = constructor_with_flags(ctx, v2456, v2457);
                    let v2459 = C::output(ctx, v2458);
                    // Rule at src/isa/x64/lower.isle line 4502.
                    return Some(v2459);
                }
                &Opcode::VallTrue => {
                    let v434 = C::use_sse41(ctx);
                    if v434 == true {
                        let v522 = constructor_put_in_xmm(ctx, v374);
                        let v616 = C::value_type(ctx, v374);
                        let v2460 = constructor_xmm_zero(ctx, v616);
                        let v2461 = constructor_vec_int_type(ctx, v616);
                        let v2462 = &C::xmm_to_xmm_mem(ctx, v2460);
                        let v2463 = constructor_x64_pcmpeq(ctx, v2461, v522, v2462);
                        let v2464 = &C::xmm_to_xmm_mem(ctx, v2463);
                        let v2465 = &constructor_x64_ptest(ctx, v2464, v2463);
                        let v2466 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v2467 = constructor_with_flags(ctx, v2465, v2466);
                        let v2468 = C::output(ctx, v2467);
                        // Rule at src/isa/x64/lower.isle line 4512.
                        return Some(v2468);
                    }
                    let v616 = C::value_type(ctx, v374);
                    let v2469 = constructor_vec_int_type(ctx, v616);
                    let v2425 = constructor_put_in_xmm(ctx, v374);
                    let v2470 = constructor_xmm_zero(ctx, v616);
                    let v2471 = &C::xmm_to_xmm_mem(ctx, v2470);
                    let v2472 = constructor_x64_pcmpeq(ctx, v2469, v2425, v2471);
                    let v2473 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v2472);
                    let v2474 = &C::gpr_to_gpr_mem_imm(ctx, v2473);
                    let v2475 = &constructor_x64_test(ctx, &OperandSize::Size32, v2474, v2473);
                    let v2476 = &constructor_x64_setcc(ctx, &CC::Z);
                    let v2477 = constructor_with_flags(ctx, v2475, v2476);
                    let v2478 = C::output(ctx, v2477);
                    // Rule at src/isa/x64/lower.isle line 4522.
                    return Some(v2478);
                }
                &Opcode::VhighBits => {
                    let v616 = C::value_type(ctx, v374);
                    let v2479 = C::multi_lane(ctx, v616);
                    if let Some(v2480) = v2479 {
                        match v2480.0 {
                            0x8 => {
                                if v2480.1 == 0x10 {
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v2483 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v522);
                                    let v2484 = constructor_output_gpr(ctx, v2483);
                                    // Rule at src/isa/x64/lower.isle line 4539.
                                    return Some(v2484);
                                }
                            }
                            0x10 => {
                                if v2480.1 == 0x8 {
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v1305 = &C::xmm_to_xmm_mem(ctx, v522);
                                    let v2489 = constructor_x64_packsswb(ctx, v522, v1305);
                                    let v2490 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v2489);
                                    let v1198 = Imm8Reg::Imm8 { imm: 0x8 };
                                    let v2158 = &C::imm8_reg_to_imm8_gpr(ctx, &v1198);
                                    let v2491 = constructor_x64_shr(ctx, I64, v2490, v2158);
                                    let v2492 = constructor_output_gpr(ctx, v2491);
                                    // Rule at src/isa/x64/lower.isle line 4554.
                                    return Some(v2492);
                                }
                            }
                            0x20 => {
                                if v2480.1 == 0x4 {
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v2485 =
                                        constructor_x64_movmskps(ctx, &OperandSize::Size32, v522);
                                    let v2486 = constructor_output_gpr(ctx, v2485);
                                    // Rule at src/isa/x64/lower.isle line 4542.
                                    return Some(v2486);
                                }
                            }
                            0x40 => {
                                if v2480.1 == 0x2 {
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v2487 =
                                        constructor_x64_movmskpd(ctx, &OperandSize::Size32, v522);
                                    let v2488 = constructor_output_gpr(ctx, v2487);
                                    // Rule at src/isa/x64/lower.isle line 4545.
                                    return Some(v2488);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v388 = constructor_imm(ctx, I8X16, 0x0);
                                let v389 = C::xmm_new(ctx, v388);
                                let v390 = &C::put_in_xmm_mem(ctx, v374);
                                let v391 = constructor_x64_psubb(ctx, v389, v390);
                                let v392 = constructor_output_xmm(ctx, v391);
                                // Rule at src/isa/x64/lower.isle line 919.
                                return Some(v392);
                            }
                            I16X8 => {
                                let v394 = constructor_imm(ctx, I16X8, 0x0);
                                let v395 = C::xmm_new(ctx, v394);
                                let v390 = &C::put_in_xmm_mem(ctx, v374);
                                let v396 = constructor_x64_psubw(ctx, v395, v390);
                                let v397 = constructor_output_xmm(ctx, v396);
                                // Rule at src/isa/x64/lower.isle line 922.
                                return Some(v397);
                            }
                            I32X4 => {
                                let v399 = constructor_imm(ctx, I32X4, 0x0);
                                let v400 = C::xmm_new(ctx, v399);
                                let v390 = &C::put_in_xmm_mem(ctx, v374);
                                let v401 = constructor_x64_psubd(ctx, v400, v390);
                                let v402 = constructor_output_xmm(ctx, v401);
                                // Rule at src/isa/x64/lower.isle line 925.
                                return Some(v402);
                            }
                            I64X2 => {
                                let v404 = constructor_imm(ctx, I64X2, 0x0);
                                let v405 = C::xmm_new(ctx, v404);
                                let v390 = &C::put_in_xmm_mem(ctx, v374);
                                let v406 = constructor_x64_psubq(ctx, v405, v390);
                                let v407 = constructor_output_xmm(ctx, v406);
                                // Rule at src/isa/x64/lower.isle line 928.
                                return Some(v407);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v375 = constructor_put_in_gpr(ctx, v374);
                            let v376 = constructor_x64_neg(ctx, v5, v375);
                            let v377 = constructor_output_gpr(ctx, v376);
                            // Rule at src/isa/x64/lower.isle line 905.
                            return Some(v377);
                        }
                        if v3 == I128 {
                            let v378 = C::put_in_regs(ctx, v374);
                            let v379 = constructor_value_regs_get_gpr(ctx, v378, 0x0);
                            let v380 = constructor_value_regs_get_gpr(ctx, v378, 0x1);
                            let v381 = &constructor_x64_neg_paired(ctx, I64, v379);
                            let v382 = constructor_imm(ctx, I64, 0x0);
                            let v383 = C::gpr_new(ctx, v382);
                            let v384 = &C::gpr_to_gpr_mem_imm(ctx, v380);
                            let v385 = &constructor_x64_sbb_paired(ctx, I64, v383, v384);
                            let v386 = constructor_with_flags(ctx, v381, v385);
                            let v387 = C::output(ctx, v386);
                            // Rule at src/isa/x64/lower.isle line 908.
                            return Some(v387);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v518 = C::use_ssse3(ctx);
                                if v518 == true {
                                    let v519 = &C::put_in_xmm_mem(ctx, v374);
                                    let v520 = constructor_x64_pabsb(ctx, v519);
                                    let v521 = constructor_output_xmm(ctx, v520);
                                    // Rule at src/isa/x64/lower.isle line 1162.
                                    return Some(v521);
                                }
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v523 = constructor_xmm_zero(ctx, I8X16);
                                let v524 = &C::xmm_to_xmm_mem(ctx, v522);
                                let v525 = constructor_x64_psubb(ctx, v523, v524);
                                let v526 = &C::xmm_to_xmm_mem(ctx, v525);
                                let v527 = constructor_x64_pminub(ctx, v522, v526);
                                let v528 = constructor_output_xmm(ctx, v527);
                                // Rule at src/isa/x64/lower.isle line 1169.
                                return Some(v528);
                            }
                            I16X8 => {
                                let v518 = C::use_ssse3(ctx);
                                if v518 == true {
                                    let v519 = &C::put_in_xmm_mem(ctx, v374);
                                    let v529 = constructor_x64_pabsw(ctx, v519);
                                    let v530 = constructor_output_xmm(ctx, v529);
                                    // Rule at src/isa/x64/lower.isle line 1176.
                                    return Some(v530);
                                }
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v531 = constructor_xmm_zero(ctx, I16X8);
                                let v524 = &C::xmm_to_xmm_mem(ctx, v522);
                                let v532 = constructor_x64_psubw(ctx, v531, v524);
                                let v533 = &C::xmm_to_xmm_mem(ctx, v532);
                                let v534 = constructor_x64_pmaxsw(ctx, v522, v533);
                                let v535 = constructor_output_xmm(ctx, v534);
                                // Rule at src/isa/x64/lower.isle line 1180.
                                return Some(v535);
                            }
                            I32X4 => {
                                let v518 = C::use_ssse3(ctx);
                                if v518 == true {
                                    let v519 = &C::put_in_xmm_mem(ctx, v374);
                                    let v536 = constructor_x64_pabsd(ctx, v519);
                                    let v537 = constructor_output_xmm(ctx, v536);
                                    // Rule at src/isa/x64/lower.isle line 1187.
                                    return Some(v537);
                                }
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v539 = &C::xmi_imm(ctx, 0x1F);
                                let v540 = constructor_x64_psrad(ctx, v522, v539);
                                let v541 = &C::xmm_to_xmm_mem(ctx, v540);
                                let v542 = constructor_x64_pxor(ctx, v522, v541);
                                let v543 = &C::xmm_to_xmm_mem(ctx, v540);
                                let v544 = constructor_x64_psubd(ctx, v542, v543);
                                let v545 = constructor_output_xmm(ctx, v544);
                                // Rule at src/isa/x64/lower.isle line 1197.
                                return Some(v545);
                            }
                            I64X2 => {
                                let v326 = C::use_avx512vl(ctx);
                                if v326 == true {
                                    let v327 = C::use_avx512f(ctx);
                                    if v327 == true {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v546 = constructor_x64_vpabsq(ctx, v519);
                                        let v547 = constructor_output_xmm(ctx, v546);
                                        // Rule at src/isa/x64/lower.isle line 1206.
                                        return Some(v547);
                                    }
                                }
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v548 = constructor_imm(ctx, I64X2, 0x0);
                                    let v549 = C::xmm_new(ctx, v548);
                                    let v550 = &C::xmm_to_xmm_mem(ctx, v522);
                                    let v551 = constructor_x64_psubq(ctx, v549, v550);
                                    let v552 = &C::xmm_to_xmm_mem(ctx, v522);
                                    let v553 = constructor_x64_blendvpd(ctx, v551, v552, v551);
                                    let v554 = constructor_output_xmm(ctx, v553);
                                    // Rule at src/isa/x64/lower.isle line 1215.
                                    return Some(v554);
                                }
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v555 = RegMemImm::Imm { simm32: 0x1F };
                                let v556 = &C::xmm_mem_imm_new(ctx, &v555);
                                let v557 = constructor_x64_psrad(ctx, v522, v556);
                                let v558 = &C::xmm_to_xmm_mem(ctx, v557);
                                let v560 = constructor_x64_pshufd(ctx, v558, 0xF5);
                                let v561 = &C::xmm_to_xmm_mem(ctx, v560);
                                let v562 = constructor_x64_pxor(ctx, v522, v561);
                                let v563 = &C::xmm_to_xmm_mem(ctx, v560);
                                let v564 = constructor_x64_psubq(ctx, v562, v563);
                                let v565 = constructor_output_xmm(ctx, v564);
                                // Rule at src/isa/x64/lower.isle line 1224.
                                return Some(v565);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v375 = constructor_put_in_gpr(ctx, v374);
                            let v566 = &constructor_x64_neg_paired(ctx, v5, v375);
                            let v567 = constructor_produces_flags_get_reg(ctx, v566);
                            let v568 = C::gpr_new(ctx, v567);
                            let v570 = &C::gpr_to_gpr_mem(ctx, v375);
                            let v571 = &constructor_cmove(ctx, v5, &CC::S, v570, v568);
                            let v572 = &constructor_produces_flags_ignore(ctx, v566);
                            let v573 = constructor_with_flags_reg(ctx, v572, v571);
                            let v574 = constructor_output_reg(ctx, v573);
                            // Rule at src/isa/x64/lower.isle line 1233.
                            return Some(v574);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v621 = constructor_i128_not(ctx, v374);
                            let v622 = C::output(ctx, v621);
                            // Rule at src/isa/x64/lower.isle line 1342.
                            return Some(v622);
                        }
                        let v64 = C::multi_lane(ctx, v3);
                        if let Some(v65) = v64 {
                            let v522 = constructor_put_in_xmm(ctx, v374);
                            let v585 = constructor_vector_all_ones(ctx);
                            let v623 = &C::xmm_to_xmm_mem(ctx, v585);
                            let v626 = constructor_x64_xor_vector(ctx, v3, v522, v623);
                            let v627 = constructor_output_xmm(ctx, v626);
                            // Rule at src/isa/x64/lower.isle line 1352.
                            return Some(v627);
                        }
                        let v152 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v153) = v152 {
                            let v375 = constructor_put_in_gpr(ctx, v374);
                            let v619 = constructor_x64_not(ctx, v3, v375);
                            let v620 = constructor_output_gpr(ctx, v619);
                            // Rule at src/isa/x64/lower.isle line 1327.
                            return Some(v620);
                        }
                        let v162 = C::ty_scalar_float(ctx, v3);
                        if let Some(v163) = v162 {
                            let v522 = constructor_put_in_xmm(ctx, v374);
                            let v585 = constructor_vector_all_ones(ctx);
                            let v623 = &C::xmm_to_xmm_mem(ctx, v585);
                            let v624 = constructor_x64_xor_vector(ctx, v163, v522, v623);
                            let v625 = constructor_output_xmm(ctx, v624);
                            // Rule at src/isa/x64/lower.isle line 1347.
                            return Some(v625);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1181 = constructor_do_bitrev8(ctx, I32, v375);
                                let v1182 = constructor_output_gpr(ctx, v1181);
                                // Rule at src/isa/x64/lower.isle line 2297.
                                return Some(v1182);
                            }
                            I16 => {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1183 = constructor_do_bitrev16(ctx, I32, v375);
                                let v1184 = constructor_output_gpr(ctx, v1183);
                                // Rule at src/isa/x64/lower.isle line 2300.
                                return Some(v1184);
                            }
                            I32 => {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1185 = constructor_do_bitrev32(ctx, I32, v375);
                                let v1186 = constructor_output_gpr(ctx, v1185);
                                // Rule at src/isa/x64/lower.isle line 2303.
                                return Some(v1186);
                            }
                            I64 => {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1187 = constructor_do_bitrev64(ctx, I64, v375);
                                let v1188 = constructor_output_gpr(ctx, v1187);
                                // Rule at src/isa/x64/lower.isle line 2306.
                                return Some(v1188);
                            }
                            I128 => {
                                let v378 = C::put_in_regs(ctx, v374);
                                let v1071 = constructor_value_regs_get_gpr(ctx, v378, 0x1);
                                let v1189 = constructor_do_bitrev64(ctx, I64, v1071);
                                let v1190 = C::gpr_to_reg(ctx, v1189);
                                let v1191 = C::put_in_regs(ctx, v374);
                                let v1192 = constructor_value_regs_get_gpr(ctx, v1191, 0x0);
                                let v1193 = constructor_do_bitrev64(ctx, I64, v1192);
                                let v1194 = C::gpr_to_reg(ctx, v1193);
                                let v1195 = C::value_regs(ctx, v1190, v1194);
                                let v1196 = C::output(ctx, v1195);
                                // Rule at src/isa/x64/lower.isle line 2309.
                                return Some(v1196);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v1061 = C::use_lzcnt(ctx);
                            if v1061 == true {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1062 = constructor_x64_lzcnt(ctx, v46, v375);
                                let v1063 = constructor_output_gpr(ctx, v1062);
                                // Rule at src/isa/x64/lower.isle line 2076.
                                return Some(v1063);
                            }
                            let v375 = constructor_put_in_gpr(ctx, v374);
                            let v1064 = constructor_do_clz(ctx, v46, v46, v375);
                            let v1065 = constructor_output_gpr(ctx, v1064);
                            // Rule at src/isa/x64/lower.isle line 2080.
                            return Some(v1065);
                        }
                        let v1066 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1067) = v1066 {
                            let v1068 =
                                constructor_extend_to_gpr(ctx, v374, I32, &ExtendKind::Zero);
                            let v1069 = constructor_do_clz(ctx, I32, v1067, v1068);
                            let v1070 = constructor_output_gpr(ctx, v1069);
                            // Rule at src/isa/x64/lower.isle line 2083.
                            return Some(v1070);
                        }
                        if v3 == I128 {
                            let v378 = C::put_in_regs(ctx, v374);
                            let v1071 = constructor_value_regs_get_gpr(ctx, v378, 0x1);
                            let v1072 = constructor_do_clz(ctx, I64, I64, v1071);
                            let v1073 = C::put_in_regs(ctx, v374);
                            let v1074 = constructor_value_regs_get_gpr(ctx, v1073, 0x0);
                            let v1075 = constructor_do_clz(ctx, I64, I64, v1074);
                            let v1077 = RegMemImm::Imm { simm32: 0x40 };
                            let v1078 = &C::gpr_mem_imm_new(ctx, &v1077);
                            let v1079 = constructor_x64_add(ctx, I64, v1075, v1078);
                            let v1081 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0x40, v1072);
                            let v1082 = &C::gpr_to_gpr_mem(ctx, v1072);
                            let v1083 = &constructor_cmove(ctx, I64, &CC::NZ, v1082, v1079);
                            let v1084 = constructor_with_flags_reg(ctx, v1081, v1083);
                            let v1085 = C::gpr_new(ctx, v1084);
                            let v1086 = C::gpr_to_reg(ctx, v1085);
                            let v1087 = constructor_imm(ctx, I64, 0x0);
                            let v1088 = C::value_regs(ctx, v1086, v1087);
                            let v1089 = C::output(ctx, v1088);
                            // Rule at src/isa/x64/lower.isle line 2088.
                            return Some(v1089);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v188 = C::use_bmi1(ctx);
                            if v188 == true {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1090 = constructor_x64_tzcnt(ctx, v46, v375);
                                let v1091 = constructor_output_gpr(ctx, v1090);
                                // Rule at src/isa/x64/lower.isle line 2113.
                                return Some(v1091);
                            }
                            let v375 = constructor_put_in_gpr(ctx, v374);
                            let v1092 = constructor_do_ctz(ctx, v46, v46, v375);
                            let v1093 = constructor_output_gpr(ctx, v1092);
                            // Rule at src/isa/x64/lower.isle line 2117.
                            return Some(v1093);
                        }
                        let v1066 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1067) = v1066 {
                            let v1068 =
                                constructor_extend_to_gpr(ctx, v374, I32, &ExtendKind::Zero);
                            let v1094 = constructor_do_ctz(ctx, I32, v1067, v1068);
                            let v1095 = constructor_output_gpr(ctx, v1094);
                            // Rule at src/isa/x64/lower.isle line 2120.
                            return Some(v1095);
                        }
                        if v3 == I128 {
                            let v378 = C::put_in_regs(ctx, v374);
                            let v379 = constructor_value_regs_get_gpr(ctx, v378, 0x0);
                            let v1096 = constructor_do_ctz(ctx, I64, I64, v379);
                            let v1073 = C::put_in_regs(ctx, v374);
                            let v1097 = constructor_value_regs_get_gpr(ctx, v1073, 0x1);
                            let v1098 = constructor_do_ctz(ctx, I64, I64, v1097);
                            let v1077 = RegMemImm::Imm { simm32: 0x40 };
                            let v1078 = &C::gpr_mem_imm_new(ctx, &v1077);
                            let v1099 = constructor_x64_add(ctx, I64, v1098, v1078);
                            let v1100 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0x40, v1096);
                            let v1101 = &C::gpr_to_gpr_mem(ctx, v1099);
                            let v1102 = &constructor_cmove(ctx, I64, &CC::Z, v1101, v1096);
                            let v1103 = constructor_with_flags_reg(ctx, v1100, v1102);
                            let v1104 = C::gpr_new(ctx, v1103);
                            let v1105 = C::gpr_to_reg(ctx, v1104);
                            let v1087 = constructor_imm(ctx, I64, 0x0);
                            let v1106 = C::value_regs(ctx, v1105, v1087);
                            let v1107 = C::output(ctx, v1106);
                            // Rule at src/isa/x64/lower.isle line 2125.
                            return Some(v1107);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1198 = Imm8Reg::Imm8 { imm: 0x8 };
                                let v1199 = &C::imm8_reg_to_imm8_gpr(ctx, &v1198);
                                let v1200 = constructor_x64_rotl(ctx, I16, v375, v1199);
                                let v1201 = constructor_output_gpr(ctx, v1200);
                                // Rule at src/isa/x64/lower.isle line 2376.
                                return Some(v1201);
                            }
                            I32 => {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1202 = constructor_x64_bswap(ctx, I32, v375);
                                let v1203 = constructor_output_gpr(ctx, v1202);
                                // Rule at src/isa/x64/lower.isle line 2379.
                                return Some(v1203);
                            }
                            I64 => {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1204 = constructor_x64_bswap(ctx, I64, v375);
                                let v1205 = constructor_output_gpr(ctx, v1204);
                                // Rule at src/isa/x64/lower.isle line 2382.
                                return Some(v1205);
                            }
                            I128 => {
                                let v378 = C::put_in_regs(ctx, v374);
                                let v1071 = constructor_value_regs_get_gpr(ctx, v378, 0x1);
                                let v1206 = constructor_x64_bswap(ctx, I64, v1071);
                                let v1207 = C::gpr_to_reg(ctx, v1206);
                                let v1191 = C::put_in_regs(ctx, v374);
                                let v1192 = constructor_value_regs_get_gpr(ctx, v1191, 0x0);
                                let v1208 = constructor_x64_bswap(ctx, I64, v1192);
                                let v1209 = C::gpr_to_reg(ctx, v1208);
                                let v1210 = C::value_regs(ctx, v1207, v1209);
                                let v1211 = C::output(ctx, v1210);
                                // Rule at src/isa/x64/lower.isle line 2385.
                                return Some(v1211);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1108 = C::use_popcnt(ctx);
                        if v1108 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v45 = C::ty_32_or_64(ctx, v3);
                            if let Some(v46) = v45 {
                                let v375 = constructor_put_in_gpr(ctx, v374);
                                let v1109 = constructor_x64_popcnt(ctx, v46, v375);
                                let v1110 = constructor_output_gpr(ctx, v1109);
                                // Rule at src/isa/x64/lower.isle line 2144.
                                return Some(v1110);
                            }
                            let v1066 = C::ty_8_or_16(ctx, v3);
                            if let Some(v1067) = v1066 {
                                let v1068 =
                                    constructor_extend_to_gpr(ctx, v374, I32, &ExtendKind::Zero);
                                let v1111 = constructor_x64_popcnt(ctx, I32, v1068);
                                let v1112 = constructor_output_gpr(ctx, v1111);
                                // Rule at src/isa/x64/lower.isle line 2148.
                                return Some(v1112);
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                if v1108 == true {
                                    let v378 = C::put_in_regs(ctx, v374);
                                    let v379 = constructor_value_regs_get_gpr(ctx, v378, 0x0);
                                    let v1113 = constructor_x64_popcnt(ctx, I64, v379);
                                    let v1073 = C::put_in_regs(ctx, v374);
                                    let v1097 = constructor_value_regs_get_gpr(ctx, v1073, 0x1);
                                    let v1114 = constructor_x64_popcnt(ctx, I64, v1097);
                                    let v1115 = &C::gpr_to_gpr_mem_imm(ctx, v1114);
                                    let v1116 = constructor_x64_add(ctx, I64, v1113, v1115);
                                    let v1117 = C::gpr_to_reg(ctx, v1116);
                                    let v1118 = constructor_imm(ctx, I64, 0x0);
                                    let v1119 = C::value_regs(ctx, v1117, v1118);
                                    let v1120 = C::output(ctx, v1119);
                                    // Rule at src/isa/x64/lower.isle line 2152.
                                    return Some(v1120);
                                }
                                let v378 = C::put_in_regs(ctx, v374);
                                let v379 = constructor_value_regs_get_gpr(ctx, v378, 0x0);
                                let v1125 = constructor_do_popcnt(ctx, I64, v379);
                                let v1073 = C::put_in_regs(ctx, v374);
                                let v1097 = constructor_value_regs_get_gpr(ctx, v1073, 0x1);
                                let v1126 = constructor_do_popcnt(ctx, I64, v1097);
                                let v1127 = &C::gpr_to_gpr_mem_imm(ctx, v1126);
                                let v1128 = constructor_x64_add(ctx, I64, v1125, v1127);
                                let v1129 = C::gpr_to_reg(ctx, v1128);
                                let v1118 = constructor_imm(ctx, I64, 0x0);
                                let v1130 = C::value_regs(ctx, v1129, v1118);
                                let v1131 = C::output(ctx, v1130);
                                // Rule at src/isa/x64/lower.isle line 2168.
                                return Some(v1131);
                            }
                            I8X16 => {
                                let v326 = C::use_avx512vl(ctx);
                                if v326 == true {
                                    let v1132 = C::use_avx512bitalg(ctx);
                                    if v1132 == true {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v1133 = constructor_x64_vpopcntb(ctx, v519);
                                        let v1134 = constructor_output_xmm(ctx, v1133);
                                        // Rule at src/isa/x64/lower.isle line 2241.
                                        return Some(v1134);
                                    }
                                }
                                let v518 = C::use_ssse3(ctx);
                                if v518 == true {
                                    let v1136 = C::emit_u128_le_const(
                                        ctx,
                                        0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F,
                                    );
                                    let v1137 = &constructor_const_to_xmm_mem(ctx, v1136);
                                    let v1138 = constructor_put_in_xmm(ctx, v374);
                                    let v1139 = constructor_sse_and(ctx, I8X16, v1138, v1137);
                                    let v1140 = constructor_put_in_xmm(ctx, v374);
                                    let v1142 = &C::xmi_imm(ctx, 0x4);
                                    let v1143 = constructor_x64_psrlw(ctx, v1140, v1142);
                                    let v1144 = constructor_sse_and(ctx, I8X16, v1143, v1137);
                                    let v1146 = C::emit_u128_le_const(
                                        ctx,
                                        0x4030302030202010302020102010100,
                                    );
                                    let v1147 = constructor_x64_xmm_load_const(ctx, I8X16, v1146);
                                    let v1148 = &C::xmm_to_xmm_mem(ctx, v1139);
                                    let v1149 = constructor_x64_pshufb(ctx, v1147, v1148);
                                    let v1150 = &C::xmm_to_xmm_mem(ctx, v1144);
                                    let v1151 = constructor_x64_pshufb(ctx, v1147, v1150);
                                    let v1152 = &C::xmm_to_xmm_mem(ctx, v1151);
                                    let v1153 = constructor_x64_paddb(ctx, v1149, v1152);
                                    let v1154 = constructor_output_xmm(ctx, v1153);
                                    // Rule at src/isa/x64/lower.isle line 2267.
                                    return Some(v1154);
                                }
                                let v1156 =
                                    C::emit_u128_le_const(ctx, 0x77777777777777777777777777777777);
                                let v1157 = &constructor_const_to_xmm_mem(ctx, v1156);
                                let v1138 = constructor_put_in_xmm(ctx, v374);
                                let v1158 = &C::xmi_imm(ctx, 0x1);
                                let v1159 = constructor_x64_psrlq(ctx, v1138, v1158);
                                let v1160 = constructor_x64_pand(ctx, v1159, v1157);
                                let v1161 = &C::xmm_to_xmm_mem(ctx, v1160);
                                let v1162 = constructor_x64_psubb(ctx, v1138, v1161);
                                let v1163 = &C::xmi_imm(ctx, 0x1);
                                let v1164 = constructor_x64_psrlq(ctx, v1160, v1163);
                                let v1165 = constructor_x64_pand(ctx, v1164, v1157);
                                let v1166 = &C::xmm_to_xmm_mem(ctx, v1165);
                                let v1167 = constructor_x64_psubb(ctx, v1162, v1166);
                                let v1168 = &C::xmi_imm(ctx, 0x1);
                                let v1169 = constructor_x64_psrlq(ctx, v1165, v1168);
                                let v1170 = constructor_x64_pand(ctx, v1169, v1157);
                                let v1171 = &C::xmm_to_xmm_mem(ctx, v1170);
                                let v1172 = constructor_x64_psubb(ctx, v1167, v1171);
                                let v1173 = &C::xmi_imm(ctx, 0x4);
                                let v1174 = constructor_x64_psrlw(ctx, v1172, v1173);
                                let v1175 = &C::xmm_to_xmm_mem(ctx, v1174);
                                let v1176 = constructor_x64_paddb(ctx, v1172, v1175);
                                let v1177 =
                                    C::emit_u128_le_const(ctx, 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F);
                                let v1178 = &constructor_const_to_xmm_mem(ctx, v1177);
                                let v1179 = constructor_x64_pand(ctx, v1176, v1178);
                                let v1180 = constructor_output_xmm(ctx, v1179);
                                // Rule at src/isa/x64/lower.isle line 2283.
                                return Some(v1180);
                            }
                            _ => {}
                        }
                        let v45 = C::ty_32_or_64(ctx, v3);
                        if let Some(v46) = v45 {
                            let v375 = constructor_put_in_gpr(ctx, v374);
                            let v1121 = constructor_do_popcnt(ctx, v46, v375);
                            let v1122 = constructor_output_gpr(ctx, v1121);
                            // Rule at src/isa/x64/lower.isle line 2158.
                            return Some(v1122);
                        }
                        let v1066 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1067) = v1066 {
                            let v1068 =
                                constructor_extend_to_gpr(ctx, v374, I32, &ExtendKind::Zero);
                            let v1123 = constructor_do_popcnt(ctx, I32, v1068);
                            let v1124 = constructor_output_gpr(ctx, v1123);
                            // Rule at src/isa/x64/lower.isle line 2163.
                            return Some(v1124);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v519 = &C::put_in_xmm_mem(ctx, v374);
                                let v1295 = constructor_x64_sqrtss(ctx, v519);
                                let v1296 = constructor_output_xmm(ctx, v1295);
                                // Rule at src/isa/x64/lower.isle line 2532.
                                return Some(v1296);
                            }
                            F64 => {
                                let v519 = &C::put_in_xmm_mem(ctx, v374);
                                let v1297 = constructor_x64_sqrtsd(ctx, v519);
                                let v1298 = constructor_output_xmm(ctx, v1297);
                                // Rule at src/isa/x64/lower.isle line 2534.
                                return Some(v1298);
                            }
                            F32X4 => {
                                let v519 = &C::put_in_xmm_mem(ctx, v374);
                                let v1299 = constructor_x64_sqrtps(ctx, v519);
                                let v1300 = constructor_output_xmm(ctx, v1299);
                                // Rule at src/isa/x64/lower.isle line 2536.
                                return Some(v1300);
                            }
                            F64X2 => {
                                let v519 = &C::put_in_xmm_mem(ctx, v374);
                                let v1301 = constructor_x64_sqrtpd(ctx, v519);
                                let v1302 = constructor_output_xmm(ctx, v1301);
                                // Rule at src/isa/x64/lower.isle line 2538.
                                return Some(v1302);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v597 = constructor_imm(ctx, F32, 0x80000000);
                                let v598 = &constructor_reg_to_xmm_mem(ctx, v597);
                                let v599 = constructor_x64_xorps(ctx, v522, v598);
                                let v600 = constructor_output_xmm(ctx, v599);
                                // Rule at src/isa/x64/lower.isle line 1265.
                                return Some(v600);
                            }
                            F64 => {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v602 = constructor_imm(ctx, F64, 0x8000000000000000);
                                let v603 = &constructor_reg_to_xmm_mem(ctx, v602);
                                let v604 = constructor_x64_xorpd(ctx, v522, v603);
                                let v605 = constructor_output_xmm(ctx, v604);
                                // Rule at src/isa/x64/lower.isle line 1268.
                                return Some(v605);
                            }
                            F32X4 => {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v585 = constructor_vector_all_ones(ctx);
                                let v606 = &C::xmi_imm(ctx, 0x1F);
                                let v607 = constructor_x64_pslld(ctx, v585, v606);
                                let v608 = &C::xmm_to_xmm_mem(ctx, v607);
                                let v609 = constructor_x64_xorps(ctx, v522, v608);
                                let v610 = constructor_output_xmm(ctx, v609);
                                // Rule at src/isa/x64/lower.isle line 1271.
                                return Some(v610);
                            }
                            F64X2 => {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v585 = constructor_vector_all_ones(ctx);
                                let v611 = &C::xmi_imm(ctx, 0x3F);
                                let v612 = constructor_x64_psllq(ctx, v585, v611);
                                let v613 = &C::xmm_to_xmm_mem(ctx, v612);
                                let v614 = constructor_x64_xorpd(ctx, v522, v613);
                                let v615 = constructor_output_xmm(ctx, v614);
                                // Rule at src/isa/x64/lower.isle line 1275.
                                return Some(v615);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v576 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v577 = &constructor_reg_to_xmm_mem(ctx, v576);
                                let v578 = constructor_x64_andps(ctx, v522, v577);
                                let v579 = constructor_output_xmm(ctx, v578);
                                // Rule at src/isa/x64/lower.isle line 1247.
                                return Some(v579);
                            }
                            F64 => {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v581 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v582 = &constructor_reg_to_xmm_mem(ctx, v581);
                                let v583 = constructor_x64_andpd(ctx, v522, v582);
                                let v584 = constructor_output_xmm(ctx, v583);
                                // Rule at src/isa/x64/lower.isle line 1250.
                                return Some(v584);
                            }
                            F32X4 => {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v585 = constructor_vector_all_ones(ctx);
                                let v587 = &C::xmi_imm(ctx, 0x1);
                                let v588 = constructor_x64_psrld(ctx, v585, v587);
                                let v589 = &C::xmm_to_xmm_mem(ctx, v588);
                                let v590 = constructor_x64_andps(ctx, v522, v589);
                                let v591 = constructor_output_xmm(ctx, v590);
                                // Rule at src/isa/x64/lower.isle line 1254.
                                return Some(v591);
                            }
                            F64X2 => {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v585 = constructor_vector_all_ones(ctx);
                                let v587 = &C::xmi_imm(ctx, 0x1);
                                let v592 = constructor_x64_psrlq(ctx, v585, v587);
                                let v593 = &C::xmm_to_xmm_mem(ctx, v592);
                                let v594 = constructor_x64_andpd(ctx, v522, v593);
                                let v595 = constructor_output_xmm(ctx, v594);
                                // Rule at src/isa/x64/lower.isle line 1259.
                                return Some(v595);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v2112 = &C::put_in_reg_mem(ctx, v374);
                    let v616 = C::value_type(ctx, v374);
                    let v2114 = constructor_x64_round(ctx, v616, v2112, &RoundImm::RoundUp);
                    let v2115 = constructor_output_xmm(ctx, v2114);
                    // Rule at src/isa/x64/lower.isle line 3938.
                    return Some(v2115);
                }
                &Opcode::Floor => {
                    let v2112 = &C::put_in_reg_mem(ctx, v374);
                    let v616 = C::value_type(ctx, v374);
                    let v2117 = constructor_x64_round(ctx, v616, v2112, &RoundImm::RoundDown);
                    let v2118 = constructor_output_xmm(ctx, v2117);
                    // Rule at src/isa/x64/lower.isle line 3943.
                    return Some(v2118);
                }
                &Opcode::Trunc => {
                    let v2112 = &C::put_in_reg_mem(ctx, v374);
                    let v616 = C::value_type(ctx, v374);
                    let v2123 = constructor_x64_round(ctx, v616, v2112, &RoundImm::RoundZero);
                    let v2124 = constructor_output_xmm(ctx, v2123);
                    // Rule at src/isa/x64/lower.isle line 3953.
                    return Some(v2124);
                }
                &Opcode::Nearest => {
                    let v2112 = &C::put_in_reg_mem(ctx, v374);
                    let v616 = C::value_type(ctx, v374);
                    let v2120 = constructor_x64_round(ctx, v616, v2112, &RoundImm::RoundNearest);
                    let v2121 = constructor_output_xmm(ctx, v2120);
                    // Rule at src/isa/x64/lower.isle line 3948.
                    return Some(v2121);
                }
                &Opcode::IsNull => {
                    let v616 = C::value_type(ctx, v374);
                    if v616 == R64 {
                        let v375 = constructor_put_in_gpr(ctx, v374);
                        let v1213 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0x0, v375);
                        let v1214 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1215 = constructor_with_flags(ctx, v1213, v1214);
                        let v1216 = C::output(ctx, v1215);
                        // Rule at src/isa/x64/lower.isle line 2393.
                        return Some(v1216);
                    }
                }
                &Opcode::IsInvalid => {
                    let v616 = C::value_type(ctx, v374);
                    if v616 == R64 {
                        let v375 = constructor_put_in_gpr(ctx, v374);
                        let v1218 =
                            &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0xFFFFFFFF, v375);
                        let v1214 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1219 = constructor_with_flags(ctx, v1218, v1214);
                        let v1220 = C::output(ctx, v1219);
                        // Rule at src/isa/x64/lower.isle line 2401.
                        return Some(v1220);
                    }
                }
                &Opcode::ScalarToVector => {
                    let v2368 = &C::sinkable_load(ctx, v374);
                    if let Some(v2369) = v2368 {
                        let v616 = C::value_type(ctx, v374);
                        let v2375 = C::ty_64(ctx, v616);
                        if let Some(v2376) = v2375 {
                            let v2372 = &C::sink_load(ctx, v2369);
                            let v2377 = constructor_x64_movsd_load(ctx, v2372);
                            let v2378 = constructor_output_xmm(ctx, v2377);
                            // Rule at src/isa/x64/lower.isle line 4395.
                            return Some(v2378);
                        }
                        let v2370 = C::ty_32(ctx, v616);
                        if let Some(v2371) = v2370 {
                            let v2372 = &C::sink_load(ctx, v2369);
                            let v2373 = constructor_x64_movss_load(ctx, v2372);
                            let v2374 = constructor_output_xmm(ctx, v2373);
                            // Rule at src/isa/x64/lower.isle line 4393.
                            return Some(v2374);
                        }
                    }
                    let v616 = C::value_type(ctx, v374);
                    let v1844 = C::ty_scalar_float(ctx, v616);
                    if let Some(v1845) = v1844 {
                        let v1239 = constructor_output_value(ctx, v374);
                        // Rule at src/isa/x64/lower.isle line 4383.
                        return Some(v1239);
                    }
                    let v375 = constructor_put_in_gpr(ctx, v374);
                    let v2366 = constructor_bitcast_gpr_to_xmm(ctx, v616, v375);
                    let v2367 = constructor_output_xmm(ctx, v2366);
                    // Rule at src/isa/x64/lower.isle line 4388.
                    return Some(v2367);
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v378 = C::put_in_regs(ctx, v374);
                        let v3 = C::value_type(ctx, v2);
                        let v616 = C::value_type(ctx, v374);
                        let v617 = constructor_lower_bmask(ctx, v3, v616, v378);
                        let v618 = C::output(ctx, v617);
                        // Rule at src/isa/x64/lower.isle line 1320.
                        return Some(v618);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v378 = C::put_in_regs(ctx, v374);
                            let v379 = constructor_value_regs_get_gpr(ctx, v378, 0x0);
                            let v1240 = constructor_output_gpr(ctx, v379);
                            // Rule at src/isa/x64/lower.isle line 2451.
                            return Some(v1240);
                        }
                        let v616 = C::value_type(ctx, v374);
                        if v3 == v616 {
                            let v1239 = constructor_output_value(ctx, v374);
                            // Rule at src/isa/x64/lower.isle line 2445.
                            return Some(v1239);
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v616 = C::value_type(ctx, v374);
                                    if v616 == I8X16 {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v1998 = constructor_x64_pmovsxbw(ctx, v519);
                                        let v1999 = constructor_output_xmm(ctx, v1998);
                                        // Rule at src/isa/x64/lower.isle line 3658.
                                        return Some(v1999);
                                    }
                                }
                            }
                            I32X4 => {
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v616 = C::value_type(ctx, v374);
                                    if v616 == I16X8 {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v2000 = constructor_x64_pmovsxwd(ctx, v519);
                                        let v2001 = constructor_output_xmm(ctx, v2000);
                                        // Rule at src/isa/x64/lower.isle line 3661.
                                        return Some(v2001);
                                    }
                                }
                            }
                            I64X2 => {
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v616 = C::value_type(ctx, v374);
                                    if v616 == I32X4 {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v2002 = constructor_x64_pmovsxdq(ctx, v519);
                                        let v2003 = constructor_output_xmm(ctx, v2002);
                                        // Rule at src/isa/x64/lower.isle line 3664.
                                        return Some(v2003);
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v522 = constructor_put_in_xmm(ctx, v374);
                        let v2004 = constructor_lower_swiden_low(ctx, v3, v522);
                        let v2005 = constructor_output_xmm(ctx, v2004);
                        // Rule at src/isa/x64/lower.isle line 3668.
                        return Some(v2005);
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v616 = C::value_type(ctx, v374);
                                if v616 == I8X16 {
                                    let v434 = C::use_sse41(ctx);
                                    if v434 == true {
                                        let v518 = C::use_ssse3(ctx);
                                        if v518 == true {
                                            let v522 = constructor_put_in_xmm(ctx, v374);
                                            let v1305 = &C::xmm_to_xmm_mem(ctx, v522);
                                            let v2006 =
                                                constructor_x64_palignr(ctx, v522, v1305, 0x8);
                                            let v2007 = &C::xmm_to_xmm_mem(ctx, v2006);
                                            let v2008 = constructor_x64_pmovsxbw(ctx, v2007);
                                            let v2009 = constructor_output_xmm(ctx, v2008);
                                            // Rule at src/isa/x64/lower.isle line 3691.
                                            return Some(v2009);
                                        }
                                    }
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v1305 = &C::xmm_to_xmm_mem(ctx, v522);
                                    let v2016 = constructor_x64_punpckhbw(ctx, v522, v1305);
                                    let v2017 = &C::xmi_imm(ctx, 0x8);
                                    let v2018 = constructor_x64_psraw(ctx, v2016, v2017);
                                    let v2019 = constructor_output_xmm(ctx, v2018);
                                    // Rule at src/isa/x64/lower.isle line 3707.
                                    return Some(v2019);
                                }
                            }
                            I32X4 => {
                                let v616 = C::value_type(ctx, v374);
                                if v616 == I16X8 {
                                    let v434 = C::use_sse41(ctx);
                                    if v434 == true {
                                        let v518 = C::use_ssse3(ctx);
                                        if v518 == true {
                                            let v522 = constructor_put_in_xmm(ctx, v374);
                                            let v1305 = &C::xmm_to_xmm_mem(ctx, v522);
                                            let v2006 =
                                                constructor_x64_palignr(ctx, v522, v1305, 0x8);
                                            let v2007 = &C::xmm_to_xmm_mem(ctx, v2006);
                                            let v2010 = constructor_x64_pmovsxwd(ctx, v2007);
                                            let v2011 = constructor_output_xmm(ctx, v2010);
                                            // Rule at src/isa/x64/lower.isle line 3696.
                                            return Some(v2011);
                                        }
                                    }
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v1305 = &C::xmm_to_xmm_mem(ctx, v522);
                                    let v2020 = constructor_x64_punpckhwd(ctx, v522, v1305);
                                    let v1829 = &C::xmi_imm(ctx, 0x10);
                                    let v2021 = constructor_x64_psrad(ctx, v2020, v1829);
                                    let v2022 = constructor_output_xmm(ctx, v2021);
                                    // Rule at src/isa/x64/lower.isle line 3710.
                                    return Some(v2022);
                                }
                            }
                            I64X2 => {
                                let v616 = C::value_type(ctx, v374);
                                if v616 == I32X4 {
                                    let v434 = C::use_sse41(ctx);
                                    if v434 == true {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v2012 = constructor_x64_pshufd(ctx, v519, 0xEE);
                                        let v2013 = &C::xmm_to_xmm_mem(ctx, v2012);
                                        let v2014 = constructor_x64_pmovsxdq(ctx, v2013);
                                        let v2015 = constructor_output_xmm(ctx, v2014);
                                        // Rule at src/isa/x64/lower.isle line 3701.
                                        return Some(v2015);
                                    }
                                    let v519 = &C::put_in_xmm_mem(ctx, v374);
                                    let v2024 = constructor_x64_pshufd(ctx, v519, 0xE);
                                    let v2025 = constructor_xmm_zero(ctx, I32X4);
                                    let v2026 = &C::xmm_to_xmm_mem(ctx, v2024);
                                    let v2027 = constructor_x64_pcmpgtd(ctx, v2025, v2026);
                                    let v2028 = &C::xmm_to_xmm_mem(ctx, v2027);
                                    let v2029 = constructor_x64_punpckldq(ctx, v2024, v2028);
                                    let v2030 = constructor_output_xmm(ctx, v2029);
                                    // Rule at src/isa/x64/lower.isle line 3715.
                                    return Some(v2030);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v616 = C::value_type(ctx, v374);
                                    if v616 == I8X16 {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v2031 = constructor_x64_pmovzxbw(ctx, v519);
                                        let v2032 = constructor_output_xmm(ctx, v2031);
                                        // Rule at src/isa/x64/lower.isle line 3723.
                                        return Some(v2032);
                                    }
                                }
                            }
                            I32X4 => {
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v616 = C::value_type(ctx, v374);
                                    if v616 == I16X8 {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v2033 = constructor_x64_pmovzxwd(ctx, v519);
                                        let v2034 = constructor_output_xmm(ctx, v2033);
                                        // Rule at src/isa/x64/lower.isle line 3726.
                                        return Some(v2034);
                                    }
                                }
                            }
                            I64X2 => {
                                let v434 = C::use_sse41(ctx);
                                if v434 == true {
                                    let v616 = C::value_type(ctx, v374);
                                    if v616 == I32X4 {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v2035 = constructor_x64_pmovzxdq(ctx, v519);
                                        let v2036 = constructor_output_xmm(ctx, v2035);
                                        // Rule at src/isa/x64/lower.isle line 3729.
                                        return Some(v2036);
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v522 = constructor_put_in_xmm(ctx, v374);
                        let v2037 = constructor_lower_uwiden_low(ctx, v3, v522);
                        let v2038 = constructor_output_xmm(ctx, v2037);
                        // Rule at src/isa/x64/lower.isle line 3733.
                        return Some(v2038);
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v616 = C::value_type(ctx, v374);
                                if v616 == I8X16 {
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v523 = constructor_xmm_zero(ctx, I8X16);
                                    let v2039 = &C::xmm_to_xmm_mem(ctx, v523);
                                    let v2040 = constructor_x64_punpckhbw(ctx, v522, v2039);
                                    let v2041 = constructor_output_xmm(ctx, v2040);
                                    // Rule at src/isa/x64/lower.isle line 3748.
                                    return Some(v2041);
                                }
                            }
                            I32X4 => {
                                let v616 = C::value_type(ctx, v374);
                                if v616 == I16X8 {
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v523 = constructor_xmm_zero(ctx, I8X16);
                                    let v2039 = &C::xmm_to_xmm_mem(ctx, v523);
                                    let v2042 = constructor_x64_punpckhwd(ctx, v522, v2039);
                                    let v2043 = constructor_output_xmm(ctx, v2042);
                                    // Rule at src/isa/x64/lower.isle line 3750.
                                    return Some(v2043);
                                }
                            }
                            I64X2 => {
                                let v616 = C::value_type(ctx, v374);
                                if v616 == I32X4 {
                                    let v522 = constructor_put_in_xmm(ctx, v374);
                                    let v1868 = constructor_xmm_zero(ctx, F32X4);
                                    let v1869 = &C::xmm_to_xmm_mem(ctx, v1868);
                                    let v2044 = constructor_x64_unpckhps(ctx, v522, v1869);
                                    let v2045 = constructor_output_xmm(ctx, v2044);
                                    // Rule at src/isa/x64/lower.isle line 3752.
                                    return Some(v2045);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1221 =
                                    constructor_extend_to_gpr(ctx, v374, I64, &ExtendKind::Zero);
                                let v1226 = constructor_output_gpr(ctx, v1221);
                                // Rule at src/isa/x64/lower.isle line 2414.
                                return Some(v1226);
                            }
                            I128 => {
                                let v1221 =
                                    constructor_extend_to_gpr(ctx, v374, I64, &ExtendKind::Zero);
                                let v1222 = C::gpr_to_reg(ctx, v1221);
                                let v1223 = constructor_imm(ctx, I64, 0x0);
                                let v1224 = C::value_regs(ctx, v1222, v1223);
                                let v1225 = C::output(ctx, v1224);
                                // Rule at src/isa/x64/lower.isle line 2410.
                                return Some(v1225);
                            }
                            _ => {}
                        }
                        let v1227 = C::fits_in_32(ctx, v3);
                        if let Some(v1228) = v1227 {
                            let v1068 =
                                constructor_extend_to_gpr(ctx, v374, I32, &ExtendKind::Zero);
                            let v1229 = constructor_output_gpr(ctx, v1068);
                            // Rule at src/isa/x64/lower.isle line 2419.
                            return Some(v1229);
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1230 =
                                    constructor_extend_to_gpr(ctx, v374, I64, &ExtendKind::Sign);
                                let v1236 = constructor_output_gpr(ctx, v1230);
                                // Rule at src/isa/x64/lower.isle line 2434.
                                return Some(v1236);
                            }
                            I128 => {
                                let v1230 =
                                    constructor_extend_to_gpr(ctx, v374, I64, &ExtendKind::Sign);
                                let v834 = Imm8Reg::Imm8 { imm: 0x3F };
                                let v835 = &C::imm8_reg_to_imm8_gpr(ctx, &v834);
                                let v1231 = constructor_x64_sar(ctx, I64, v1230, v835);
                                let v1232 = C::gpr_to_reg(ctx, v1230);
                                let v1233 = C::gpr_to_reg(ctx, v1231);
                                let v1234 = C::value_regs(ctx, v1232, v1233);
                                let v1235 = C::output(ctx, v1234);
                                // Rule at src/isa/x64/lower.isle line 2428.
                                return Some(v1235);
                            }
                            _ => {}
                        }
                        let v1227 = C::fits_in_32(ctx, v3);
                        if let Some(v1228) = v1227 {
                            let v1237 =
                                constructor_extend_to_gpr(ctx, v374, I32, &ExtendKind::Sign);
                            let v1238 = constructor_output_gpr(ctx, v1237);
                            // Rule at src/isa/x64/lower.isle line 2439.
                            return Some(v1238);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v519 = &C::put_in_xmm_mem(ctx, v374);
                            let v1303 = constructor_x64_cvtss2sd(ctx, v519);
                            let v1304 = constructor_output_xmm(ctx, v1303);
                            // Rule at src/isa/x64/lower.isle line 2542.
                            return Some(v1304);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v519 = &C::put_in_xmm_mem(ctx, v374);
                            let v1308 = constructor_x64_cvtsd2ss(ctx, v519);
                            let v1309 = constructor_output_xmm(ctx, v1308);
                            // Rule at src/isa/x64/lower.isle line 2550.
                            return Some(v1309);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v519 = &C::put_in_xmm_mem(ctx, v374);
                            let v1310 = constructor_x64_cvtpd2ps(ctx, v519);
                            let v1311 = constructor_output_xmm(ctx, v1310);
                            // Rule at src/isa/x64/lower.isle line 2554.
                            return Some(v1311);
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v522 = constructor_put_in_xmm(ctx, v374);
                            let v1305 = &C::xmm_to_xmm_mem(ctx, v522);
                            let v1306 = constructor_x64_cvtps2pd(ctx, v1305);
                            let v1307 = constructor_output_xmm(ctx, v1306);
                            // Rule at src/isa/x64/lower.isle line 2546.
                            return Some(v1307);
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v616 = C::value_type(ctx, v374);
                        let v1844 = C::ty_scalar_float(ctx, v616);
                        if let Some(v1845) = v1844 {
                            let v3 = C::value_type(ctx, v2);
                            let v1846 = constructor_cvt_float_to_uint_seq(ctx, v3, v374, false);
                            let v1847 = constructor_output_gpr(ctx, v1846);
                            // Rule at src/isa/x64/lower.isle line 3410.
                            return Some(v1847);
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v616 = C::value_type(ctx, v374);
                        let v1844 = C::ty_scalar_float(ctx, v616);
                        if let Some(v1845) = v1844 {
                            let v3 = C::value_type(ctx, v2);
                            let v1850 = constructor_cvt_float_to_sint_seq(ctx, v3, v374, false);
                            let v1851 = constructor_output_gpr(ctx, v1850);
                            // Rule at src/isa/x64/lower.isle line 3416.
                            return Some(v1851);
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v616 = C::value_type(ctx, v374);
                            if v616 == F32X4 {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v1868 = constructor_xmm_zero(ctx, F32X4);
                                let v1869 = &C::xmm_to_xmm_mem(ctx, v1868);
                                let v1870 = constructor_x64_maxps(ctx, v522, v1869);
                                let v1871 = &C::xmm_to_xmm_mem(ctx, v1868);
                                let v1872 = constructor_x64_pcmpeqd(ctx, v1868, v1871);
                                let v1873 = &C::xmi_imm(ctx, 0x1);
                                let v1874 = constructor_x64_psrld(ctx, v1872, v1873);
                                let v1875 = &C::xmm_to_xmm_mem(ctx, v1874);
                                let v1876 = constructor_x64_cvtdq2ps(ctx, v1875);
                                let v1877 = &C::xmm_to_xmm_mem(ctx, v1870);
                                let v1878 = constructor_x64_cvttps2dq(ctx, v1877);
                                let v1879 = &C::xmm_to_xmm_mem(ctx, v1876);
                                let v1880 = constructor_x64_subps(ctx, v1870, v1879);
                                let v1881 = &C::xmm_to_xmm_mem(ctx, v1880);
                                let v1882 = constructor_x64_cmpps(
                                    ctx,
                                    v1876,
                                    v1881,
                                    &FcmpImm::LessThanOrEqual,
                                );
                                let v1883 = &C::xmm_to_xmm_mem(ctx, v1880);
                                let v1884 = constructor_x64_cvttps2dq(ctx, v1883);
                                let v1885 = &C::xmm_to_xmm_mem(ctx, v1882);
                                let v1886 = constructor_x64_pxor(ctx, v1884, v1885);
                                let v1887 = constructor_xmm_zero(ctx, I32X4);
                                let v1888 = constructor_lower_vec_smax(ctx, I32X4, v1886, v1887);
                                let v1889 = &C::xmm_to_xmm_mem(ctx, v1878);
                                let v1890 = constructor_x64_paddd(ctx, v1888, v1889);
                                let v1891 = constructor_output_xmm(ctx, v1890);
                                // Rule at src/isa/x64/lower.isle line 3494.
                                return Some(v1891);
                            }
                        }
                        let v616 = C::value_type(ctx, v374);
                        let v1844 = C::ty_scalar_float(ctx, v616);
                        if let Some(v1845) = v1844 {
                            let v1848 = constructor_cvt_float_to_uint_seq(ctx, v3, v374, true);
                            let v1849 = constructor_output_gpr(ctx, v1848);
                            // Rule at src/isa/x64/lower.isle line 3413.
                            return Some(v1849);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v616 = C::value_type(ctx, v374);
                            if v616 == F32X4 {
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v1305 = &C::xmm_to_xmm_mem(ctx, v522);
                                let v1854 =
                                    constructor_x64_cmpps(ctx, v522, v1305, &FcmpImm::Equal);
                                let v1855 = &C::xmm_to_xmm_mem(ctx, v1854);
                                let v1856 = constructor_x64_andps(ctx, v522, v1855);
                                let v1857 = &C::xmm_to_xmm_mem(ctx, v1856);
                                let v1858 = constructor_x64_pxor(ctx, v1854, v1857);
                                let v1859 = &C::xmm_to_xmm_mem(ctx, v1856);
                                let v1860 = constructor_x64_cvttps2dq(ctx, v1859);
                                let v1861 = &C::xmm_to_xmm_mem(ctx, v1858);
                                let v1862 = constructor_x64_pand(ctx, v1860, v1861);
                                let v1863 = &C::xmi_imm(ctx, 0x1F);
                                let v1864 = constructor_x64_psrad(ctx, v1862, v1863);
                                let v1865 = &C::xmm_to_xmm_mem(ctx, v1860);
                                let v1866 = constructor_x64_pxor(ctx, v1864, v1865);
                                let v1867 = constructor_output_xmm(ctx, v1866);
                                // Rule at src/isa/x64/lower.isle line 3423.
                                return Some(v1867);
                            }
                        }
                        let v616 = C::value_type(ctx, v374);
                        let v1844 = C::ty_scalar_float(ctx, v616);
                        if let Some(v1845) = v1844 {
                            let v1852 = constructor_cvt_float_to_sint_seq(ctx, v3, v374, true);
                            let v1853 = constructor_output_gpr(ctx, v1852);
                            // Rule at src/isa/x64/lower.isle line 3419.
                            return Some(v1853);
                        }
                    }
                }
                &Opcode::X86Cvtt2dq => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v616 = C::value_type(ctx, v374);
                            if v616 == F32X4 {
                                let v519 = &C::put_in_xmm_mem(ctx, v374);
                                let v1892 = constructor_x64_cvttps2dq(ctx, v519);
                                let v1893 = constructor_output_xmm(ctx, v1892);
                                // Rule at src/isa/x64/lower.isle line 3541.
                                return Some(v1893);
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v616 = C::value_type(ctx, v374);
                                let v1803 = C::fits_in_32(ctx, v616);
                                if let Some(v1804) = v1803 {
                                    let v1805 = C::ty_int(ctx, v1804);
                                    if let Some(v1806) = v1805 {
                                        let v1221 = constructor_extend_to_gpr(
                                            ctx,
                                            v374,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v1807 = &C::gpr_to_gpr_mem(ctx, v1221);
                                        let v1808 = constructor_x64_cvtsi2ss(ctx, I64, v1807);
                                        let v1809 = constructor_output_xmm(ctx, v1808);
                                        // Rule at src/isa/x64/lower.isle line 3337.
                                        return Some(v1809);
                                    }
                                }
                            }
                            F64 => {
                                let v616 = C::value_type(ctx, v374);
                                let v1803 = C::fits_in_32(ctx, v616);
                                if let Some(v1804) = v1803 {
                                    let v1805 = C::ty_int(ctx, v1804);
                                    if let Some(v1806) = v1805 {
                                        let v1221 = constructor_extend_to_gpr(
                                            ctx,
                                            v374,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v1807 = &C::gpr_to_gpr_mem(ctx, v1221);
                                        let v1810 = constructor_x64_cvtsi2sd(ctx, I64, v1807);
                                        let v1811 = constructor_output_xmm(ctx, v1810);
                                        // Rule at src/isa/x64/lower.isle line 3340.
                                        return Some(v1811);
                                    }
                                }
                            }
                            F32X4 => {
                                let v326 = C::use_avx512vl(ctx);
                                if v326 == true {
                                    let v327 = C::use_avx512f(ctx);
                                    if v327 == true {
                                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                                        let v1824 = constructor_x64_vcvtudq2ps(ctx, v519);
                                        let v1825 = constructor_output_xmm(ctx, v1824);
                                        // Rule at src/isa/x64/lower.isle line 3358.
                                        return Some(v1825);
                                    }
                                }
                                let v522 = constructor_put_in_xmm(ctx, v374);
                                let v1827 = &C::xmi_imm(ctx, 0x10);
                                let v1828 = constructor_x64_pslld(ctx, v522, v1827);
                                let v1829 = &C::xmi_imm(ctx, 0x10);
                                let v1830 = constructor_x64_psrld(ctx, v1828, v1829);
                                let v1831 = &C::xmm_to_xmm_mem(ctx, v1830);
                                let v1832 = constructor_x64_psubd(ctx, v522, v1831);
                                let v1833 = &C::xmm_to_xmm_mem(ctx, v1830);
                                let v1834 = constructor_x64_cvtdq2ps(ctx, v1833);
                                let v1835 = &C::xmi_imm(ctx, 0x1);
                                let v1836 = constructor_x64_psrld(ctx, v1832, v1835);
                                let v1837 = &C::xmm_to_xmm_mem(ctx, v1836);
                                let v1838 = constructor_x64_cvtdq2ps(ctx, v1837);
                                let v1839 = &C::xmm_to_xmm_mem(ctx, v1838);
                                let v1840 = constructor_x64_addps(ctx, v1838, v1839);
                                let v1841 = &C::xmm_to_xmm_mem(ctx, v1834);
                                let v1842 = constructor_x64_addps(ctx, v1840, v1841);
                                let v1843 = constructor_output_xmm(ctx, v1842);
                                // Rule at src/isa/x64/lower.isle line 3386.
                                return Some(v1843);
                            }
                            F64X2 => {
                                let v1794 = C::def_inst(ctx, v374);
                                if let Some(v1795) = v1794 {
                                    let v1796 = &C::inst_data(ctx, v1795);
                                    if let &InstructionData::Unary {
                                        opcode: ref v1797,
                                        arg: v1798,
                                    } = v1796
                                    {
                                        if let &Opcode::UwidenLow = v1797 {
                                            let v1799 = C::value_type(ctx, v1798);
                                            if v1799 == I32X4 {
                                                let v1815 =
                                                    C::emit_u128_le_const(ctx, 0x4330000043300000);
                                                let v1816 =
                                                    &constructor_const_to_xmm_mem(ctx, v1815);
                                                let v1817 = constructor_put_in_xmm(ctx, v1798);
                                                let v1818 =
                                                    constructor_x64_unpcklps(ctx, v1817, v1816);
                                                let v1820 = C::emit_u128_le_const(
                                                    ctx,
                                                    0x43300000000000004330000000000000,
                                                );
                                                let v1821 =
                                                    &constructor_const_to_xmm_mem(ctx, v1820);
                                                let v1822 =
                                                    constructor_x64_subpd(ctx, v1818, v1821);
                                                let v1823 = constructor_output_xmm(ctx, v1822);
                                                // Rule at src/isa/x64/lower.isle line 3350.
                                                return Some(v1823);
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v616 = C::value_type(ctx, v374);
                        if v616 == I64 {
                            let v375 = constructor_put_in_gpr(ctx, v374);
                            let v1812 = constructor_cvt_u64_to_float_seq(ctx, v3, v375);
                            let v1813 = constructor_output_xmm(ctx, v1812);
                            // Rule at src/isa/x64/lower.isle line 3343.
                            return Some(v1813);
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v616 = C::value_type(ctx, v374);
                                match v616 {
                                    I8 => {
                                        let v1237 = constructor_extend_to_gpr(
                                            ctx,
                                            v374,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1778 = &C::gpr_to_gpr_mem(ctx, v1237);
                                        let v1779 = constructor_x64_cvtsi2ss(ctx, I32, v1778);
                                        let v1780 = constructor_output_xmm(ctx, v1779);
                                        // Rule at src/isa/x64/lower.isle line 3311.
                                        return Some(v1780);
                                    }
                                    I16 => {
                                        let v1237 = constructor_extend_to_gpr(
                                            ctx,
                                            v374,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1778 = &C::gpr_to_gpr_mem(ctx, v1237);
                                        let v1779 = constructor_x64_cvtsi2ss(ctx, I32, v1778);
                                        let v1780 = constructor_output_xmm(ctx, v1779);
                                        // Rule at src/isa/x64/lower.isle line 3314.
                                        return Some(v1780);
                                    }
                                    _ => {}
                                }
                                let v1781 = C::ty_int(ctx, v616);
                                if let Some(v1782) = v1781 {
                                    let v1783 = C::fits_in_64(ctx, v1782);
                                    if let Some(v1784) = v1783 {
                                        let v1785 = &constructor_put_in_gpr_mem(ctx, v374);
                                        let v1786 = constructor_x64_cvtsi2ss(ctx, v1784, v1785);
                                        let v1787 = constructor_output_xmm(ctx, v1786);
                                        // Rule at src/isa/x64/lower.isle line 3317.
                                        return Some(v1787);
                                    }
                                }
                            }
                            F64 => {
                                let v616 = C::value_type(ctx, v374);
                                match v616 {
                                    I8 => {
                                        let v1237 = constructor_extend_to_gpr(
                                            ctx,
                                            v374,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1778 = &C::gpr_to_gpr_mem(ctx, v1237);
                                        let v1788 = constructor_x64_cvtsi2sd(ctx, I32, v1778);
                                        let v1789 = constructor_output_xmm(ctx, v1788);
                                        // Rule at src/isa/x64/lower.isle line 3320.
                                        return Some(v1789);
                                    }
                                    I16 => {
                                        let v1237 = constructor_extend_to_gpr(
                                            ctx,
                                            v374,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1778 = &C::gpr_to_gpr_mem(ctx, v1237);
                                        let v1788 = constructor_x64_cvtsi2sd(ctx, I32, v1778);
                                        let v1789 = constructor_output_xmm(ctx, v1788);
                                        // Rule at src/isa/x64/lower.isle line 3323.
                                        return Some(v1789);
                                    }
                                    _ => {}
                                }
                                let v1781 = C::ty_int(ctx, v616);
                                if let Some(v1782) = v1781 {
                                    let v1783 = C::fits_in_64(ctx, v1782);
                                    if let Some(v1784) = v1783 {
                                        let v1785 = &constructor_put_in_gpr_mem(ctx, v374);
                                        let v1790 = constructor_x64_cvtsi2sd(ctx, v1784, v1785);
                                        let v1791 = constructor_output_xmm(ctx, v1790);
                                        // Rule at src/isa/x64/lower.isle line 3326.
                                        return Some(v1791);
                                    }
                                }
                            }
                            F64X2 => {
                                let v1794 = C::def_inst(ctx, v374);
                                if let Some(v1795) = v1794 {
                                    let v1796 = &C::inst_data(ctx, v1795);
                                    if let &InstructionData::Unary {
                                        opcode: ref v1797,
                                        arg: v1798,
                                    } = v1796
                                    {
                                        if let &Opcode::SwidenLow = v1797 {
                                            let v1799 = C::value_type(ctx, v1798);
                                            if v1799 == I32X4 {
                                                let v1800 = &C::put_in_xmm_mem(ctx, v1798);
                                                let v1801 = constructor_x64_cvtdq2pd(ctx, v1800);
                                                let v1802 = constructor_output_xmm(ctx, v1801);
                                                // Rule at src/isa/x64/lower.isle line 3332.
                                                return Some(v1802);
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v616 = C::value_type(ctx, v374);
                    if v616 == I32X4 {
                        let v519 = &C::put_in_xmm_mem(ctx, v374);
                        let v1792 = constructor_x64_cvtdq2ps(ctx, v519);
                        let v1793 = constructor_output_xmm(ctx, v1792);
                        // Rule at src/isa/x64/lower.isle line 3329.
                        return Some(v1793);
                    }
                }
                &Opcode::Isplit => {
                    let v616 = C::value_type(ctx, v374);
                    if v616 == I128 {
                        let v378 = C::put_in_regs(ctx, v374);
                        let v2497 = C::value_regs_get(ctx, v378, 0x0);
                        let v2498 = C::value_regs_get(ctx, v378, 0x1);
                        let v2499 = C::value_reg(ctx, v2497);
                        let v2500 = C::value_reg(ctx, v2498);
                        let v2501 = C::output_pair(ctx, v2499, v2500);
                        // Rule at src/isa/x64/lower.isle line 4567.
                        return Some(v2501);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v2208,
            constant_handle: v2209,
        } => {
            if let &Opcode::Vconst = v2208 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v2210 = C::const_to_vconst(ctx, v2209);
                    let v3 = C::value_type(ctx, v2);
                    let v2211 = constructor_x64_xmm_load_const(ctx, v3, v2210);
                    let v2212 = constructor_output_xmm(ctx, v2211);
                    // Rule at src/isa/x64/lower.isle line 4137.
                    return Some(v2212);
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1674,
            global_value: v1675,
        } => {
            match v1674 {
                &Opcode::SymbolValue => {
                    let v1676 = C::symbol_value_data(ctx, v1675);
                    if let Some(v1677) = v1676 {
                        let v1681 = constructor_load_ext_name(ctx, v1677.0, v1677.2, v1677.1);
                        let v1682 = constructor_output_reg(ctx, v1681);
                        // Rule at src/isa/x64/lower.isle line 3156.
                        return Some(v1682);
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1676 = C::symbol_value_data(ctx, v1675);
                        if let Some(v1677) = v1676 {
                            let v3 = C::value_type(ctx, v2);
                            let v2502 = &C::tls_model(ctx, v3);
                            match v2502 {
                                &TlsModel::ElfGd => {
                                    let v2503 = constructor_elf_tls_get_addr(ctx, v1677.0);
                                    let v2504 = constructor_output_gpr(ctx, v2503);
                                    // Rule at src/isa/x64/lower.isle line 4575.
                                    return Some(v2504);
                                }
                                &TlsModel::Macho => {
                                    let v2505 = constructor_macho_tls_get_addr(ctx, v1677.0);
                                    let v2506 = constructor_output_gpr(ctx, v2505);
                                    // Rule at src/isa/x64/lower.isle line 4578.
                                    return Some(v2506);
                                }
                                &TlsModel::Coff => {
                                    let v2507 = constructor_coff_tls_get_addr(ctx, v1677.0);
                                    let v2508 = constructor_output_gpr(ctx, v2507);
                                    // Rule at src/isa/x64/lower.isle line 4581.
                                    return Some(v2508);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v18,
            imm: v19,
        } => {
            if let &Opcode::F32const = v18 {
                let v20 = C::u32_from_ieee32(ctx, v19);
                let v22 = C::u32_as_u64(ctx, v20);
                let v23 = constructor_imm(ctx, F32, v22);
                let v24 = constructor_output_reg(ctx, v23);
                // Rule at src/isa/x64/lower.isle line 27.
                return Some(v24);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v25,
            imm: v26,
        } => {
            if let &Opcode::F64const = v25 {
                let v27 = C::u64_from_ieee64(ctx, v26);
                let v29 = constructor_imm(ctx, F64, v27);
                let v30 = constructor_output_reg(ctx, v29);
                // Rule at src/isa/x64/lower.isle line 32.
                return Some(v30);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } => {
            if let &Opcode::Iconst = v7 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v13 = constructor_imm(ctx, I64, v9);
                        let v15 = constructor_imm(ctx, I64, 0x0);
                        let v16 = C::value_regs(ctx, v13, v15);
                        let v17 = C::output(ctx, v16);
                        // Rule at src/isa/x64/lower.isle line 20.
                        return Some(v17);
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v10 = constructor_imm(ctx, v5, v9);
                        let v11 = constructor_output_reg(ctx, v10);
                        // Rule at src/isa/x64/lower.isle line 15.
                        return Some(v11);
                    }
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v55,
            arg: v56,
            table: v57,
        } => {
            if let &Opcode::BrTable = v55 {
                let v59 = C::jump_table_targets(ctx, arg1);
                if let Some(v60) = v59 {
                    let v58 = C::value_type(ctx, v56);
                    let v63 = &C::raw_operand_size_of_type(ctx, v58);
                    let v64 = C::jump_table_size(ctx, &v60.1);
                    let v65 = C::u32_as_u64(ctx, v64);
                    let v66 = constructor_imm(ctx, v58, v65);
                    let v69 = constructor_extend_to_gpr(ctx, v56, I64, &ExtendKind::Zero);
                    let v70 = &constructor_reg_to_gpr_mem_imm(ctx, v66);
                    let v71 = &constructor_x64_cmp(ctx, v63, v70, v69);
                    let v73 = &C::gpr_to_gpr_mem(ctx, v69);
                    let v74 = C::gpr_new(ctx, v66);
                    let v75 = &constructor_cmove(ctx, v58, &CC::B, v73, v74);
                    let v76 = constructor_with_flags_reg(ctx, v71, v75);
                    let v77 = C::gpr_new(ctx, v76);
                    let v78 = &constructor_jmp_table_seq(ctx, v58, v77, v60.0, &v60.1);
                    let v79 = constructor_emit_side_effect(ctx, v78);
                    // Rule at src/isa/x64/lower.isle line 3285.
                    return Some(v79);
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v9,
            arg: v10,
            blocks: ref v11,
        } => {
            if let &Opcode::Brif = v9 {
                let v26 = C::two_targets(ctx, arg1);
                if let Some(v27) = v26 {
                    let v12 = C::maybe_uextend(ctx, v10);
                    if let Some(v13) = v12 {
                        let v14 = C::def_inst(ctx, v13);
                        if let Some(v15) = v14 {
                            let v16 = &C::inst_data(ctx, v15);
                            match v16 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v33,
                                    args: ref v34,
                                    cond: ref v35,
                                } => {
                                    if let &Opcode::Fcmp = v33 {
                                        let v36 = C::unpack_value_array_2(ctx, v34);
                                        let v39 = &constructor_emit_fcmp(ctx, v35, v36.0, v36.1);
                                        let v40 =
                                            &constructor_jmp_cond_fcmp(ctx, v39, v27.0, v27.1);
                                        let v41 = constructor_emit_side_effect(ctx, v40);
                                        // Rule at src/isa/x64/lower.isle line 3246.
                                        return Some(v41);
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v17,
                                    args: ref v18,
                                    cond: ref v19,
                                } => {
                                    if let &Opcode::Icmp = v17 {
                                        let v20 = C::unpack_value_array_2(ctx, v18);
                                        let v30 = &constructor_emit_cmp(ctx, v19, v20.0, v20.1);
                                        let v31 =
                                            &constructor_jmp_cond_icmp(ctx, v30, v27.0, v27.1);
                                        let v32 = constructor_emit_side_effect(ctx, v31);
                                        // Rule at src/isa/x64/lower.isle line 3243.
                                        return Some(v32);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v42 = C::value_type(ctx, v10);
                    if v42 == I128 {
                        let v44 = C::put_in_regs(ctx, v10);
                        let v45 = &constructor_cmp_zero_i128(ctx, &CC::Z, v44);
                        let v46 = &constructor_jmp_cond_icmp(ctx, v45, v27.0, v27.1);
                        let v47 = constructor_emit_side_effect(ctx, v46);
                        // Rule at src/isa/x64/lower.isle line 3249.
                        return Some(v47);
                    }
                    let v48 = C::ty_int_bool_or_ref(ctx, v42);
                    if let Some(v49) = v48 {
                        let v50 = &constructor_cmp_zero_int_bool_ref(ctx, v10);
                        let v52 = &constructor_jmp_cond(ctx, &CC::NZ, v27.0, v27.1);
                        let v53 = &constructor_with_flags_side_effect(ctx, v50, v52);
                        let v54 = constructor_emit_side_effect(ctx, v53);
                        // Rule at src/isa/x64/lower.isle line 3253.
                        return Some(v54);
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_jmp_known(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    // Rule at src/isa/x64/lower.isle line 3238.
                    return Some(v8);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term construct_overflow_op.
pub fn constructor_construct_overflow_op<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &ProducesFlags,
) -> InstOutput {
    let v2 = &constructor_x64_setcc_paired(ctx, arg0);
    let v3 = constructor_with_flags(ctx, arg1, v2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v6 = C::value_reg(ctx, v5);
    let v8 = C::value_regs_get(ctx, v3, 0x1);
    let v9 = C::value_reg(ctx, v8);
    let v10 = C::output_pair(ctx, v6, v9);
    // Rule at src/isa/x64/lower.isle line 104.
    return v10;
}

// Generated as internal constructor for term construct_overflow_op_alu.
pub fn constructor_construct_overflow_op_alu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &AluRmiROpcode,
    arg3: Gpr,
    arg4: &GprMemImm,
) -> InstOutput {
    let v5 = &constructor_x64_alurmi_with_flags_paired(ctx, arg2, arg0, arg3, arg4);
    let v6 = constructor_construct_overflow_op(ctx, arg1, v5);
    // Rule at src/isa/x64/lower.isle line 111.
    return v6;
}

// Generated as internal constructor for term construct_overflow_op_alu_128.
pub fn constructor_construct_overflow_op_alu_128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &AluRmiROpcode,
    arg2: &AluRmiROpcode,
    arg3: Value,
    arg4: Value,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg3);
    let v7 = constructor_value_regs_get_gpr(ctx, v5, 0x0);
    let v9 = constructor_value_regs_get_gpr(ctx, v5, 0x1);
    let v10 = C::put_in_regs(ctx, arg4);
    let v11 = constructor_value_regs_get_gpr(ctx, v10, 0x0);
    let v12 = constructor_value_regs_get_gpr(ctx, v10, 0x1);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
    let v15 = &constructor_x64_alurmi_with_flags_paired(ctx, arg1, I64, v7, v14);
    let v16 = &C::gpr_to_gpr_mem_imm(ctx, v12);
    let v17 = &constructor_x64_alurmi_with_flags_chained(ctx, arg2, I64, v9, v16);
    let v18 = &constructor_x64_setcc_paired(ctx, arg0);
    let v19 = &constructor_with_flags_chained(ctx, v15, v17, v18);
    let v20 = constructor_multi_reg_to_pair_and_single(ctx, v19);
    // Rule at src/isa/x64/lower.isle line 119.
    return v20;
}

// Generated as internal constructor for term sse_and.
pub fn constructor_sse_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 293.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 294.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 291.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 292.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pand(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 295.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and", "src/isa/x64/lower.isle line 290"
    )
}

// Generated as internal constructor for term and_i128.
pub fn constructor_and_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_and(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_and(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src/isa/x64/lower.isle line 304.
    return v13;
}

// Generated as internal constructor for term sse_and_not.
pub fn constructor_sse_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v3 = constructor_x64_andnps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 322.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andnpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 323.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pandn(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 324.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and_not", "src/isa/x64/lower.isle line 321"
    )
}

// Generated as internal constructor for term sse_or.
pub fn constructor_sse_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 396.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 397.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 394.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 395.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_por(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 398.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_or", "src/isa/x64/lower.isle line 393"
    )
}

// Generated as internal constructor for term or_i128.
pub fn constructor_or_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: ValueRegs) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_or(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_or(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src/isa/x64/lower.isle line 407.
    return v13;
}

// Generated as internal constructor for term shl_i128.
pub fn constructor_shl_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shl(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shl(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shr(ctx, I64, v3, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, v24, arg1);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v10);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, v35, arg1);
    let v37 = &C::gpr_to_gpr_mem(ctx, v8);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v20);
    let v39 = &C::gpr_to_gpr_mem(ctx, v32);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v8);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 479.
    return v42;
}

// Generated as internal constructor for term ishl_i8x16_mask.
pub fn constructor_ishl_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ishl_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0x0,
                base: v6,
                index: v10,
                shift: 0x0,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src/isa/x64/lower.isle line 553.
            return v15.clone();
        }
        &RegMemImm::Mem { addr: ref v16 } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg { reg: v18 };
            let v20 = &constructor_ishl_i8x16_mask(ctx, &v19);
            // Rule at src/isa/x64/lower.isle line 564.
            return v20.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ishl_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 544.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ishl_i8x16_mask", "src/isa/x64/lower.isle line 538"
    )
}

// Generated as internal constructor for term shr_i128.
pub fn constructor_shr_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shr(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, v24, arg1);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v8);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, v35, arg1);
    let v37 = &C::gpr_to_gpr_mem(ctx, v32);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v10);
    let v39 = &C::gpr_to_gpr_mem(ctx, v10);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v20);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 589.
    return v42;
}

// Generated as internal constructor for term ushr_i8x16_mask.
pub fn constructor_ushr_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ushr_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0x0,
                base: v6,
                index: v10,
                shift: 0x0,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src/isa/x64/lower.isle line 658.
            return v15.clone();
        }
        &RegMemImm::Mem { addr: ref v16 } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg { reg: v18 };
            let v20 = &constructor_ushr_i8x16_mask(ctx, &v19);
            // Rule at src/isa/x64/lower.isle line 670.
            return v20.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ushr_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 649.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ushr_i8x16_mask", "src/isa/x64/lower.isle line 643"
    )
}

// Generated as internal constructor for term mask_xmm_shift.
pub fn constructor_mask_xmm_shift<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> RegMemImm {
    let v11 = C::def_inst(ctx, arg1);
    if let Some(v12) = v11 {
        let v13 = &C::inst_data(ctx, v12);
        if let &InstructionData::UnaryImm {
            opcode: ref v14,
            imm: v15,
        } = v13
        {
            if let &Opcode::Iconst = v14 {
                let v16 = C::shift_amount_masked(ctx, arg0, v15);
                let v17 = C::u8_as_u32(ctx, v16);
                let v18 = RegMemImm::Imm { simm32: v17 };
                // Rule at src/isa/x64/lower.isle line 687.
                return v18;
            }
        }
    }
    let v3 = constructor_put_in_gpr(ctx, arg1);
    let v4 = C::shift_mask(ctx, arg0);
    let v5 = C::u8_as_u32(ctx, v4);
    let v6 = RegMemImm::Imm { simm32: v5 };
    let v7 = &C::gpr_mem_imm_new(ctx, &v6);
    let v8 = constructor_x64_and(ctx, I64, v3, v7);
    let v9 = C::gpr_to_reg(ctx, v8);
    let v10 = &C::reg_to_reg_mem_imm(ctx, v9);
    // Rule at src/isa/x64/lower.isle line 685.
    return v10.clone();
}

// Generated as internal constructor for term sar_i128.
pub fn constructor_sar_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_sar(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v20 = RegMemImm::Imm { simm32: 0x7F };
    let v21 = &C::gpr_mem_imm_new(ctx, &v20);
    let v22 = &constructor_x64_test(ctx, &OperandSize::Size64, v21, arg1);
    let v25 = constructor_imm(ctx, I64, 0x0);
    let v26 = &C::reg_to_gpr_mem(ctx, v25);
    let v27 = &constructor_cmove(ctx, I64, &CC::Z, v26, v17);
    let v28 = constructor_with_flags_reg(ctx, v22, v27);
    let v29 = C::gpr_new(ctx, v28);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
    let v31 = constructor_x64_or(ctx, I64, v8, v30);
    let v33 = &C::imm8_to_imm8_gpr(ctx, 0x3F);
    let v34 = constructor_x64_sar(ctx, I64, v5, v33);
    let v36 = RegMemImm::Imm { simm32: 0x40 };
    let v37 = &C::gpr_mem_imm_new(ctx, &v36);
    let v38 = &constructor_x64_test(ctx, &OperandSize::Size64, v37, arg1);
    let v39 = &C::gpr_to_gpr_mem(ctx, v31);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v10);
    let v41 = &C::gpr_to_gpr_mem(ctx, v10);
    let v42 = &constructor_cmove(ctx, I64, &CC::Z, v41, v34);
    let v43 = &constructor_consumes_flags_concat(ctx, v40, v42);
    let v44 = constructor_with_flags(ctx, v38, v43);
    // Rule at src/isa/x64/lower.isle line 701.
    return v44;
}

// Generated as internal constructor for term sshr_i8x16_bigger_shift.
pub fn constructor_sshr_i8x16_bigger_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMemImm,
) -> XmmMemImm {
    match arg1 {
        &RegMemImm::Reg { reg: v7 } => {
            let v8 = C::gpr_new(ctx, v7);
            let v9 = RegMemImm::Imm { simm32: 0x8 };
            let v10 = &C::gpr_mem_imm_new(ctx, &v9);
            let v11 = constructor_x64_add(ctx, arg0, v8, v10);
            let v12 = C::gpr_to_reg(ctx, v11);
            let v13 = RegMemImm::Reg { reg: v12 };
            let v14 = &constructor_mov_rmi_to_xmm(ctx, &v13);
            // Rule at src/isa/x64/lower.isle line 769.
            return v14.clone();
        }
        &RegMemImm::Mem { addr: ref v15 } => {
            let v17 = constructor_imm(ctx, arg0, 0x8);
            let v18 = C::gpr_new(ctx, v17);
            let v19 = &C::gpr_mem_imm_new(ctx, arg1);
            let v20 = constructor_x64_add(ctx, arg0, v18, v19);
            let v21 = C::gpr_to_reg(ctx, v20);
            let v22 = RegMemImm::Reg { reg: v21 };
            let v23 = &constructor_mov_rmi_to_xmm(ctx, &v22);
            // Rule at src/isa/x64/lower.isle line 773.
            return v23.clone();
        }
        &RegMemImm::Imm { simm32: v2 } => {
            let v4 = C::u32_add(ctx, v2, 0x8);
            let v5 = RegMemImm::Imm { simm32: v4 };
            let v6 = &C::xmm_mem_imm_new(ctx, &v5);
            // Rule at src/isa/x64/lower.isle line 767.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sshr_i8x16_bigger_shift", "src/isa/x64/lower.isle line 766"
    )
}

// Generated as internal constructor for term lower_i64x2_sshr_imm.
pub fn constructor_lower_i64x2_sshr_imm<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u32) -> Xmm {
    let v2 = C::u32_as_u64(ctx, arg1);
    let v4 = C::u64_lt(ctx, v2, 0x20);
    if v4 == true {
        let v5 = &C::xmi_imm(ctx, arg1);
        let v6 = constructor_x64_psrad(ctx, arg0, v5);
        let v7 = &C::xmm_to_xmm_mem(ctx, v6);
        let v9 = constructor_x64_pshufd(ctx, v7, 0xED);
        let v10 = &C::xmi_imm(ctx, arg1);
        let v11 = constructor_x64_psrlq(ctx, arg0, v10);
        let v12 = &C::xmm_to_xmm_mem(ctx, v11);
        let v14 = constructor_x64_pshufd(ctx, v12, 0xE8);
        let v15 = &C::xmm_to_xmm_mem(ctx, v9);
        let v16 = constructor_x64_punpckldq(ctx, v14, v15);
        // Rule at src/isa/x64/lower.isle line 812.
        return v16;
    }
    if arg1 == 0x20 {
        let v17 = &C::xmm_to_xmm_mem(ctx, arg0);
        let v18 = constructor_x64_pshufd(ctx, v17, 0xED);
        let v20 = &C::xmi_imm(ctx, 0x1F);
        let v21 = constructor_x64_psrad(ctx, arg0, v20);
        let v22 = &C::xmm_to_xmm_mem(ctx, v21);
        let v23 = constructor_x64_pshufd(ctx, v22, 0xED);
        let v24 = &C::xmm_to_xmm_mem(ctx, v23);
        let v25 = constructor_x64_punpckldq(ctx, v18, v24);
        // Rule at src/isa/x64/lower.isle line 823.
        return v25;
    }
    let v26 = C::u64_lt(ctx, 0x20, v2);
    if v26 == true {
        let v27 = &C::xmi_imm(ctx, 0x1F);
        let v28 = constructor_x64_psrad(ctx, arg0, v27);
        let v29 = &C::xmm_to_xmm_mem(ctx, v28);
        let v30 = constructor_x64_pshufd(ctx, v29, 0xED);
        let v32 = C::u32_sub(ctx, arg1, 0x20);
        let v33 = &C::xmi_imm(ctx, v32);
        let v34 = constructor_x64_psrad(ctx, arg0, v33);
        let v35 = &C::xmm_to_xmm_mem(ctx, v34);
        let v36 = constructor_x64_pshufd(ctx, v35, 0xED);
        let v37 = &C::xmm_to_xmm_mem(ctx, v30);
        let v38 = constructor_x64_punpckldq(ctx, v36, v37);
        // Rule at src/isa/x64/lower.isle line 834.
        return v38;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_i64x2_sshr_imm", "src/isa/x64/lower.isle line 807"
    )
}

// Generated as internal constructor for term lower_i64x2_sshr_gpr.
pub fn constructor_lower_i64x2_sshr_gpr<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Gpr) -> Xmm {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v3 = constructor_x64_movq_to_xmm(ctx, v2);
    let v5 = constructor_flip_high_bit_mask(ctx, I64X2);
    let v6 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v7 = constructor_x64_psrlq(ctx, v5, v6);
    let v8 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v9 = constructor_x64_psrlq(ctx, arg0, v8);
    let v10 = &C::xmm_to_xmm_mem(ctx, v9);
    let v11 = constructor_x64_pxor(ctx, v7, v10);
    let v12 = &C::xmm_to_xmm_mem(ctx, v7);
    let v13 = constructor_x64_psubq(ctx, v11, v12);
    // Rule at src/isa/x64/lower.isle line 849.
    return v13;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v23 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
        let v25 = C::gpr_to_reg(ctx, v24);
        let v26 = C::gpr_to_reg(ctx, v24);
        let v27 = C::value_regs(ctx, v25, v26);
        // Rule at src/isa/x64/lower.isle line 1312.
        return v27;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v16 = constructor_value_regs_get_gpr(ctx, arg2, 0x1);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v16);
            let v19 = constructor_x64_or(ctx, I64, v8, v18);
            let v20 = C::gpr_to_reg(ctx, v19);
            let v21 = C::value_reg(ctx, v20);
            let v22 = constructor_lower_bmask(ctx, v2, I64, v21);
            // Rule at src/isa/x64/lower.isle line 1304.
            return v22;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v9 = &constructor_x64_neg_paired(ctx, v5, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v8);
            let v11 = &constructor_x64_sbb_paired(ctx, v2, v8, v10);
            let v12 = constructor_with_flags(ctx, v9, v11);
            let v14 = C::value_regs_get(ctx, v12, 0x1);
            let v15 = C::value_reg(ctx, v14);
            // Rule at src/isa/x64/lower.isle line 1293.
            return v15;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/x64/lower.isle line 1281"
    )
}

// Generated as internal constructor for term i128_not.
pub fn constructor_i128_not<C: Context>(ctx: &mut C, arg0: Value) -> ValueRegs {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = constructor_value_regs_get_gpr(ctx, v1, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, v1, 0x1);
    let v7 = constructor_x64_not(ctx, I64, v3);
    let v8 = constructor_x64_not(ctx, I64, v5);
    let v9 = constructor_value_gprs(ctx, v7, v8);
    // Rule at src/isa/x64/lower.isle line 1335.
    return v9;
}

// Generated as internal constructor for term all_ones_or_all_zeros.
pub fn constructor_all_ones_or_all_zeros<C: Context>(ctx: &mut C, arg0: Value) -> Option<bool> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v16,
                args: ref v17,
                cond: ref v18,
            } => {
                if let &Opcode::Fcmp = v16 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        // Rule at src/isa/x64/lower.isle line 1381.
                        return Some(true);
                    }
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        // Rule at src/isa/x64/lower.isle line 1380.
                        return Some(true);
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v22,
                constant_handle: v23,
            } => {
                if let &Opcode::Vconst = v22 {
                    let v24 = C::vconst_all_ones_or_all_zeros(ctx, v23);
                    if let Some(v25) = v24 {
                        // Rule at src/isa/x64/lower.isle line 1382.
                        return Some(true);
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &RegMem,
    arg3: u8,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v4 = C::use_sse41(ctx);
            if v4 == true {
                let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
                let v6 = constructor_x64_pinsrb(ctx, arg1, v5, arg3);
                // Rule at src/isa/x64/lower.isle line 1450.
                return v6;
            }
            let v7 = C::insert_i8x16_lane_hole(ctx, arg3);
            let v8 = &constructor_const_to_xmm_mem(ctx, v7);
            let v9 = constructor_x64_pand(ctx, arg1, v8);
            let v11 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v12 = constructor_x64_movzx(ctx, &ExtMode::BL, v11);
            let v15 = C::u8_and(ctx, arg3, 0x3);
            let v16 = C::u8_shl(ctx, v15, 0x3);
            let v17 = Imm8Reg::Imm8 { imm: v16 };
            let v18 = &C::imm8_reg_to_imm8_gpr(ctx, &v17);
            let v19 = constructor_x64_shl(ctx, I32, v12, v18);
            let v20 = &C::gpr_to_gpr_mem(ctx, v19);
            let v21 = constructor_x64_movd_to_xmm(ctx, v20);
            let v22 = &C::xmm_to_xmm_mem(ctx, v21);
            let v24 = C::u8_shr(ctx, arg3, 0x2);
            let v25 = constructor_insert_i8x16_lane_pshufd_imm(ctx, v24);
            let v26 = constructor_x64_pshufd(ctx, v22, v25);
            let v27 = &C::xmm_to_xmm_mem(ctx, v26);
            let v28 = constructor_x64_por(ctx, v9, v27);
            // Rule at src/isa/x64/lower.isle line 1478.
            return v28;
        }
        I16X8 => {
            let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v29 = constructor_x64_pinsrw(ctx, arg1, v5, arg3);
            // Rule at src/isa/x64/lower.isle line 1495.
            return v29;
        }
        I32X4 => {
            let v4 = C::use_sse41(ctx);
            if v4 == true {
                let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
                let v30 = constructor_x64_pinsrd(ctx, arg1, v5, arg3);
                // Rule at src/isa/x64/lower.isle line 1499.
                return v30;
            }
            match arg3 {
                0x0 => {
                    let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
                    let v31 = constructor_x64_movd_to_xmm(ctx, v5);
                    let v32 = constructor_x64_movss_regmove(ctx, arg1, v31);
                    // Rule at src/isa/x64/lower.isle line 1503.
                    return v32;
                }
                0x1 => {
                    let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
                    let v31 = constructor_x64_movd_to_xmm(ctx, v5);
                    let v33 = &C::xmm_to_xmm_mem(ctx, arg1);
                    let v34 = constructor_x64_punpcklqdq(ctx, v31, v33);
                    let v35 = &C::xmm_to_xmm_mem(ctx, arg1);
                    let v37 = constructor_x64_shufps(ctx, v34, v35, 0xE2);
                    // Rule at src/isa/x64/lower.isle line 1508.
                    return v37;
                }
                0x2 => {
                    let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
                    let v31 = constructor_x64_movd_to_xmm(ctx, v5);
                    let v33 = &C::xmm_to_xmm_mem(ctx, arg1);
                    let v39 = constructor_x64_shufps(ctx, v31, v33, 0x30);
                    let v40 = &C::xmm_to_xmm_mem(ctx, v39);
                    let v42 = constructor_x64_shufps(ctx, arg1, v40, 0x84);
                    // Rule at src/isa/x64/lower.isle line 1515.
                    return v42;
                }
                0x3 => {
                    let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
                    let v31 = constructor_x64_movd_to_xmm(ctx, v5);
                    let v33 = &C::xmm_to_xmm_mem(ctx, arg1);
                    let v44 = constructor_x64_shufps(ctx, v31, v33, 0xE4);
                    let v45 = &C::xmm_to_xmm_mem(ctx, v44);
                    let v47 = constructor_x64_shufps(ctx, arg1, v45, 0x24);
                    // Rule at src/isa/x64/lower.isle line 1522.
                    return v47;
                }
                _ => {}
            }
        }
        I64X2 => {
            let v4 = C::use_sse41(ctx);
            if v4 == true {
                let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
                let v48 = constructor_x64_pinsrq(ctx, arg1, v5, arg3);
                // Rule at src/isa/x64/lower.isle line 1528.
                return v48;
            }
            match arg3 {
                0x0 => {
                    let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
                    let v49 = constructor_x64_movq_to_xmm(ctx, v5);
                    let v50 = constructor_x64_movsd_regmove(ctx, arg1, v49);
                    // Rule at src/isa/x64/lower.isle line 1531.
                    return v50;
                }
                0x1 => {
                    let v5 = &C::reg_mem_to_gpr_mem(ctx, arg2);
                    let v49 = constructor_x64_movq_to_xmm(ctx, v5);
                    let v51 = &C::xmm_to_xmm_mem(ctx, v49);
                    let v52 = constructor_x64_punpcklqdq(ctx, arg1, v51);
                    // Rule at src/isa/x64/lower.isle line 1533.
                    return v52;
                }
                _ => {}
            }
        }
        F32X4 => {
            let v4 = C::use_sse41(ctx);
            if v4 == true {
                let v53 = &C::reg_mem_to_xmm_mem(ctx, arg2);
                let v54 = C::sse_insertps_lane_imm(ctx, arg3);
                let v55 = constructor_x64_insertps(ctx, arg1, v53, v54);
                // Rule at src/isa/x64/lower.isle line 1537.
                return v55;
            }
            match arg2 {
                &RegMem::Reg { reg: v56 } => {
                    match arg3 {
                        0x0 => {
                            let v57 = C::xmm_new(ctx, v56);
                            let v58 = constructor_x64_movss_regmove(ctx, arg1, v57);
                            // Rule at src/isa/x64/lower.isle line 1542.
                            return v58;
                        }
                        0x1 => {
                            let v57 = C::xmm_new(ctx, v56);
                            let v59 = &C::xmm_to_xmm_mem(ctx, arg1);
                            let v60 = constructor_x64_movlhps(ctx, v57, v59);
                            let v61 = &C::xmm_to_xmm_mem(ctx, arg1);
                            let v62 = constructor_x64_shufps(ctx, v60, v61, 0xE2);
                            // Rule at src/isa/x64/lower.isle line 1548.
                            return v62;
                        }
                        0x2 => {
                            let v57 = C::xmm_new(ctx, v56);
                            let v59 = &C::xmm_to_xmm_mem(ctx, arg1);
                            let v63 = constructor_x64_shufps(ctx, v57, v59, 0x30);
                            let v64 = &C::xmm_to_xmm_mem(ctx, v63);
                            let v65 = constructor_x64_shufps(ctx, arg1, v64, 0x84);
                            // Rule at src/isa/x64/lower.isle line 1555.
                            return v65;
                        }
                        0x3 => {
                            let v57 = C::xmm_new(ctx, v56);
                            let v59 = &C::xmm_to_xmm_mem(ctx, arg1);
                            let v66 = constructor_x64_shufps(ctx, v57, v59, 0xE4);
                            let v67 = &C::xmm_to_xmm_mem(ctx, v66);
                            let v68 = constructor_x64_shufps(ctx, arg1, v67, 0x24);
                            // Rule at src/isa/x64/lower.isle line 1562.
                            return v68;
                        }
                        _ => {}
                    }
                }
                &RegMem::Mem { addr: ref v69 } => {
                    let v71 = constructor_x64_movss_load(ctx, v69);
                    let v72 = C::xmm_to_reg(ctx, v71);
                    let v73 = &constructor_xmm_to_reg_mem(ctx, v72);
                    let v74 = &C::xmm_mem_to_reg_mem(ctx, v73);
                    let v75 = constructor_vec_insert_lane(ctx, F32X4, arg1, v74, arg3);
                    // Rule at src/isa/x64/lower.isle line 1567.
                    return v75;
                }
                _ => {}
            }
        }
        F64X2 => {
            match arg3 {
                0x0 => {
                    match arg2 {
                        &RegMem::Reg { reg: v56 } => {
                            let v57 = C::xmm_new(ctx, v56);
                            let v76 = constructor_x64_movsd_regmove(ctx, arg1, v57);
                            // Rule at src/isa/x64/lower.isle line 1579.
                            return v76;
                        }
                        &RegMem::Mem { addr: ref v69 } => {
                            let v77 = constructor_x64_movsd_load(ctx, v69);
                            let v78 = constructor_x64_movsd_regmove(ctx, arg1, v77);
                            // Rule at src/isa/x64/lower.isle line 1581.
                            return v78;
                        }
                        _ => {}
                    }
                }
                0x1 => {
                    let v53 = &C::reg_mem_to_xmm_mem(ctx, arg2);
                    let v79 = constructor_x64_movlhps(ctx, arg1, v53);
                    // Rule at src/isa/x64/lower.isle line 1589.
                    return v79;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane", "src/isa/x64/lower.isle line 1447"
    )
}

// Generated as internal constructor for term insert_i8x16_lane_pshufd_imm.
pub fn constructor_insert_i8x16_lane_pshufd_imm<C: Context>(ctx: &mut C, arg0: u8) -> u8 {
    match arg0 {
        0x0 => {
            // Rule at src/isa/x64/lower.isle line 1489.
            return 0x54;
        }
        0x1 => {
            // Rule at src/isa/x64/lower.isle line 1490.
            return 0x51;
        }
        0x2 => {
            // Rule at src/isa/x64/lower.isle line 1491.
            return 0x45;
        }
        0x3 => {
            // Rule at src/isa/x64/lower.isle line 1492.
            return 0x15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "insert_i8x16_lane_pshufd_imm", "src/isa/x64/lower.isle line 1488"
    )
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = &C::raw_operand_size_of_type(ctx, v2);
        let v7 = C::put_in_reg(ctx, arg2);
        let v8 = C::put_in_reg(ctx, arg3);
        let v9 = &constructor_reg_to_gpr_mem_imm(ctx, v7);
        let v10 = C::gpr_new(ctx, v8);
        let v11 = &constructor_x64_cmp(ctx, v6, v9, v10);
        let v12 = &C::reg_to_gpr_mem(ctx, v8);
        let v13 = C::gpr_new(ctx, v7);
        let v14 = &constructor_cmove(ctx, v2, arg1, v12, v13);
        let v15 = constructor_with_flags_reg(ctx, v11, v14);
        let v16 = C::value_reg(ctx, v15);
        // Rule at src/isa/x64/lower.isle line 1597.
        return v16;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src/isa/x64/lower.isle line 1596"
    )
}

// Generated as internal constructor for term has_pmins.
pub fn constructor_has_pmins<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/x64/lower.isle line 1623.
            return true;
        }
        I64X2 => {
            // Rule at src/isa/x64/lower.isle line 1624.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1625.
    return v3;
}

// Generated as internal constructor for term has_pmaxs.
pub fn constructor_has_pmaxs<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/x64/lower.isle line 1628.
            return true;
        }
        I64X2 => {
            // Rule at src/isa/x64/lower.isle line 1629.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1630.
    return v3;
}

// Generated as internal constructor for term has_pmaxu.
pub fn constructor_has_pmaxu<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/x64/lower.isle line 1633.
            return true;
        }
        I64X2 => {
            // Rule at src/isa/x64/lower.isle line 1634.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1635.
    return v3;
}

// Generated as internal constructor for term has_pminu.
pub fn constructor_has_pminu<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/x64/lower.isle line 1638.
            return true;
        }
        I64X2 => {
            // Rule at src/isa/x64/lower.isle line 1639.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1640.
    return v3;
}

// Generated as internal constructor for term lower_vec_smax.
pub fn constructor_lower_vec_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
) -> Xmm {
    let v3 = constructor_has_pmaxs(ctx, arg0);
    if v3 == true {
        let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
        let v5 = constructor_x64_pmaxs(ctx, arg0, arg1, v4);
        // Rule at src/isa/x64/lower.isle line 1648.
        return v5;
    }
    let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v6 = constructor_x64_pcmpgt(ctx, arg0, arg1, v4);
    let v7 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v8 = constructor_x64_pand(ctx, v6, v7);
    let v9 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v10 = constructor_x64_pandn(ctx, v6, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v10);
    let v12 = constructor_x64_por(ctx, v8, v11);
    // Rule at src/isa/x64/lower.isle line 1652.
    return v12;
}

// Generated as internal constructor for term flip_high_bit_mask.
pub fn constructor_flip_high_bit_mask<C: Context>(ctx: &mut C, arg0: Type) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000);
            let v3 = &constructor_const_to_xmm_mem(ctx, v2);
            let v4 = constructor_x64_movdqu_load(ctx, v3);
            // Rule at src/isa/x64/lower.isle line 1707.
            return v4;
        }
        I32X4 => {
            let v6 = C::emit_u128_le_const(ctx, 0x80000000800000008000000080000000);
            let v7 = &constructor_const_to_xmm_mem(ctx, v6);
            let v8 = constructor_x64_movdqu_load(ctx, v7);
            // Rule at src/isa/x64/lower.isle line 1709.
            return v8;
        }
        I64X2 => {
            let v10 = C::emit_u128_le_const(ctx, 0x80000000000000008000000000000000);
            let v11 = &constructor_const_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            // Rule at src/isa/x64/lower.isle line 1711.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flip_high_bit_mask", "src/isa/x64/lower.isle line 1706"
    )
}

// Generated as internal constructor for term lower_select_fcmp.
pub fn constructor_lower_select_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FcmpCondResult,
    arg2: Value,
    arg3: Value,
) -> InstOutput {
    match arg1 {
        &FcmpCondResult::Condition {
            producer: ref v2,
            cc: ref v3,
        } => {
            let v6 = &constructor_cmove_from_values(ctx, arg0, v3, arg2, arg3);
            let v7 = constructor_with_flags(ctx, v2, v6);
            let v8 = C::output(ctx, v7);
            // Rule at src/isa/x64/lower.isle line 2030.
            return v8;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v9,
            cc1: ref v10,
            cc2: ref v11,
        } => {
            let v12 = &constructor_cmove_or_from_values(ctx, arg0, v10, v11, arg2, arg3);
            let v13 = constructor_with_flags(ctx, v9, v12);
            let v14 = C::output(ctx, v13);
            // Rule at src/isa/x64/lower.isle line 2032.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select_fcmp", "src/isa/x64/lower.isle line 2029"
    )
}

// Generated as internal constructor for term do_clz.
pub fn constructor_do_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v5 = constructor_imm_i64(ctx, I64, -0x1);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = constructor_bsr_or_else(ctx, arg0, arg2, v6);
    let v8 = C::gpr_to_reg(ctx, v7);
    let v9 = C::ty_bits_u64(ctx, arg1);
    let v11 = C::u64_sub(ctx, v9, 0x1);
    let v12 = constructor_imm(ctx, arg0, v11);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &constructor_reg_to_gpr_mem_imm(ctx, v8);
    let v15 = constructor_x64_sub(ctx, arg0, v13, v14);
    // Rule at src/isa/x64/lower.isle line 2103.
    return v15;
}

// Generated as internal constructor for term do_ctz.
pub fn constructor_do_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v4 = C::ty_bits_u64(ctx, arg1);
    let v5 = constructor_imm(ctx, I64, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = constructor_bsf_or_else(ctx, arg0, arg2, v6);
    // Rule at src/isa/x64/lower.isle line 2139.
    return v7;
}

// Generated as internal constructor for term do_popcnt.
pub fn constructor_do_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    match arg0 {
        I32 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v47 = constructor_x64_shr(ctx, I32, arg1, v5);
            let v49 = constructor_imm(ctx, I32, 0x77777777);
            let v50 = C::gpr_new(ctx, v49);
            let v51 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v52 = constructor_x64_and(ctx, I32, v47, v51);
            let v53 = &C::gpr_to_gpr_mem_imm(ctx, v52);
            let v54 = constructor_x64_sub(ctx, I32, arg1, v53);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v55 = constructor_x64_shr(ctx, I32, v52, v14);
            let v56 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v57 = constructor_x64_and(ctx, I32, v55, v56);
            let v58 = &C::gpr_to_gpr_mem_imm(ctx, v57);
            let v59 = constructor_x64_sub(ctx, I32, v54, v58);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v60 = constructor_x64_shr(ctx, I32, v57, v20);
            let v61 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v62 = constructor_x64_and(ctx, I32, v60, v61);
            let v63 = &C::gpr_to_gpr_mem_imm(ctx, v62);
            let v64 = constructor_x64_sub(ctx, I32, v59, v63);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v65 = constructor_x64_shr(ctx, I32, v64, v28);
            let v66 = &C::gpr_to_gpr_mem_imm(ctx, v64);
            let v67 = constructor_x64_add(ctx, I32, v65, v66);
            let v69 = RegMemImm::Imm { simm32: 0xF0F0F0F };
            let v70 = &C::gpr_mem_imm_new(ctx, &v69);
            let v71 = constructor_x64_and(ctx, I32, v67, v70);
            let v73 = RegMemImm::Imm { simm32: 0x1010101 };
            let v74 = &C::gpr_mem_imm_new(ctx, &v73);
            let v75 = constructor_x64_mul(ctx, I32, v71, v74);
            let v77 = Imm8Reg::Imm8 { imm: 0x18 };
            let v78 = &C::imm8_reg_to_imm8_gpr(ctx, &v77);
            let v79 = constructor_x64_shr(ctx, I32, v75, v78);
            // Rule at src/isa/x64/lower.isle line 2221.
            return v79;
        }
        I64 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v6 = constructor_x64_shr(ctx, I64, arg1, v5);
            let v8 = constructor_imm(ctx, I64, 0x7777777777777777);
            let v9 = C::gpr_new(ctx, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v11 = constructor_x64_and(ctx, I64, v6, v10);
            let v12 = &C::gpr_to_gpr_mem_imm(ctx, v11);
            let v13 = constructor_x64_sub(ctx, I64, arg1, v12);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v15 = constructor_x64_shr(ctx, I64, v11, v14);
            let v16 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v17 = constructor_x64_and(ctx, I64, v15, v16);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v17);
            let v19 = constructor_x64_sub(ctx, I64, v13, v18);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v21 = constructor_x64_shr(ctx, I64, v17, v20);
            let v22 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v23 = constructor_x64_and(ctx, I64, v21, v22);
            let v24 = &C::gpr_to_gpr_mem_imm(ctx, v23);
            let v25 = constructor_x64_sub(ctx, I64, v19, v24);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v29 = constructor_x64_shr(ctx, I64, v25, v28);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v25);
            let v31 = constructor_x64_add(ctx, I64, v29, v30);
            let v33 = constructor_imm(ctx, I64, 0xF0F0F0F0F0F0F0F);
            let v34 = C::gpr_new(ctx, v33);
            let v35 = &C::gpr_to_gpr_mem_imm(ctx, v34);
            let v36 = constructor_x64_and(ctx, I64, v31, v35);
            let v38 = constructor_imm(ctx, I64, 0x101010101010101);
            let v39 = C::gpr_new(ctx, v38);
            let v40 = &C::gpr_to_gpr_mem_imm(ctx, v39);
            let v41 = constructor_x64_mul(ctx, I64, v36, v40);
            let v43 = Imm8Reg::Imm8 { imm: 0x38 };
            let v44 = &C::imm8_reg_to_imm8_gpr(ctx, &v43);
            let v45 = constructor_x64_shr(ctx, I64, v41, v44);
            // Rule at src/isa/x64/lower.isle line 2178.
            return v45;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_popcnt", "src/isa/x64/lower.isle line 2177"
    )
}

// Generated as internal constructor for term do_bitrev8.
pub fn constructor_do_bitrev8<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::ty_mask(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, 0x5555555555555555);
    let v5 = constructor_imm(ctx, arg0, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v8 = constructor_x64_and(ctx, arg0, arg1, v7);
    let v10 = Imm8Reg::Imm8 { imm: 0x1 };
    let v11 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v12 = constructor_x64_shr(ctx, arg0, arg1, v11);
    let v13 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v14 = constructor_x64_and(ctx, arg0, v12, v13);
    let v15 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v16 = constructor_x64_shl(ctx, arg0, v8, v15);
    let v17 = &C::gpr_to_gpr_mem_imm(ctx, v14);
    let v18 = constructor_x64_or(ctx, arg0, v16, v17);
    let v20 = C::u64_and(ctx, v2, 0x3333333333333333);
    let v21 = constructor_imm(ctx, arg0, v20);
    let v22 = C::gpr_new(ctx, v21);
    let v23 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v24 = constructor_x64_and(ctx, arg0, v18, v23);
    let v26 = Imm8Reg::Imm8 { imm: 0x2 };
    let v27 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v28 = constructor_x64_shr(ctx, arg0, v18, v27);
    let v29 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v30 = constructor_x64_and(ctx, arg0, v28, v29);
    let v31 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v32 = constructor_x64_shl(ctx, arg0, v24, v31);
    let v33 = &C::gpr_to_gpr_mem_imm(ctx, v30);
    let v34 = constructor_x64_or(ctx, arg0, v32, v33);
    let v36 = C::u64_and(ctx, v2, 0xF0F0F0F0F0F0F0F);
    let v37 = constructor_imm(ctx, arg0, v36);
    let v38 = C::gpr_new(ctx, v37);
    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v40 = constructor_x64_and(ctx, arg0, v34, v39);
    let v42 = Imm8Reg::Imm8 { imm: 0x4 };
    let v43 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v44 = constructor_x64_shr(ctx, arg0, v34, v43);
    let v45 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v46 = constructor_x64_and(ctx, arg0, v44, v45);
    let v47 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v48 = constructor_x64_shl(ctx, arg0, v40, v47);
    let v49 = &C::gpr_to_gpr_mem_imm(ctx, v46);
    let v50 = constructor_x64_or(ctx, arg0, v48, v49);
    // Rule at src/isa/x64/lower.isle line 2315.
    return v50;
}

// Generated as internal constructor for term do_bitrev16.
pub fn constructor_do_bitrev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev8(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFF00FF00FF00FF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x8 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 2338.
    return v19;
}

// Generated as internal constructor for term do_bitrev32.
pub fn constructor_do_bitrev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev16(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFFFF0000FFFF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x10 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 2350.
    return v19;
}

// Generated as internal constructor for term do_bitrev64.
pub fn constructor_do_bitrev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    if arg0 == I64 {
        let v2 = constructor_do_bitrev32(ctx, arg0, arg1);
        let v4 = constructor_imm(ctx, arg0, 0xFFFFFFFF);
        let v5 = C::gpr_new(ctx, v4);
        let v6 = &C::gpr_to_gpr_mem_imm(ctx, v5);
        let v7 = constructor_x64_and(ctx, arg0, v2, v6);
        let v9 = Imm8Reg::Imm8 { imm: 0x20 };
        let v10 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v11 = constructor_x64_shr(ctx, arg0, v2, v10);
        let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v13 = constructor_x64_shl(ctx, arg0, v7, v12);
        let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
        let v15 = constructor_x64_or(ctx, arg0, v13, v14);
        // Rule at src/isa/x64/lower.isle line 2362.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_bitrev64", "src/isa/x64/lower.isle line 2361"
    )
}

// Generated as internal constructor for term fmadd.
pub fn constructor_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fnmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2796.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fnmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2795.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2791.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2790.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2785.
    return v7;
}

// Generated as internal constructor for term fnmadd.
pub fn constructor_fnmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2804.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2803.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfnmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2800.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfnmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2799.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfnmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2798.
    return v7;
}

// Generated as internal constructor for term cmp_zero_i128.
pub fn constructor_cmp_zero_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: ValueRegs,
) -> IcmpCondResult {
    let v1 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
        let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
        let v10 = RegMemImm::Imm { simm32: 0x0 };
        let v11 = &C::gpr_mem_imm_new(ctx, &v10);
        let v12 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v11, v5);
        let v14 = &constructor_x64_setcc(ctx, &CC::Z);
        let v15 = constructor_with_flags_reg(ctx, v12, v14);
        let v16 = C::gpr_new(ctx, v15);
        let v17 = &C::gpr_mem_imm_new(ctx, &v10);
        let v18 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v17, v7);
        let v19 = &constructor_x64_setcc(ctx, &CC::Z);
        let v20 = constructor_with_flags_reg(ctx, v18, v19);
        let v21 = C::gpr_new(ctx, v20);
        let v23 = &C::gpr_to_gpr_mem_imm(ctx, v16);
        let v24 = &constructor_x64_test(ctx, &OperandSize::Size8, v23, v21);
        let v25 = &constructor_icmp_cond_result(ctx, v24, v2);
        // Rule at src/isa/x64/lower.isle line 3267.
        return v25.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_zero_i128", "src/isa/x64/lower.isle line 3266"
    )
}

// Generated as internal constructor for term cmp_zero_int_bool_ref.
pub fn constructor_cmp_zero_int_bool_ref<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::raw_operand_size_of_type(ctx, v1);
    let v3 = constructor_put_in_gpr(ctx, arg0);
    let v4 = &C::gpr_to_gpr_mem_imm(ctx, v3);
    let v5 = &constructor_x64_test(ctx, v2, v4, v3);
    // Rule at src/isa/x64/lower.isle line 3278.
    return v5.clone();
}

// Generated as internal constructor for term lower_swiden_low.
pub fn constructor_lower_swiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v3 = constructor_x64_punpcklbw(ctx, arg1, v2);
            let v5 = &C::xmi_imm(ctx, 0x8);
            let v6 = constructor_x64_psraw(ctx, v3, v5);
            // Rule at src/isa/x64/lower.isle line 3675.
            return v6;
        }
        I32X4 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v7 = constructor_x64_punpcklwd(ctx, arg1, v2);
            let v9 = &C::xmi_imm(ctx, 0x10);
            let v10 = constructor_x64_psrad(ctx, v7, v9);
            // Rule at src/isa/x64/lower.isle line 3677.
            return v10;
        }
        I64X2 => {
            let v12 = constructor_xmm_zero(ctx, I32X4);
            let v13 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v14 = constructor_x64_pcmpgtd(ctx, v12, v13);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_punpckldq(ctx, arg1, v15);
            // Rule at src/isa/x64/lower.isle line 3683.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_swiden_low", "src/isa/x64/lower.isle line 3670"
    )
}

// Generated as internal constructor for term lower_uwiden_low.
pub fn constructor_lower_uwiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Xmm {
    match arg0 {
        I16X8 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v5 = constructor_x64_punpcklbw(ctx, arg1, v4);
            // Rule at src/isa/x64/lower.isle line 3738.
            return v5;
        }
        I32X4 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v6 = constructor_x64_punpcklwd(ctx, arg1, v4);
            // Rule at src/isa/x64/lower.isle line 3739.
            return v6;
        }
        I64X2 => {
            let v8 = constructor_xmm_zero(ctx, F32X4);
            let v9 = &C::xmm_to_xmm_mem(ctx, v8);
            let v10 = constructor_x64_unpcklps(ctx, arg1, v9);
            // Rule at src/isa/x64/lower.isle line 3740.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_uwiden_low", "src/isa/x64/lower.isle line 3737"
    )
}

// Generated as internal constructor for term unarrow_i32x4_lanes_to_low_u16_lanes.
pub fn constructor_unarrow_i32x4_lanes_to_low_u16_lanes<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v2 = constructor_xmm_zero(ctx, I32X4);
    let v3 = &C::xmm_to_xmm_mem(ctx, v2);
    let v4 = constructor_x64_pcmpgtd(ctx, arg0, v3);
    let v5 = &C::xmm_to_xmm_mem(ctx, v4);
    let v6 = constructor_x64_pand(ctx, arg0, v5);
    let v8 = C::emit_u128_le_const(ctx, 0xFFFF0000FFFF0000FFFF0000FFFF);
    let v9 = &constructor_const_to_xmm_mem(ctx, v8);
    let v10 = constructor_x64_movdqu_load(ctx, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v6);
    let v12 = constructor_x64_pcmpgtd(ctx, v10, v11);
    let v13 = &C::xmm_to_xmm_mem(ctx, v12);
    let v14 = constructor_x64_pand(ctx, v6, v13);
    let v15 = &C::xmm_to_xmm_mem(ctx, v10);
    let v16 = constructor_x64_pandn(ctx, v12, v15);
    let v17 = &C::xmm_to_xmm_mem(ctx, v16);
    let v18 = constructor_x64_por(ctx, v14, v17);
    let v19 = &C::xmm_to_xmm_mem(ctx, v18);
    let v21 = constructor_x64_pshuflw(ctx, v19, 0x8);
    let v22 = &C::xmm_to_xmm_mem(ctx, v21);
    let v23 = constructor_x64_pshufhw(ctx, v22, 0x8);
    let v24 = &C::xmm_to_xmm_mem(ctx, v23);
    let v25 = constructor_x64_pshufd(ctx, v24, 0x8);
    // Rule at src/isa/x64/lower.isle line 3820.
    return v25;
}

// Generated as internal constructor for term x64_round.
pub fn constructor_x64_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMem,
    arg2: &RoundImm,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v5 = constructor_x64_roundss(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 3888.
                return v5;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                // Rule at src/isa/x64/lower.isle line 3901.
                return v13;
            }
        }
        F64 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v6 = constructor_x64_roundsd(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 3891.
                return v6;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                // Rule at src/isa/x64/lower.isle line 3902.
                return v17;
            }
        }
        F32X4 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v7 = constructor_x64_roundps(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 3894.
                return v7;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v20 = constructor_x64_pshufd(ctx, v18, 0x1);
                let v21 = C::xmm_to_reg(ctx, v20);
                let v22 = C::libcall_1(ctx, v11, v21);
                let v23 = C::xmm_new(ctx, v22);
                let v25 = C::xmm_to_reg(ctx, v23);
                let v26 = &constructor_xmm_to_reg_mem(ctx, v25);
                let v27 = &C::xmm_mem_to_reg_mem(ctx, v26);
                let v28 = constructor_vec_insert_lane(ctx, F32X4, v13, v27, 0x1);
                let v29 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v31 = constructor_x64_pshufd(ctx, v29, 0x2);
                let v32 = C::xmm_to_reg(ctx, v31);
                let v33 = C::libcall_1(ctx, v11, v32);
                let v34 = C::xmm_new(ctx, v33);
                let v35 = C::xmm_to_reg(ctx, v34);
                let v36 = &constructor_xmm_to_reg_mem(ctx, v35);
                let v37 = &C::xmm_mem_to_reg_mem(ctx, v36);
                let v38 = constructor_vec_insert_lane(ctx, F32X4, v28, v37, 0x2);
                let v39 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v41 = constructor_x64_pshufd(ctx, v39, 0x3);
                let v42 = C::xmm_to_reg(ctx, v41);
                let v43 = C::libcall_1(ctx, v11, v42);
                let v44 = C::xmm_new(ctx, v43);
                let v45 = C::xmm_to_reg(ctx, v44);
                let v46 = &constructor_xmm_to_reg_mem(ctx, v45);
                let v47 = &C::xmm_mem_to_reg_mem(ctx, v46);
                let v48 = constructor_vec_insert_lane(ctx, F32X4, v38, v47, 0x3);
                // Rule at src/isa/x64/lower.isle line 3903.
                return v48;
            }
        }
        F64X2 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v8 = constructor_x64_roundpd(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 3897.
                return v8;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v50 = constructor_x64_pshufd(ctx, v18, 0xE);
                let v51 = C::xmm_to_reg(ctx, v50);
                let v52 = C::libcall_1(ctx, v15, v51);
                let v53 = C::xmm_new(ctx, v52);
                let v55 = C::xmm_to_reg(ctx, v53);
                let v56 = &constructor_xmm_to_reg_mem(ctx, v55);
                let v57 = &C::xmm_mem_to_reg_mem(ctx, v56);
                let v58 = constructor_vec_insert_lane(ctx, F64X2, v17, v57, 0x1);
                // Rule at src/isa/x64/lower.isle line 3915.
                return v58;
            }
        }
        _ => {}
    }
    if let &RegMem::Mem { addr: ref v59 } = arg1 {
        let v61 = constructor_x64_load(ctx, arg0, v59, &ExtKind::ZeroExtend);
        let v62 = RegMem::Reg { reg: v61 };
        let v63 = constructor_x64_round(ctx, arg0, &v62, arg2);
        // Rule at src/isa/x64/lower.isle line 3923.
        return v63;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_round", "src/isa/x64/lower.isle line 3887"
    )
}

// Generated as internal constructor for term round_libcall.
pub fn constructor_round_libcall<C: Context>(ctx: &mut C, arg0: Type, arg1: &RoundImm) -> LibCall {
    match arg0 {
        F32 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src/isa/x64/lower.isle line 3931.
                    return LibCall::NearestF32;
                }
                &RoundImm::RoundDown => {
                    // Rule at src/isa/x64/lower.isle line 3929.
                    return LibCall::FloorF32;
                }
                &RoundImm::RoundUp => {
                    // Rule at src/isa/x64/lower.isle line 3927.
                    return LibCall::CeilF32;
                }
                &RoundImm::RoundZero => {
                    // Rule at src/isa/x64/lower.isle line 3933.
                    return LibCall::TruncF32;
                }
                _ => {}
            }
        }
        F64 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src/isa/x64/lower.isle line 3932.
                    return LibCall::NearestF64;
                }
                &RoundImm::RoundDown => {
                    // Rule at src/isa/x64/lower.isle line 3930.
                    return LibCall::FloorF64;
                }
                &RoundImm::RoundUp => {
                    // Rule at src/isa/x64/lower.isle line 3928.
                    return LibCall::CeilF64;
                }
                &RoundImm::RoundZero => {
                    // Rule at src/isa/x64/lower.isle line 3934.
                    return LibCall::TruncF64;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "round_libcall", "src/isa/x64/lower.isle line 3926"
    )
}

// Generated as internal constructor for term nonzero_sdiv_divisor.
pub fn constructor_nonzero_sdiv_divisor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Reg {
    let v2 = C::def_inst(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = &C::inst_data(ctx, v3);
        if let &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } = v4
        {
            if let &Opcode::Iconst = v5 {
                let v7 = C::safe_divisor_from_imm64(ctx, arg0, v6);
                if let Some(v8) = v7 {
                    let v9 = constructor_imm(ctx, arg0, v8);
                    // Rule at src/isa/x64/lower.isle line 4014.
                    return v9;
                }
            }
        }
    }
    let v10 = C::put_in_reg(ctx, arg1);
    let v11 = &C::raw_operand_size_of_type(ctx, arg0);
    let v12 = &constructor_reg_to_gpr_mem_imm(ctx, v10);
    let v13 = C::gpr_new(ctx, v10);
    let v14 = &constructor_x64_test(ctx, v11, v12, v13);
    let v17 = &constructor_trap_if(ctx, &CC::Z, &TrapCode::IntegerDivisionByZero);
    let v18 = &constructor_with_flags_side_effect(ctx, v14, v17);
    let v19 = constructor_side_effect(ctx, v18);
    // Rule at src/isa/x64/lower.isle line 4017.
    return v10;
}

// Generated as internal constructor for term lower_pshufb.
pub fn constructor_lower_pshufb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &RegMem) -> Xmm {
    let v2 = C::use_ssse3(ctx);
    if v2 == true {
        let v3 = &C::reg_mem_to_xmm_mem(ctx, arg1);
        let v4 = constructor_x64_pshufb(ctx, arg0, v3);
        // Rule at src/isa/x64/lower.isle line 4312.
        return v4;
    }
    match arg1 {
        &RegMem::Reg { reg: v5 } => {
            let v7 = C::xmm_to_reg(ctx, arg0);
            let v8 = C::libcall_2(ctx, &LibCall::X86Pshufb, v7, v5);
            let v9 = C::xmm_new(ctx, v8);
            // Rule at src/isa/x64/lower.isle line 4315.
            return v9;
        }
        &RegMem::Mem { addr: ref v10 } => {
            let v11 = &constructor_synthetic_amode_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            let v13 = C::xmm_to_reg(ctx, v12);
            let v14 = &constructor_xmm_to_reg_mem(ctx, v13);
            let v15 = &C::xmm_mem_to_reg_mem(ctx, v14);
            let v16 = constructor_lower_pshufb(ctx, arg0, v15);
            // Rule at src/isa/x64/lower.isle line 4317.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_pshufb", "src/isa/x64/lower.isle line 4311"
    )
}
